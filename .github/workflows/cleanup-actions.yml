# Copyright 2020 Energinet DataHub A/S
#
# Licensed under the Apache License, Version 2.0 (the "License2");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
name: Workflow Run Pruner

on:
  push:
    branches:
      - renetnielsen/new-sub
  workflow_dispatch:

jobs:
  prune:
    runs-on: ubuntu-latest
    steps:
      - name: Prune all workflows
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const pages = 20;
            const workflowsInRepo = await github.actions.listRepoWorkflows({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const workflowsToNotPrune = [
              '.github/workflows/cd.yml',
              '.github/workflows/ci.yml',
              '.github/workflows/client-publish.yml.yml',
              '.github/workflows/codecov-ci.yml',
            ]

            let runs_to_delete = [];

            console.log(workflowsInRepo.data.workflows);
            for (const workflow of workflowsInRepo.data.workflows) {
              if (!workflowsToNotPrune.includes(workflow.path))Â {
                console.log(`Pruning workflow ${workflow.name} (${workflow.path}) with id ${workflow.id}`);
                for (let page = 0; page < pages; page += 1) {
                  let response = await github.actions.listWorkflowRuns({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    workflow_id: workflow.id,
                    page: page,
                    per_page: 100,
                  });

                  if (response.data.workflow_runs.length > 0) {
                    for (const run of response.data.workflow_runs) {
                      runs_to_delete.push([run.id, run.name]);
                    }
                  }
                }
              }
            }

            for (const run of runs_to_delete) {
              console.log(`Run id ${run[0]} of '${run[1]}' Deleting...`);
              try {
                await github.actions.deleteWorkflowRun({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: run[0]
                });
              } catch (error) {
                // ignore errors
              }
            }