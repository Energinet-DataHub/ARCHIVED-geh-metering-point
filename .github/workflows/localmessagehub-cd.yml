# Copyright 2020 Energinet DataHub A/S
#
# Licensed under the Apache License, Version 2.0 (the "License2");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
name: LocalMessageHub CD

on:
  push:
    branches:
      - main
      - renetnielsen/add-local-messagehub-function
    paths:
      - source/**
      - .github/workflows/localmessagehub-cd.yml
      - .github/actions/dotnet-build-and-test/**
  workflow_dispatch: {}

env:
  CSPROJ_FILE_PATH: 'source/Energinet.DataHub.MeteringPoints.EntryPoints.LocalMessageHub/Energinet.DataHub.MeteringPoints.EntryPoints.LocalMessageHub.csproj'
  SOLUTION_FILE_PATH: 'source/Energinet.DataHub.MeteringPoints.sln'
  DOTNET_VERSION: '5.0.202'
  ORGANISATION_NAME: 'endk'
  AZURE_FUNCTIONAPP_NAME: 'localmessagehub'
  PROJECT_NAME: meteringpoint
  REPOSITORY_NAME: Energinet-DataHub/geh-metering-point

jobs:
  build_localmessagehub:
    name: Build LocalMessageHub
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@master

      - name: Setup .NET 3.1 environment
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x'

      - name: Setup .NET ${{ env.DOTNET_VERSION }} environment
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Build and test project
        uses: ./.github/actions/dotnet-build-and-test
        with:
          CSPROJ_FILE_PATH: ${{ env.CSPROJ_FILE_PATH }}
          SOLUTION_FILE_PATH: ${{Â env.SOLUTION_FILE_PATH }}
          OUTPUT_PATH: '${{ github.workspace }}/output'

      - name: Publish artifact
        uses: actions/upload-artifact@v2
        with:
          name: drop
          path: '${{ github.workspace }}/output'
    
  deploy_localmessagehub_development:
    name: Deploy function to Development
    needs: build_localmessagehub
    runs-on: ubuntu-latest
    environment:
      name: Development
    steps:
      - name: Download artifact 
        uses: actions/download-artifact@v2
        with:
          name: drop
          path: drop

      - name: Set Environment Secrets
        shell: bash
        run: |  
          echo "ENVIRONMENT_SHORT=u" >> $GITHUB_ENV
      - name: Setup Azure CLI
        shell: bash
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb
          sudo bash
          az login --service-principal --username ${{ secrets.AZURE_SPN_ID }} --password ${{ secrets.AZURE_SPN_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Get function publish profile
        id: get-publish-profile
        run: |
          publish_profile=$(az webapp deployment list-publishing-profiles --name azfun-${{ env.AZURE_FUNCTIONAPP_NAME }}-${{ secrets.PROJECT_NAME }}-${{ secrets.ORGANISATION_NAME }}-${{ env.ENVIRONMENT_SHORT }} --resource-group ${{ secrets.AZURE_RG_NAME }} --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} --xml)
          echo "::set-output name=publish-profile::${publish_profile}"
      - name: Deploy function
        uses: Azure/functions-action@v1
        with:
          app-name: "azfun-${{ env.AZURE_FUNCTIONAPP_NAME }}"
          package: ${{ github.workspace }}/drop
          publish-profile: ${{ steps.get-publish-profile.outputs.publish-profile }}
    
  deploy_localmessagehub_test:
    name: Deploy function to Test
    needs: deploy_localmessagehub_development
    runs-on: ubuntu-latest
    environment:
      name: Test
    steps:
      - name: Download artifact 
        uses: actions/download-artifact@v2
        with:
          name: drop
          path: drop

      - name: Set Environment Secrets
        shell: bash
        run: |  
          echo "ENVIRONMENT_SHORT=t" >> $GITHUB_ENV
      - name: Setup Azure CLI
        shell: bash
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb
          sudo bash
          az login --service-principal --username ${{ secrets.AZURE_SPN_ID }} --password ${{ secrets.AZURE_SPN_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Get function publish profile
        id: get-publish-profile
        run: |
          publish_profile=$(az webapp deployment list-publishing-profiles --name azfun-${{ env.AZURE_FUNCTIONAPP_NAME }}-${{ secrets.PROJECT_NAME }}-${{ secrets.ORGANISATION_NAME }}-${{ env.ENVIRONMENT_SHORT }} --resource-group ${{ secrets.AZURE_RG_NAME }} --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} --xml)
          echo "::set-output name=publish-profile::${publish_profile}"
      - name: Deploy function
        uses: Azure/functions-action@v1
        with:
          app-name: "azfun-${{ env.AZURE_FUNCTIONAPP_NAME }}"
          package: ${{ github.workspace }}/drop
          publish-profile: ${{ steps.get-publish-profile.outputs.publish-profile }}
    
  deploy_localmessagehub_preproduction:
    name: Deploy function to Preproduction
    needs: deploy_localmessagehub_test
    runs-on: ubuntu-latest
    environment:
      name: Preproduction
    steps:
      - name: Download artifact 
        uses: actions/download-artifact@v2
        with:
          name: drop
          path: drop

      - name: Set Environment Secrets
        shell: bash
        run: |  
          echo "ENVIRONMENT_SHORT=b" >> $GITHUB_ENV
      - name: Setup Azure CLI
        shell: bash
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb
          sudo bash
          az login --service-principal --username ${{ secrets.AZURE_SPN_ID }} --password ${{ secrets.AZURE_SPN_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Get function publish profile
        id: get-publish-profile
        run: |
          publish_profile=$(az webapp deployment list-publishing-profiles --name azfun-${{ env.AZURE_FUNCTIONAPP_NAME }}-${{ secrets.PROJECT_NAME }}-${{ secrets.ORGANISATION_NAME }}-${{ env.ENVIRONMENT_SHORT }} --resource-group ${{ secrets.AZURE_RG_NAME }} --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} --xml)
          echo "::set-output name=publish-profile::${publish_profile}"
      - name: Deploy function
        uses: Azure/functions-action@v1
        with:
          app-name: "azfun-${{ env.AZURE_FUNCTIONAPP_NAME }}"
          package: ${{ github.workspace }}/drop
          publish-profile: ${{ steps.get-publish-profile.outputs.publish-profile }}
    
  deploy_localmessagehub_production:
    name: Deploy function to Production
    needs: deploy_localmessagehub_preproduction
    runs-on: ubuntu-latest
    environment:
      name: Production
    steps:
      - name: Download artifact 
        uses: actions/download-artifact@v2
        with:
          name: drop
          path: drop

      - name: Set Environment Secrets
        shell: bash
        run: |  
          echo "ENVIRONMENT_SHORT=p" >> $GITHUB_ENV
      - name: Setup Azure CLI
        shell: bash
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb
          sudo bash
          az login --service-principal --username ${{ secrets.AZURE_SPN_ID }} --password ${{ secrets.AZURE_SPN_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Get function publish profile
        id: get-publish-profile
        run: |
          publish_profile=$(az webapp deployment list-publishing-profiles --name azfun-${{ env.AZURE_FUNCTIONAPP_NAME }}-${{ secrets.PROJECT_NAME }}-${{ secrets.ORGANISATION_NAME }}-${{ env.ENVIRONMENT_SHORT }} --resource-group ${{ secrets.AZURE_RG_NAME }} --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} --xml)
          echo "::set-output name=publish-profile::${publish_profile}"
      - name: Deploy function
        uses: Azure/functions-action@v1
        with:
          app-name: "azfun-${{ env.AZURE_FUNCTIONAPP_NAME }}"
          package: ${{ github.workspace }}/drop
          publish-profile: ${{ steps.get-publish-profile.outputs.publish-profile }}
