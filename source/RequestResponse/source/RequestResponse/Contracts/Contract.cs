// Copyright 2020 Energinet DataHub A/S
//
// Licensed under the Apache License, Version 2.0 (the "License2");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Contracts/Contract.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Energinet.DataHub.MeteringPoints.RequestResponse.Contract {

  /// <summary>Holder for reflection information generated from Contracts/Contract.proto</summary>
  public static partial class ContractReflection {

    #region Descriptor
    /// <summary>File descriptor for Contracts/Contract.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ContractReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhDb250cmFjdHMvQ29udHJhY3QucHJvdG8aH2dvb2dsZS9wcm90b2J1Zi90",
            "aW1lc3RhbXAucHJvdG8aHmdvb2dsZS9wcm90b2J1Zi93cmFwcGVycy5wcm90",
            "byKSBQoHQWRkcmVzcxIwCgpzdHJlZXROYW1lGAEgASgLMhwuZ29vZ2xlLnBy",
            "b3RvYnVmLlN0cmluZ1ZhbHVlEi4KCHBvc3RDb2RlGAIgASgLMhwuZ29vZ2xl",
            "LnByb3RvYnVmLlN0cmluZ1ZhbHVlEi4KCGNpdHlOYW1lGAMgASgLMhwuZ29v",
            "Z2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEjEKC2NvdW50cnlDb2RlGAQgASgL",
            "MhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEjoKFmFjdHVhbEFkZHJl",
            "c3NJbmRpY2F0b3IYBSABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVl",
            "EjQKDmJ1aWxkaW5nTnVtYmVyGAYgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0",
            "cmluZ1ZhbHVlEjAKCnN0cmVldENvZGUYByABKAsyHC5nb29nbGUucHJvdG9i",
            "dWYuU3RyaW5nVmFsdWUSOQoTZmxvb3JJZGVudGlmaWNhdGlvbhgIIAEoCzIc",
            "Lmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRI4ChJyb29tSWRlbnRpZmlj",
            "YXRpb24YCSABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUSNgoQ",
            "bXVuaWNpcGFsaXR5Q29kZRgKIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJp",
            "bmdWYWx1ZRI5ChNjaXR5TmFtZVN1YkRpdmlzaW9uGAsgASgLMhwuZ29vZ2xl",
            "LnByb3RvYnVmLlN0cmluZ1ZhbHVlEjYKEGdlb0luZm9SZWZlcmVuY2UYDCAB",
            "KAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUi4QsKEk1hc3RlckRh",
            "dGFEb2N1bWVudBISCgpnc3JuTnVtYmVyGAEgASgJEjkKE3R5cGVPZk1ldGVy",
            "aW5nUG9pbnQYAiABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUS",
            "PAoWc3ViVHlwZU9mTWV0ZXJpbmdQb2ludBgDIAEoCzIcLmdvb2dsZS5wcm90",
            "b2J1Zi5TdHJpbmdWYWx1ZRI8ChZtZXRlclJlYWRpbmdPY2N1cnJlbmNlGAQg",
            "ASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEjQKDm1heGltdW1D",
            "dXJyZW50GAUgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEjIK",
            "DG1heGltdW1Qb3dlchgGIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdW",
            "YWx1ZRI2ChBtZXRlcmluZ0dyaWRBcmVhGAcgASgLMhwuZ29vZ2xlLnByb3Rv",
            "YnVmLlN0cmluZ1ZhbHVlEjAKCnBvd2VyUGxhbnQYCCABKAsyHC5nb29nbGUu",
            "cHJvdG9idWYuU3RyaW5nVmFsdWUSOQoTbG9jYXRpb25EZXNjcmlwdGlvbhgJ",
            "IAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRJAChpwYXJlbnRS",
            "ZWxhdGVkTWV0ZXJpbmdQb2ludBgKIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5T",
            "dHJpbmdWYWx1ZRItChtpbnN0YWxsYXRpb25Mb2NhdGlvbkFkZHJlc3MYCyAB",
            "KAsyCC5BZGRyZXNzEjYKEHNldHRsZW1lbnRNZXRob2QYDCABKAsyHC5nb29n",
            "bGUucHJvdG9idWYuU3RyaW5nVmFsdWUSLgoIdW5pdFR5cGUYDSABKAsyHC5n",
            "b29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUSNwoRZGlzY29ubmVjdGlvblR5",
            "cGUYDiABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUSFQoNb2Nj",
            "dXJlbmNlRGF0ZRgPIAEoCRIxCgttZXRlck51bWJlchgQIAEoCzIcLmdvb2ds",
            "ZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRIVCg10cmFuc2FjdGlvbklkGBEgASgJ",
            "EkMKHXBoeXNpY2FsU3RhdHVzT2ZNZXRlcmluZ1BvaW50GBIgASgLMhwuZ29v",
            "Z2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEjgKEm5ldFNldHRsZW1lbnRHcm91",
            "cBgTIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRI0Cg5jb25u",
            "ZWN0aW9uVHlwZRgUIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1",
            "ZRIvCglhc3NldFR5cGUYFSABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5n",
            "VmFsdWUSLgoIZnJvbUdyaWQYFiABKAsyHC5nb29nbGUucHJvdG9idWYuU3Ry",
            "aW5nVmFsdWUSLAoGdG9HcmlkGBcgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0",
            "cmluZ1ZhbHVlEjEKC3Byb2R1Y3RUeXBlGBggASgLMhwuZ29vZ2xlLnByb3Rv",
            "YnVmLlN0cmluZ1ZhbHVlEjUKD21lYXN1cmVVbml0VHlwZRgZIAEoCzIcLmdv",
            "b2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRJAChpwaHlzaWNhbENvbm5lY3Rp",
            "b25DYXBhY2l0eRgaIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1",
            "ZRI/ChlzY2hlZHVsZWRNZXRlclJlYWRpbmdEYXRlGBsgASgLMhwuZ29vZ2xl",
            "LnByb3RvYnVmLlN0cmluZ1ZhbHVlEhMKC3Byb2Nlc3NUeXBlGBwgASgJEjgK",
            "FHByb2R1Y3Rpb25PYmxpZ2F0aW9uGB0gASgLMhouZ29vZ2xlLnByb3RvYnVm",
            "LkJvb2xWYWx1ZSJFChhDcmVhdGVEZWZhdWx0Q2hhcmdlTGlua3MSEgoKZ3Ny",
            "bk51bWJlchgBIAEoCRIVCg1jb3JyZWxhdGlvbklkGAIgASgJIk0KIENyZWF0",
            "ZURlZmF1bHRDaGFyZ2VMaW5rc01lc3NhZ2VzEhIKCmdzcm5OdW1iZXIYASAB",
            "KAkSFQoNY29ycmVsYXRpb25JZBgCIAEoCSKLAQoRQWRkRW5lcmd5U3VwcGxp",
            "ZXISCgoCaWQYASABKAkSGQoRbWV0ZXJpbmdfcG9pbnRfaWQYAiABKAkSMgoO",
            "ZWZmZWN0aXZlX2RhdGUYAyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0",
            "YW1wEhsKE2VuZXJneV9zdXBwbGllcl9nbG4YBCABKAkieQopU2VuZEFjY291",
            "bnRpbmdQb2ludENoYXJhY3RlcmlzdGljc01lc3NhZ2USCgoCaWQYASABKAkS",
            "GQoRbWV0ZXJpbmdfcG9pbnRfaWQYAiABKAkSFQoNdHJhbnNhdGlvbl9pZBgD",
            "IAEoCRIOCgZyZWFzb24YBCABKAkitAIKFU1ldGVyaW5nUG9pbnRFbnZlbG9w",
            "ZRIxChJtYXN0ZXJEYXRhRG9jdW1lbnQYASABKAsyEy5NYXN0ZXJEYXRhRG9j",
            "dW1lbnRIABI9ChhjcmVhdGVEZWZhdWx0Q2hhcmdlTGlua3MYAiABKAsyGS5D",
            "cmVhdGVEZWZhdWx0Q2hhcmdlTGlua3NIABJfCilzZW5kQWNjb3VudGluZ1Bv",
            "aW50Q2hhcmFjdGVyaXN0aWNzTWVzc2FnZRgFIAEoCzIqLlNlbmRBY2NvdW50",
            "aW5nUG9pbnRDaGFyYWN0ZXJpc3RpY3NNZXNzYWdlSAASLwoRYWRkRW5lcmd5",
            "U3VwcGxpZXIYBiABKAsyEi5BZGRFbmVyZ3lTdXBwbGllckgAQhcKFU1ldGVy",
            "aW5nUG9pbnRNZXNzYWdlc0I8qgI5RW5lcmdpbmV0LkRhdGFIdWIuTWV0ZXJp",
            "bmdQb2ludHMuUmVxdWVzdFJlc3BvbnNlLkNvbnRyYWN0YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.Address), global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.Address.Parser, new[]{ "StreetName", "PostCode", "CityName", "CountryCode", "ActualAddressIndicator", "BuildingNumber", "StreetCode", "FloorIdentification", "RoomIdentification", "MunicipalityCode", "CityNameSubDivision", "GeoInfoReference" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.MasterDataDocument), global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.MasterDataDocument.Parser, new[]{ "GsrnNumber", "TypeOfMeteringPoint", "SubTypeOfMeteringPoint", "MeterReadingOccurrence", "MaximumCurrent", "MaximumPower", "MeteringGridArea", "PowerPlant", "LocationDescription", "ParentRelatedMeteringPoint", "InstallationLocationAddress", "SettlementMethod", "UnitType", "DisconnectionType", "OccurenceDate", "MeterNumber", "TransactionId", "PhysicalStatusOfMeteringPoint", "NetSettlementGroup", "ConnectionType", "AssetType", "FromGrid", "ToGrid", "ProductType", "MeasureUnitType", "PhysicalConnectionCapacity", "ScheduledMeterReadingDate", "ProcessType", "ProductionObligation" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.CreateDefaultChargeLinks), global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.CreateDefaultChargeLinks.Parser, new[]{ "GsrnNumber", "CorrelationId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.CreateDefaultChargeLinksMessages), global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.CreateDefaultChargeLinksMessages.Parser, new[]{ "GsrnNumber", "CorrelationId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.AddEnergySupplier), global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.AddEnergySupplier.Parser, new[]{ "Id", "MeteringPointId", "EffectiveDate", "EnergySupplierGln" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.SendAccountingPointCharacteristicsMessage), global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.SendAccountingPointCharacteristicsMessage.Parser, new[]{ "Id", "MeteringPointId", "TransationId", "Reason" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.MeteringPointEnvelope), global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.MeteringPointEnvelope.Parser, new[]{ "MasterDataDocument", "CreateDefaultChargeLinks", "SendAccountingPointCharacteristicsMessage", "AddEnergySupplier" }, new[]{ "MeteringPointMessages" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Address : pb::IMessage<Address>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Address> _parser = new pb::MessageParser<Address>(() => new Address());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Address> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.ContractReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Address() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Address(Address other) : this() {
      StreetName = other.StreetName;
      PostCode = other.PostCode;
      CityName = other.CityName;
      CountryCode = other.CountryCode;
      ActualAddressIndicator = other.ActualAddressIndicator;
      BuildingNumber = other.BuildingNumber;
      StreetCode = other.StreetCode;
      FloorIdentification = other.FloorIdentification;
      RoomIdentification = other.RoomIdentification;
      MunicipalityCode = other.MunicipalityCode;
      CityNameSubDivision = other.CityNameSubDivision;
      GeoInfoReference = other.GeoInfoReference;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Address Clone() {
      return new Address(this);
    }

    /// <summary>Field number for the "streetName" field.</summary>
    public const int StreetNameFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _single_streetName_codec = pb::FieldCodec.ForClassWrapper<string>(10);
    private string streetName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string StreetName {
      get { return streetName_; }
      set {
        streetName_ = value;
      }
    }


    /// <summary>Field number for the "postCode" field.</summary>
    public const int PostCodeFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _single_postCode_codec = pb::FieldCodec.ForClassWrapper<string>(18);
    private string postCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PostCode {
      get { return postCode_; }
      set {
        postCode_ = value;
      }
    }


    /// <summary>Field number for the "cityName" field.</summary>
    public const int CityNameFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _single_cityName_codec = pb::FieldCodec.ForClassWrapper<string>(26);
    private string cityName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CityName {
      get { return cityName_; }
      set {
        cityName_ = value;
      }
    }


    /// <summary>Field number for the "countryCode" field.</summary>
    public const int CountryCodeFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _single_countryCode_codec = pb::FieldCodec.ForClassWrapper<string>(34);
    private string countryCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryCode {
      get { return countryCode_; }
      set {
        countryCode_ = value;
      }
    }


    /// <summary>Field number for the "actualAddressIndicator" field.</summary>
    public const int ActualAddressIndicatorFieldNumber = 5;
    private static readonly pb::FieldCodec<bool?> _single_actualAddressIndicator_codec = pb::FieldCodec.ForStructWrapper<bool>(42);
    private bool? actualAddressIndicator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool? ActualAddressIndicator {
      get { return actualAddressIndicator_; }
      set {
        actualAddressIndicator_ = value;
      }
    }


    /// <summary>Field number for the "buildingNumber" field.</summary>
    public const int BuildingNumberFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _single_buildingNumber_codec = pb::FieldCodec.ForClassWrapper<string>(50);
    private string buildingNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BuildingNumber {
      get { return buildingNumber_; }
      set {
        buildingNumber_ = value;
      }
    }


    /// <summary>Field number for the "streetCode" field.</summary>
    public const int StreetCodeFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _single_streetCode_codec = pb::FieldCodec.ForClassWrapper<string>(58);
    private string streetCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string StreetCode {
      get { return streetCode_; }
      set {
        streetCode_ = value;
      }
    }


    /// <summary>Field number for the "floorIdentification" field.</summary>
    public const int FloorIdentificationFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _single_floorIdentification_codec = pb::FieldCodec.ForClassWrapper<string>(66);
    private string floorIdentification_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FloorIdentification {
      get { return floorIdentification_; }
      set {
        floorIdentification_ = value;
      }
    }


    /// <summary>Field number for the "roomIdentification" field.</summary>
    public const int RoomIdentificationFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _single_roomIdentification_codec = pb::FieldCodec.ForClassWrapper<string>(74);
    private string roomIdentification_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RoomIdentification {
      get { return roomIdentification_; }
      set {
        roomIdentification_ = value;
      }
    }


    /// <summary>Field number for the "municipalityCode" field.</summary>
    public const int MunicipalityCodeFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _single_municipalityCode_codec = pb::FieldCodec.ForClassWrapper<string>(82);
    private string municipalityCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MunicipalityCode {
      get { return municipalityCode_; }
      set {
        municipalityCode_ = value;
      }
    }


    /// <summary>Field number for the "cityNameSubDivision" field.</summary>
    public const int CityNameSubDivisionFieldNumber = 11;
    private static readonly pb::FieldCodec<string> _single_cityNameSubDivision_codec = pb::FieldCodec.ForClassWrapper<string>(90);
    private string cityNameSubDivision_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CityNameSubDivision {
      get { return cityNameSubDivision_; }
      set {
        cityNameSubDivision_ = value;
      }
    }


    /// <summary>Field number for the "geoInfoReference" field.</summary>
    public const int GeoInfoReferenceFieldNumber = 12;
    private static readonly pb::FieldCodec<string> _single_geoInfoReference_codec = pb::FieldCodec.ForClassWrapper<string>(98);
    private string geoInfoReference_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string GeoInfoReference {
      get { return geoInfoReference_; }
      set {
        geoInfoReference_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Address);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Address other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StreetName != other.StreetName) return false;
      if (PostCode != other.PostCode) return false;
      if (CityName != other.CityName) return false;
      if (CountryCode != other.CountryCode) return false;
      if (ActualAddressIndicator != other.ActualAddressIndicator) return false;
      if (BuildingNumber != other.BuildingNumber) return false;
      if (StreetCode != other.StreetCode) return false;
      if (FloorIdentification != other.FloorIdentification) return false;
      if (RoomIdentification != other.RoomIdentification) return false;
      if (MunicipalityCode != other.MunicipalityCode) return false;
      if (CityNameSubDivision != other.CityNameSubDivision) return false;
      if (GeoInfoReference != other.GeoInfoReference) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (streetName_ != null) hash ^= StreetName.GetHashCode();
      if (postCode_ != null) hash ^= PostCode.GetHashCode();
      if (cityName_ != null) hash ^= CityName.GetHashCode();
      if (countryCode_ != null) hash ^= CountryCode.GetHashCode();
      if (actualAddressIndicator_ != null) hash ^= ActualAddressIndicator.GetHashCode();
      if (buildingNumber_ != null) hash ^= BuildingNumber.GetHashCode();
      if (streetCode_ != null) hash ^= StreetCode.GetHashCode();
      if (floorIdentification_ != null) hash ^= FloorIdentification.GetHashCode();
      if (roomIdentification_ != null) hash ^= RoomIdentification.GetHashCode();
      if (municipalityCode_ != null) hash ^= MunicipalityCode.GetHashCode();
      if (cityNameSubDivision_ != null) hash ^= CityNameSubDivision.GetHashCode();
      if (geoInfoReference_ != null) hash ^= GeoInfoReference.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (streetName_ != null) {
        _single_streetName_codec.WriteTagAndValue(output, StreetName);
      }
      if (postCode_ != null) {
        _single_postCode_codec.WriteTagAndValue(output, PostCode);
      }
      if (cityName_ != null) {
        _single_cityName_codec.WriteTagAndValue(output, CityName);
      }
      if (countryCode_ != null) {
        _single_countryCode_codec.WriteTagAndValue(output, CountryCode);
      }
      if (actualAddressIndicator_ != null) {
        _single_actualAddressIndicator_codec.WriteTagAndValue(output, ActualAddressIndicator);
      }
      if (buildingNumber_ != null) {
        _single_buildingNumber_codec.WriteTagAndValue(output, BuildingNumber);
      }
      if (streetCode_ != null) {
        _single_streetCode_codec.WriteTagAndValue(output, StreetCode);
      }
      if (floorIdentification_ != null) {
        _single_floorIdentification_codec.WriteTagAndValue(output, FloorIdentification);
      }
      if (roomIdentification_ != null) {
        _single_roomIdentification_codec.WriteTagAndValue(output, RoomIdentification);
      }
      if (municipalityCode_ != null) {
        _single_municipalityCode_codec.WriteTagAndValue(output, MunicipalityCode);
      }
      if (cityNameSubDivision_ != null) {
        _single_cityNameSubDivision_codec.WriteTagAndValue(output, CityNameSubDivision);
      }
      if (geoInfoReference_ != null) {
        _single_geoInfoReference_codec.WriteTagAndValue(output, GeoInfoReference);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (streetName_ != null) {
        _single_streetName_codec.WriteTagAndValue(ref output, StreetName);
      }
      if (postCode_ != null) {
        _single_postCode_codec.WriteTagAndValue(ref output, PostCode);
      }
      if (cityName_ != null) {
        _single_cityName_codec.WriteTagAndValue(ref output, CityName);
      }
      if (countryCode_ != null) {
        _single_countryCode_codec.WriteTagAndValue(ref output, CountryCode);
      }
      if (actualAddressIndicator_ != null) {
        _single_actualAddressIndicator_codec.WriteTagAndValue(ref output, ActualAddressIndicator);
      }
      if (buildingNumber_ != null) {
        _single_buildingNumber_codec.WriteTagAndValue(ref output, BuildingNumber);
      }
      if (streetCode_ != null) {
        _single_streetCode_codec.WriteTagAndValue(ref output, StreetCode);
      }
      if (floorIdentification_ != null) {
        _single_floorIdentification_codec.WriteTagAndValue(ref output, FloorIdentification);
      }
      if (roomIdentification_ != null) {
        _single_roomIdentification_codec.WriteTagAndValue(ref output, RoomIdentification);
      }
      if (municipalityCode_ != null) {
        _single_municipalityCode_codec.WriteTagAndValue(ref output, MunicipalityCode);
      }
      if (cityNameSubDivision_ != null) {
        _single_cityNameSubDivision_codec.WriteTagAndValue(ref output, CityNameSubDivision);
      }
      if (geoInfoReference_ != null) {
        _single_geoInfoReference_codec.WriteTagAndValue(ref output, GeoInfoReference);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (streetName_ != null) {
        size += _single_streetName_codec.CalculateSizeWithTag(StreetName);
      }
      if (postCode_ != null) {
        size += _single_postCode_codec.CalculateSizeWithTag(PostCode);
      }
      if (cityName_ != null) {
        size += _single_cityName_codec.CalculateSizeWithTag(CityName);
      }
      if (countryCode_ != null) {
        size += _single_countryCode_codec.CalculateSizeWithTag(CountryCode);
      }
      if (actualAddressIndicator_ != null) {
        size += _single_actualAddressIndicator_codec.CalculateSizeWithTag(ActualAddressIndicator);
      }
      if (buildingNumber_ != null) {
        size += _single_buildingNumber_codec.CalculateSizeWithTag(BuildingNumber);
      }
      if (streetCode_ != null) {
        size += _single_streetCode_codec.CalculateSizeWithTag(StreetCode);
      }
      if (floorIdentification_ != null) {
        size += _single_floorIdentification_codec.CalculateSizeWithTag(FloorIdentification);
      }
      if (roomIdentification_ != null) {
        size += _single_roomIdentification_codec.CalculateSizeWithTag(RoomIdentification);
      }
      if (municipalityCode_ != null) {
        size += _single_municipalityCode_codec.CalculateSizeWithTag(MunicipalityCode);
      }
      if (cityNameSubDivision_ != null) {
        size += _single_cityNameSubDivision_codec.CalculateSizeWithTag(CityNameSubDivision);
      }
      if (geoInfoReference_ != null) {
        size += _single_geoInfoReference_codec.CalculateSizeWithTag(GeoInfoReference);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Address other) {
      if (other == null) {
        return;
      }
      if (other.streetName_ != null) {
        if (streetName_ == null || other.StreetName != "") {
          StreetName = other.StreetName;
        }
      }
      if (other.postCode_ != null) {
        if (postCode_ == null || other.PostCode != "") {
          PostCode = other.PostCode;
        }
      }
      if (other.cityName_ != null) {
        if (cityName_ == null || other.CityName != "") {
          CityName = other.CityName;
        }
      }
      if (other.countryCode_ != null) {
        if (countryCode_ == null || other.CountryCode != "") {
          CountryCode = other.CountryCode;
        }
      }
      if (other.actualAddressIndicator_ != null) {
        if (actualAddressIndicator_ == null || other.ActualAddressIndicator != false) {
          ActualAddressIndicator = other.ActualAddressIndicator;
        }
      }
      if (other.buildingNumber_ != null) {
        if (buildingNumber_ == null || other.BuildingNumber != "") {
          BuildingNumber = other.BuildingNumber;
        }
      }
      if (other.streetCode_ != null) {
        if (streetCode_ == null || other.StreetCode != "") {
          StreetCode = other.StreetCode;
        }
      }
      if (other.floorIdentification_ != null) {
        if (floorIdentification_ == null || other.FloorIdentification != "") {
          FloorIdentification = other.FloorIdentification;
        }
      }
      if (other.roomIdentification_ != null) {
        if (roomIdentification_ == null || other.RoomIdentification != "") {
          RoomIdentification = other.RoomIdentification;
        }
      }
      if (other.municipalityCode_ != null) {
        if (municipalityCode_ == null || other.MunicipalityCode != "") {
          MunicipalityCode = other.MunicipalityCode;
        }
      }
      if (other.cityNameSubDivision_ != null) {
        if (cityNameSubDivision_ == null || other.CityNameSubDivision != "") {
          CityNameSubDivision = other.CityNameSubDivision;
        }
      }
      if (other.geoInfoReference_ != null) {
        if (geoInfoReference_ == null || other.GeoInfoReference != "") {
          GeoInfoReference = other.GeoInfoReference;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            string value = _single_streetName_codec.Read(input);
            if (streetName_ == null || value != "") {
              StreetName = value;
            }
            break;
          }
          case 18: {
            string value = _single_postCode_codec.Read(input);
            if (postCode_ == null || value != "") {
              PostCode = value;
            }
            break;
          }
          case 26: {
            string value = _single_cityName_codec.Read(input);
            if (cityName_ == null || value != "") {
              CityName = value;
            }
            break;
          }
          case 34: {
            string value = _single_countryCode_codec.Read(input);
            if (countryCode_ == null || value != "") {
              CountryCode = value;
            }
            break;
          }
          case 42: {
            bool? value = _single_actualAddressIndicator_codec.Read(input);
            if (actualAddressIndicator_ == null || value != false) {
              ActualAddressIndicator = value;
            }
            break;
          }
          case 50: {
            string value = _single_buildingNumber_codec.Read(input);
            if (buildingNumber_ == null || value != "") {
              BuildingNumber = value;
            }
            break;
          }
          case 58: {
            string value = _single_streetCode_codec.Read(input);
            if (streetCode_ == null || value != "") {
              StreetCode = value;
            }
            break;
          }
          case 66: {
            string value = _single_floorIdentification_codec.Read(input);
            if (floorIdentification_ == null || value != "") {
              FloorIdentification = value;
            }
            break;
          }
          case 74: {
            string value = _single_roomIdentification_codec.Read(input);
            if (roomIdentification_ == null || value != "") {
              RoomIdentification = value;
            }
            break;
          }
          case 82: {
            string value = _single_municipalityCode_codec.Read(input);
            if (municipalityCode_ == null || value != "") {
              MunicipalityCode = value;
            }
            break;
          }
          case 90: {
            string value = _single_cityNameSubDivision_codec.Read(input);
            if (cityNameSubDivision_ == null || value != "") {
              CityNameSubDivision = value;
            }
            break;
          }
          case 98: {
            string value = _single_geoInfoReference_codec.Read(input);
            if (geoInfoReference_ == null || value != "") {
              GeoInfoReference = value;
            }
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            string value = _single_streetName_codec.Read(ref input);
            if (streetName_ == null || value != "") {
              StreetName = value;
            }
            break;
          }
          case 18: {
            string value = _single_postCode_codec.Read(ref input);
            if (postCode_ == null || value != "") {
              PostCode = value;
            }
            break;
          }
          case 26: {
            string value = _single_cityName_codec.Read(ref input);
            if (cityName_ == null || value != "") {
              CityName = value;
            }
            break;
          }
          case 34: {
            string value = _single_countryCode_codec.Read(ref input);
            if (countryCode_ == null || value != "") {
              CountryCode = value;
            }
            break;
          }
          case 42: {
            bool? value = _single_actualAddressIndicator_codec.Read(ref input);
            if (actualAddressIndicator_ == null || value != false) {
              ActualAddressIndicator = value;
            }
            break;
          }
          case 50: {
            string value = _single_buildingNumber_codec.Read(ref input);
            if (buildingNumber_ == null || value != "") {
              BuildingNumber = value;
            }
            break;
          }
          case 58: {
            string value = _single_streetCode_codec.Read(ref input);
            if (streetCode_ == null || value != "") {
              StreetCode = value;
            }
            break;
          }
          case 66: {
            string value = _single_floorIdentification_codec.Read(ref input);
            if (floorIdentification_ == null || value != "") {
              FloorIdentification = value;
            }
            break;
          }
          case 74: {
            string value = _single_roomIdentification_codec.Read(ref input);
            if (roomIdentification_ == null || value != "") {
              RoomIdentification = value;
            }
            break;
          }
          case 82: {
            string value = _single_municipalityCode_codec.Read(ref input);
            if (municipalityCode_ == null || value != "") {
              MunicipalityCode = value;
            }
            break;
          }
          case 90: {
            string value = _single_cityNameSubDivision_codec.Read(ref input);
            if (cityNameSubDivision_ == null || value != "") {
              CityNameSubDivision = value;
            }
            break;
          }
          case 98: {
            string value = _single_geoInfoReference_codec.Read(ref input);
            if (geoInfoReference_ == null || value != "") {
              GeoInfoReference = value;
            }
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MasterDataDocument : pb::IMessage<MasterDataDocument>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MasterDataDocument> _parser = new pb::MessageParser<MasterDataDocument>(() => new MasterDataDocument());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MasterDataDocument> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.ContractReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MasterDataDocument() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MasterDataDocument(MasterDataDocument other) : this() {
      gsrnNumber_ = other.gsrnNumber_;
      TypeOfMeteringPoint = other.TypeOfMeteringPoint;
      SubTypeOfMeteringPoint = other.SubTypeOfMeteringPoint;
      MeterReadingOccurrence = other.MeterReadingOccurrence;
      MaximumCurrent = other.MaximumCurrent;
      MaximumPower = other.MaximumPower;
      MeteringGridArea = other.MeteringGridArea;
      PowerPlant = other.PowerPlant;
      LocationDescription = other.LocationDescription;
      ParentRelatedMeteringPoint = other.ParentRelatedMeteringPoint;
      installationLocationAddress_ = other.installationLocationAddress_ != null ? other.installationLocationAddress_.Clone() : null;
      SettlementMethod = other.SettlementMethod;
      UnitType = other.UnitType;
      DisconnectionType = other.DisconnectionType;
      occurenceDate_ = other.occurenceDate_;
      MeterNumber = other.MeterNumber;
      transactionId_ = other.transactionId_;
      PhysicalStatusOfMeteringPoint = other.PhysicalStatusOfMeteringPoint;
      NetSettlementGroup = other.NetSettlementGroup;
      ConnectionType = other.ConnectionType;
      AssetType = other.AssetType;
      FromGrid = other.FromGrid;
      ToGrid = other.ToGrid;
      ProductType = other.ProductType;
      MeasureUnitType = other.MeasureUnitType;
      PhysicalConnectionCapacity = other.PhysicalConnectionCapacity;
      ScheduledMeterReadingDate = other.ScheduledMeterReadingDate;
      processType_ = other.processType_;
      ProductionObligation = other.ProductionObligation;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MasterDataDocument Clone() {
      return new MasterDataDocument(this);
    }

    /// <summary>Field number for the "gsrnNumber" field.</summary>
    public const int GsrnNumberFieldNumber = 1;
    private string gsrnNumber_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string GsrnNumber {
      get { return gsrnNumber_; }
      set {
        gsrnNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "typeOfMeteringPoint" field.</summary>
    public const int TypeOfMeteringPointFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _single_typeOfMeteringPoint_codec = pb::FieldCodec.ForClassWrapper<string>(18);
    private string typeOfMeteringPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TypeOfMeteringPoint {
      get { return typeOfMeteringPoint_; }
      set {
        typeOfMeteringPoint_ = value;
      }
    }


    /// <summary>Field number for the "subTypeOfMeteringPoint" field.</summary>
    public const int SubTypeOfMeteringPointFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _single_subTypeOfMeteringPoint_codec = pb::FieldCodec.ForClassWrapper<string>(26);
    private string subTypeOfMeteringPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SubTypeOfMeteringPoint {
      get { return subTypeOfMeteringPoint_; }
      set {
        subTypeOfMeteringPoint_ = value;
      }
    }


    /// <summary>Field number for the "meterReadingOccurrence" field.</summary>
    public const int MeterReadingOccurrenceFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _single_meterReadingOccurrence_codec = pb::FieldCodec.ForClassWrapper<string>(34);
    private string meterReadingOccurrence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MeterReadingOccurrence {
      get { return meterReadingOccurrence_; }
      set {
        meterReadingOccurrence_ = value;
      }
    }


    /// <summary>Field number for the "maximumCurrent" field.</summary>
    public const int MaximumCurrentFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _single_maximumCurrent_codec = pb::FieldCodec.ForClassWrapper<string>(42);
    private string maximumCurrent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MaximumCurrent {
      get { return maximumCurrent_; }
      set {
        maximumCurrent_ = value;
      }
    }


    /// <summary>Field number for the "maximumPower" field.</summary>
    public const int MaximumPowerFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _single_maximumPower_codec = pb::FieldCodec.ForClassWrapper<string>(50);
    private string maximumPower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MaximumPower {
      get { return maximumPower_; }
      set {
        maximumPower_ = value;
      }
    }


    /// <summary>Field number for the "meteringGridArea" field.</summary>
    public const int MeteringGridAreaFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _single_meteringGridArea_codec = pb::FieldCodec.ForClassWrapper<string>(58);
    private string meteringGridArea_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MeteringGridArea {
      get { return meteringGridArea_; }
      set {
        meteringGridArea_ = value;
      }
    }


    /// <summary>Field number for the "powerPlant" field.</summary>
    public const int PowerPlantFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _single_powerPlant_codec = pb::FieldCodec.ForClassWrapper<string>(66);
    private string powerPlant_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PowerPlant {
      get { return powerPlant_; }
      set {
        powerPlant_ = value;
      }
    }


    /// <summary>Field number for the "locationDescription" field.</summary>
    public const int LocationDescriptionFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _single_locationDescription_codec = pb::FieldCodec.ForClassWrapper<string>(74);
    private string locationDescription_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LocationDescription {
      get { return locationDescription_; }
      set {
        locationDescription_ = value;
      }
    }


    /// <summary>Field number for the "parentRelatedMeteringPoint" field.</summary>
    public const int ParentRelatedMeteringPointFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _single_parentRelatedMeteringPoint_codec = pb::FieldCodec.ForClassWrapper<string>(82);
    private string parentRelatedMeteringPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ParentRelatedMeteringPoint {
      get { return parentRelatedMeteringPoint_; }
      set {
        parentRelatedMeteringPoint_ = value;
      }
    }


    /// <summary>Field number for the "installationLocationAddress" field.</summary>
    public const int InstallationLocationAddressFieldNumber = 11;
    private global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.Address installationLocationAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.Address InstallationLocationAddress {
      get { return installationLocationAddress_; }
      set {
        installationLocationAddress_ = value;
      }
    }

    /// <summary>Field number for the "settlementMethod" field.</summary>
    public const int SettlementMethodFieldNumber = 12;
    private static readonly pb::FieldCodec<string> _single_settlementMethod_codec = pb::FieldCodec.ForClassWrapper<string>(98);
    private string settlementMethod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SettlementMethod {
      get { return settlementMethod_; }
      set {
        settlementMethod_ = value;
      }
    }


    /// <summary>Field number for the "unitType" field.</summary>
    public const int UnitTypeFieldNumber = 13;
    private static readonly pb::FieldCodec<string> _single_unitType_codec = pb::FieldCodec.ForClassWrapper<string>(106);
    private string unitType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UnitType {
      get { return unitType_; }
      set {
        unitType_ = value;
      }
    }


    /// <summary>Field number for the "disconnectionType" field.</summary>
    public const int DisconnectionTypeFieldNumber = 14;
    private static readonly pb::FieldCodec<string> _single_disconnectionType_codec = pb::FieldCodec.ForClassWrapper<string>(114);
    private string disconnectionType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DisconnectionType {
      get { return disconnectionType_; }
      set {
        disconnectionType_ = value;
      }
    }


    /// <summary>Field number for the "occurenceDate" field.</summary>
    public const int OccurenceDateFieldNumber = 15;
    private string occurenceDate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OccurenceDate {
      get { return occurenceDate_; }
      set {
        occurenceDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "meterNumber" field.</summary>
    public const int MeterNumberFieldNumber = 16;
    private static readonly pb::FieldCodec<string> _single_meterNumber_codec = pb::FieldCodec.ForClassWrapper<string>(130);
    private string meterNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MeterNumber {
      get { return meterNumber_; }
      set {
        meterNumber_ = value;
      }
    }


    /// <summary>Field number for the "transactionId" field.</summary>
    public const int TransactionIdFieldNumber = 17;
    private string transactionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TransactionId {
      get { return transactionId_; }
      set {
        transactionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "physicalStatusOfMeteringPoint" field.</summary>
    public const int PhysicalStatusOfMeteringPointFieldNumber = 18;
    private static readonly pb::FieldCodec<string> _single_physicalStatusOfMeteringPoint_codec = pb::FieldCodec.ForClassWrapper<string>(146);
    private string physicalStatusOfMeteringPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PhysicalStatusOfMeteringPoint {
      get { return physicalStatusOfMeteringPoint_; }
      set {
        physicalStatusOfMeteringPoint_ = value;
      }
    }


    /// <summary>Field number for the "netSettlementGroup" field.</summary>
    public const int NetSettlementGroupFieldNumber = 19;
    private static readonly pb::FieldCodec<string> _single_netSettlementGroup_codec = pb::FieldCodec.ForClassWrapper<string>(154);
    private string netSettlementGroup_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string NetSettlementGroup {
      get { return netSettlementGroup_; }
      set {
        netSettlementGroup_ = value;
      }
    }


    /// <summary>Field number for the "connectionType" field.</summary>
    public const int ConnectionTypeFieldNumber = 20;
    private static readonly pb::FieldCodec<string> _single_connectionType_codec = pb::FieldCodec.ForClassWrapper<string>(162);
    private string connectionType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ConnectionType {
      get { return connectionType_; }
      set {
        connectionType_ = value;
      }
    }


    /// <summary>Field number for the "assetType" field.</summary>
    public const int AssetTypeFieldNumber = 21;
    private static readonly pb::FieldCodec<string> _single_assetType_codec = pb::FieldCodec.ForClassWrapper<string>(170);
    private string assetType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AssetType {
      get { return assetType_; }
      set {
        assetType_ = value;
      }
    }


    /// <summary>Field number for the "fromGrid" field.</summary>
    public const int FromGridFieldNumber = 22;
    private static readonly pb::FieldCodec<string> _single_fromGrid_codec = pb::FieldCodec.ForClassWrapper<string>(178);
    private string fromGrid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FromGrid {
      get { return fromGrid_; }
      set {
        fromGrid_ = value;
      }
    }


    /// <summary>Field number for the "toGrid" field.</summary>
    public const int ToGridFieldNumber = 23;
    private static readonly pb::FieldCodec<string> _single_toGrid_codec = pb::FieldCodec.ForClassWrapper<string>(186);
    private string toGrid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ToGrid {
      get { return toGrid_; }
      set {
        toGrid_ = value;
      }
    }


    /// <summary>Field number for the "productType" field.</summary>
    public const int ProductTypeFieldNumber = 24;
    private static readonly pb::FieldCodec<string> _single_productType_codec = pb::FieldCodec.ForClassWrapper<string>(194);
    private string productType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ProductType {
      get { return productType_; }
      set {
        productType_ = value;
      }
    }


    /// <summary>Field number for the "measureUnitType" field.</summary>
    public const int MeasureUnitTypeFieldNumber = 25;
    private static readonly pb::FieldCodec<string> _single_measureUnitType_codec = pb::FieldCodec.ForClassWrapper<string>(202);
    private string measureUnitType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MeasureUnitType {
      get { return measureUnitType_; }
      set {
        measureUnitType_ = value;
      }
    }


    /// <summary>Field number for the "physicalConnectionCapacity" field.</summary>
    public const int PhysicalConnectionCapacityFieldNumber = 26;
    private static readonly pb::FieldCodec<string> _single_physicalConnectionCapacity_codec = pb::FieldCodec.ForClassWrapper<string>(210);
    private string physicalConnectionCapacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PhysicalConnectionCapacity {
      get { return physicalConnectionCapacity_; }
      set {
        physicalConnectionCapacity_ = value;
      }
    }


    /// <summary>Field number for the "scheduledMeterReadingDate" field.</summary>
    public const int ScheduledMeterReadingDateFieldNumber = 27;
    private static readonly pb::FieldCodec<string> _single_scheduledMeterReadingDate_codec = pb::FieldCodec.ForClassWrapper<string>(218);
    private string scheduledMeterReadingDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ScheduledMeterReadingDate {
      get { return scheduledMeterReadingDate_; }
      set {
        scheduledMeterReadingDate_ = value;
      }
    }


    /// <summary>Field number for the "processType" field.</summary>
    public const int ProcessTypeFieldNumber = 28;
    private string processType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ProcessType {
      get { return processType_; }
      set {
        processType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "productionObligation" field.</summary>
    public const int ProductionObligationFieldNumber = 29;
    private static readonly pb::FieldCodec<bool?> _single_productionObligation_codec = pb::FieldCodec.ForStructWrapper<bool>(234);
    private bool? productionObligation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool? ProductionObligation {
      get { return productionObligation_; }
      set {
        productionObligation_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MasterDataDocument);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MasterDataDocument other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GsrnNumber != other.GsrnNumber) return false;
      if (TypeOfMeteringPoint != other.TypeOfMeteringPoint) return false;
      if (SubTypeOfMeteringPoint != other.SubTypeOfMeteringPoint) return false;
      if (MeterReadingOccurrence != other.MeterReadingOccurrence) return false;
      if (MaximumCurrent != other.MaximumCurrent) return false;
      if (MaximumPower != other.MaximumPower) return false;
      if (MeteringGridArea != other.MeteringGridArea) return false;
      if (PowerPlant != other.PowerPlant) return false;
      if (LocationDescription != other.LocationDescription) return false;
      if (ParentRelatedMeteringPoint != other.ParentRelatedMeteringPoint) return false;
      if (!object.Equals(InstallationLocationAddress, other.InstallationLocationAddress)) return false;
      if (SettlementMethod != other.SettlementMethod) return false;
      if (UnitType != other.UnitType) return false;
      if (DisconnectionType != other.DisconnectionType) return false;
      if (OccurenceDate != other.OccurenceDate) return false;
      if (MeterNumber != other.MeterNumber) return false;
      if (TransactionId != other.TransactionId) return false;
      if (PhysicalStatusOfMeteringPoint != other.PhysicalStatusOfMeteringPoint) return false;
      if (NetSettlementGroup != other.NetSettlementGroup) return false;
      if (ConnectionType != other.ConnectionType) return false;
      if (AssetType != other.AssetType) return false;
      if (FromGrid != other.FromGrid) return false;
      if (ToGrid != other.ToGrid) return false;
      if (ProductType != other.ProductType) return false;
      if (MeasureUnitType != other.MeasureUnitType) return false;
      if (PhysicalConnectionCapacity != other.PhysicalConnectionCapacity) return false;
      if (ScheduledMeterReadingDate != other.ScheduledMeterReadingDate) return false;
      if (ProcessType != other.ProcessType) return false;
      if (ProductionObligation != other.ProductionObligation) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (GsrnNumber.Length != 0) hash ^= GsrnNumber.GetHashCode();
      if (typeOfMeteringPoint_ != null) hash ^= TypeOfMeteringPoint.GetHashCode();
      if (subTypeOfMeteringPoint_ != null) hash ^= SubTypeOfMeteringPoint.GetHashCode();
      if (meterReadingOccurrence_ != null) hash ^= MeterReadingOccurrence.GetHashCode();
      if (maximumCurrent_ != null) hash ^= MaximumCurrent.GetHashCode();
      if (maximumPower_ != null) hash ^= MaximumPower.GetHashCode();
      if (meteringGridArea_ != null) hash ^= MeteringGridArea.GetHashCode();
      if (powerPlant_ != null) hash ^= PowerPlant.GetHashCode();
      if (locationDescription_ != null) hash ^= LocationDescription.GetHashCode();
      if (parentRelatedMeteringPoint_ != null) hash ^= ParentRelatedMeteringPoint.GetHashCode();
      if (installationLocationAddress_ != null) hash ^= InstallationLocationAddress.GetHashCode();
      if (settlementMethod_ != null) hash ^= SettlementMethod.GetHashCode();
      if (unitType_ != null) hash ^= UnitType.GetHashCode();
      if (disconnectionType_ != null) hash ^= DisconnectionType.GetHashCode();
      if (OccurenceDate.Length != 0) hash ^= OccurenceDate.GetHashCode();
      if (meterNumber_ != null) hash ^= MeterNumber.GetHashCode();
      if (TransactionId.Length != 0) hash ^= TransactionId.GetHashCode();
      if (physicalStatusOfMeteringPoint_ != null) hash ^= PhysicalStatusOfMeteringPoint.GetHashCode();
      if (netSettlementGroup_ != null) hash ^= NetSettlementGroup.GetHashCode();
      if (connectionType_ != null) hash ^= ConnectionType.GetHashCode();
      if (assetType_ != null) hash ^= AssetType.GetHashCode();
      if (fromGrid_ != null) hash ^= FromGrid.GetHashCode();
      if (toGrid_ != null) hash ^= ToGrid.GetHashCode();
      if (productType_ != null) hash ^= ProductType.GetHashCode();
      if (measureUnitType_ != null) hash ^= MeasureUnitType.GetHashCode();
      if (physicalConnectionCapacity_ != null) hash ^= PhysicalConnectionCapacity.GetHashCode();
      if (scheduledMeterReadingDate_ != null) hash ^= ScheduledMeterReadingDate.GetHashCode();
      if (ProcessType.Length != 0) hash ^= ProcessType.GetHashCode();
      if (productionObligation_ != null) hash ^= ProductionObligation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (GsrnNumber.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GsrnNumber);
      }
      if (typeOfMeteringPoint_ != null) {
        _single_typeOfMeteringPoint_codec.WriteTagAndValue(output, TypeOfMeteringPoint);
      }
      if (subTypeOfMeteringPoint_ != null) {
        _single_subTypeOfMeteringPoint_codec.WriteTagAndValue(output, SubTypeOfMeteringPoint);
      }
      if (meterReadingOccurrence_ != null) {
        _single_meterReadingOccurrence_codec.WriteTagAndValue(output, MeterReadingOccurrence);
      }
      if (maximumCurrent_ != null) {
        _single_maximumCurrent_codec.WriteTagAndValue(output, MaximumCurrent);
      }
      if (maximumPower_ != null) {
        _single_maximumPower_codec.WriteTagAndValue(output, MaximumPower);
      }
      if (meteringGridArea_ != null) {
        _single_meteringGridArea_codec.WriteTagAndValue(output, MeteringGridArea);
      }
      if (powerPlant_ != null) {
        _single_powerPlant_codec.WriteTagAndValue(output, PowerPlant);
      }
      if (locationDescription_ != null) {
        _single_locationDescription_codec.WriteTagAndValue(output, LocationDescription);
      }
      if (parentRelatedMeteringPoint_ != null) {
        _single_parentRelatedMeteringPoint_codec.WriteTagAndValue(output, ParentRelatedMeteringPoint);
      }
      if (installationLocationAddress_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(InstallationLocationAddress);
      }
      if (settlementMethod_ != null) {
        _single_settlementMethod_codec.WriteTagAndValue(output, SettlementMethod);
      }
      if (unitType_ != null) {
        _single_unitType_codec.WriteTagAndValue(output, UnitType);
      }
      if (disconnectionType_ != null) {
        _single_disconnectionType_codec.WriteTagAndValue(output, DisconnectionType);
      }
      if (OccurenceDate.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(OccurenceDate);
      }
      if (meterNumber_ != null) {
        _single_meterNumber_codec.WriteTagAndValue(output, MeterNumber);
      }
      if (TransactionId.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(TransactionId);
      }
      if (physicalStatusOfMeteringPoint_ != null) {
        _single_physicalStatusOfMeteringPoint_codec.WriteTagAndValue(output, PhysicalStatusOfMeteringPoint);
      }
      if (netSettlementGroup_ != null) {
        _single_netSettlementGroup_codec.WriteTagAndValue(output, NetSettlementGroup);
      }
      if (connectionType_ != null) {
        _single_connectionType_codec.WriteTagAndValue(output, ConnectionType);
      }
      if (assetType_ != null) {
        _single_assetType_codec.WriteTagAndValue(output, AssetType);
      }
      if (fromGrid_ != null) {
        _single_fromGrid_codec.WriteTagAndValue(output, FromGrid);
      }
      if (toGrid_ != null) {
        _single_toGrid_codec.WriteTagAndValue(output, ToGrid);
      }
      if (productType_ != null) {
        _single_productType_codec.WriteTagAndValue(output, ProductType);
      }
      if (measureUnitType_ != null) {
        _single_measureUnitType_codec.WriteTagAndValue(output, MeasureUnitType);
      }
      if (physicalConnectionCapacity_ != null) {
        _single_physicalConnectionCapacity_codec.WriteTagAndValue(output, PhysicalConnectionCapacity);
      }
      if (scheduledMeterReadingDate_ != null) {
        _single_scheduledMeterReadingDate_codec.WriteTagAndValue(output, ScheduledMeterReadingDate);
      }
      if (ProcessType.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(ProcessType);
      }
      if (productionObligation_ != null) {
        _single_productionObligation_codec.WriteTagAndValue(output, ProductionObligation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (GsrnNumber.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GsrnNumber);
      }
      if (typeOfMeteringPoint_ != null) {
        _single_typeOfMeteringPoint_codec.WriteTagAndValue(ref output, TypeOfMeteringPoint);
      }
      if (subTypeOfMeteringPoint_ != null) {
        _single_subTypeOfMeteringPoint_codec.WriteTagAndValue(ref output, SubTypeOfMeteringPoint);
      }
      if (meterReadingOccurrence_ != null) {
        _single_meterReadingOccurrence_codec.WriteTagAndValue(ref output, MeterReadingOccurrence);
      }
      if (maximumCurrent_ != null) {
        _single_maximumCurrent_codec.WriteTagAndValue(ref output, MaximumCurrent);
      }
      if (maximumPower_ != null) {
        _single_maximumPower_codec.WriteTagAndValue(ref output, MaximumPower);
      }
      if (meteringGridArea_ != null) {
        _single_meteringGridArea_codec.WriteTagAndValue(ref output, MeteringGridArea);
      }
      if (powerPlant_ != null) {
        _single_powerPlant_codec.WriteTagAndValue(ref output, PowerPlant);
      }
      if (locationDescription_ != null) {
        _single_locationDescription_codec.WriteTagAndValue(ref output, LocationDescription);
      }
      if (parentRelatedMeteringPoint_ != null) {
        _single_parentRelatedMeteringPoint_codec.WriteTagAndValue(ref output, ParentRelatedMeteringPoint);
      }
      if (installationLocationAddress_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(InstallationLocationAddress);
      }
      if (settlementMethod_ != null) {
        _single_settlementMethod_codec.WriteTagAndValue(ref output, SettlementMethod);
      }
      if (unitType_ != null) {
        _single_unitType_codec.WriteTagAndValue(ref output, UnitType);
      }
      if (disconnectionType_ != null) {
        _single_disconnectionType_codec.WriteTagAndValue(ref output, DisconnectionType);
      }
      if (OccurenceDate.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(OccurenceDate);
      }
      if (meterNumber_ != null) {
        _single_meterNumber_codec.WriteTagAndValue(ref output, MeterNumber);
      }
      if (TransactionId.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(TransactionId);
      }
      if (physicalStatusOfMeteringPoint_ != null) {
        _single_physicalStatusOfMeteringPoint_codec.WriteTagAndValue(ref output, PhysicalStatusOfMeteringPoint);
      }
      if (netSettlementGroup_ != null) {
        _single_netSettlementGroup_codec.WriteTagAndValue(ref output, NetSettlementGroup);
      }
      if (connectionType_ != null) {
        _single_connectionType_codec.WriteTagAndValue(ref output, ConnectionType);
      }
      if (assetType_ != null) {
        _single_assetType_codec.WriteTagAndValue(ref output, AssetType);
      }
      if (fromGrid_ != null) {
        _single_fromGrid_codec.WriteTagAndValue(ref output, FromGrid);
      }
      if (toGrid_ != null) {
        _single_toGrid_codec.WriteTagAndValue(ref output, ToGrid);
      }
      if (productType_ != null) {
        _single_productType_codec.WriteTagAndValue(ref output, ProductType);
      }
      if (measureUnitType_ != null) {
        _single_measureUnitType_codec.WriteTagAndValue(ref output, MeasureUnitType);
      }
      if (physicalConnectionCapacity_ != null) {
        _single_physicalConnectionCapacity_codec.WriteTagAndValue(ref output, PhysicalConnectionCapacity);
      }
      if (scheduledMeterReadingDate_ != null) {
        _single_scheduledMeterReadingDate_codec.WriteTagAndValue(ref output, ScheduledMeterReadingDate);
      }
      if (ProcessType.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(ProcessType);
      }
      if (productionObligation_ != null) {
        _single_productionObligation_codec.WriteTagAndValue(ref output, ProductionObligation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (GsrnNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GsrnNumber);
      }
      if (typeOfMeteringPoint_ != null) {
        size += _single_typeOfMeteringPoint_codec.CalculateSizeWithTag(TypeOfMeteringPoint);
      }
      if (subTypeOfMeteringPoint_ != null) {
        size += _single_subTypeOfMeteringPoint_codec.CalculateSizeWithTag(SubTypeOfMeteringPoint);
      }
      if (meterReadingOccurrence_ != null) {
        size += _single_meterReadingOccurrence_codec.CalculateSizeWithTag(MeterReadingOccurrence);
      }
      if (maximumCurrent_ != null) {
        size += _single_maximumCurrent_codec.CalculateSizeWithTag(MaximumCurrent);
      }
      if (maximumPower_ != null) {
        size += _single_maximumPower_codec.CalculateSizeWithTag(MaximumPower);
      }
      if (meteringGridArea_ != null) {
        size += _single_meteringGridArea_codec.CalculateSizeWithTag(MeteringGridArea);
      }
      if (powerPlant_ != null) {
        size += _single_powerPlant_codec.CalculateSizeWithTag(PowerPlant);
      }
      if (locationDescription_ != null) {
        size += _single_locationDescription_codec.CalculateSizeWithTag(LocationDescription);
      }
      if (parentRelatedMeteringPoint_ != null) {
        size += _single_parentRelatedMeteringPoint_codec.CalculateSizeWithTag(ParentRelatedMeteringPoint);
      }
      if (installationLocationAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InstallationLocationAddress);
      }
      if (settlementMethod_ != null) {
        size += _single_settlementMethod_codec.CalculateSizeWithTag(SettlementMethod);
      }
      if (unitType_ != null) {
        size += _single_unitType_codec.CalculateSizeWithTag(UnitType);
      }
      if (disconnectionType_ != null) {
        size += _single_disconnectionType_codec.CalculateSizeWithTag(DisconnectionType);
      }
      if (OccurenceDate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OccurenceDate);
      }
      if (meterNumber_ != null) {
        size += _single_meterNumber_codec.CalculateSizeWithTag(MeterNumber);
      }
      if (TransactionId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TransactionId);
      }
      if (physicalStatusOfMeteringPoint_ != null) {
        size += _single_physicalStatusOfMeteringPoint_codec.CalculateSizeWithTag(PhysicalStatusOfMeteringPoint);
      }
      if (netSettlementGroup_ != null) {
        size += _single_netSettlementGroup_codec.CalculateSizeWithTag(NetSettlementGroup);
      }
      if (connectionType_ != null) {
        size += _single_connectionType_codec.CalculateSizeWithTag(ConnectionType);
      }
      if (assetType_ != null) {
        size += _single_assetType_codec.CalculateSizeWithTag(AssetType);
      }
      if (fromGrid_ != null) {
        size += _single_fromGrid_codec.CalculateSizeWithTag(FromGrid);
      }
      if (toGrid_ != null) {
        size += _single_toGrid_codec.CalculateSizeWithTag(ToGrid);
      }
      if (productType_ != null) {
        size += _single_productType_codec.CalculateSizeWithTag(ProductType);
      }
      if (measureUnitType_ != null) {
        size += _single_measureUnitType_codec.CalculateSizeWithTag(MeasureUnitType);
      }
      if (physicalConnectionCapacity_ != null) {
        size += _single_physicalConnectionCapacity_codec.CalculateSizeWithTag(PhysicalConnectionCapacity);
      }
      if (scheduledMeterReadingDate_ != null) {
        size += _single_scheduledMeterReadingDate_codec.CalculateSizeWithTag(ScheduledMeterReadingDate);
      }
      if (ProcessType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ProcessType);
      }
      if (productionObligation_ != null) {
        size += _single_productionObligation_codec.CalculateSizeWithTag(ProductionObligation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MasterDataDocument other) {
      if (other == null) {
        return;
      }
      if (other.GsrnNumber.Length != 0) {
        GsrnNumber = other.GsrnNumber;
      }
      if (other.typeOfMeteringPoint_ != null) {
        if (typeOfMeteringPoint_ == null || other.TypeOfMeteringPoint != "") {
          TypeOfMeteringPoint = other.TypeOfMeteringPoint;
        }
      }
      if (other.subTypeOfMeteringPoint_ != null) {
        if (subTypeOfMeteringPoint_ == null || other.SubTypeOfMeteringPoint != "") {
          SubTypeOfMeteringPoint = other.SubTypeOfMeteringPoint;
        }
      }
      if (other.meterReadingOccurrence_ != null) {
        if (meterReadingOccurrence_ == null || other.MeterReadingOccurrence != "") {
          MeterReadingOccurrence = other.MeterReadingOccurrence;
        }
      }
      if (other.maximumCurrent_ != null) {
        if (maximumCurrent_ == null || other.MaximumCurrent != "") {
          MaximumCurrent = other.MaximumCurrent;
        }
      }
      if (other.maximumPower_ != null) {
        if (maximumPower_ == null || other.MaximumPower != "") {
          MaximumPower = other.MaximumPower;
        }
      }
      if (other.meteringGridArea_ != null) {
        if (meteringGridArea_ == null || other.MeteringGridArea != "") {
          MeteringGridArea = other.MeteringGridArea;
        }
      }
      if (other.powerPlant_ != null) {
        if (powerPlant_ == null || other.PowerPlant != "") {
          PowerPlant = other.PowerPlant;
        }
      }
      if (other.locationDescription_ != null) {
        if (locationDescription_ == null || other.LocationDescription != "") {
          LocationDescription = other.LocationDescription;
        }
      }
      if (other.parentRelatedMeteringPoint_ != null) {
        if (parentRelatedMeteringPoint_ == null || other.ParentRelatedMeteringPoint != "") {
          ParentRelatedMeteringPoint = other.ParentRelatedMeteringPoint;
        }
      }
      if (other.installationLocationAddress_ != null) {
        if (installationLocationAddress_ == null) {
          InstallationLocationAddress = new global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.Address();
        }
        InstallationLocationAddress.MergeFrom(other.InstallationLocationAddress);
      }
      if (other.settlementMethod_ != null) {
        if (settlementMethod_ == null || other.SettlementMethod != "") {
          SettlementMethod = other.SettlementMethod;
        }
      }
      if (other.unitType_ != null) {
        if (unitType_ == null || other.UnitType != "") {
          UnitType = other.UnitType;
        }
      }
      if (other.disconnectionType_ != null) {
        if (disconnectionType_ == null || other.DisconnectionType != "") {
          DisconnectionType = other.DisconnectionType;
        }
      }
      if (other.OccurenceDate.Length != 0) {
        OccurenceDate = other.OccurenceDate;
      }
      if (other.meterNumber_ != null) {
        if (meterNumber_ == null || other.MeterNumber != "") {
          MeterNumber = other.MeterNumber;
        }
      }
      if (other.TransactionId.Length != 0) {
        TransactionId = other.TransactionId;
      }
      if (other.physicalStatusOfMeteringPoint_ != null) {
        if (physicalStatusOfMeteringPoint_ == null || other.PhysicalStatusOfMeteringPoint != "") {
          PhysicalStatusOfMeteringPoint = other.PhysicalStatusOfMeteringPoint;
        }
      }
      if (other.netSettlementGroup_ != null) {
        if (netSettlementGroup_ == null || other.NetSettlementGroup != "") {
          NetSettlementGroup = other.NetSettlementGroup;
        }
      }
      if (other.connectionType_ != null) {
        if (connectionType_ == null || other.ConnectionType != "") {
          ConnectionType = other.ConnectionType;
        }
      }
      if (other.assetType_ != null) {
        if (assetType_ == null || other.AssetType != "") {
          AssetType = other.AssetType;
        }
      }
      if (other.fromGrid_ != null) {
        if (fromGrid_ == null || other.FromGrid != "") {
          FromGrid = other.FromGrid;
        }
      }
      if (other.toGrid_ != null) {
        if (toGrid_ == null || other.ToGrid != "") {
          ToGrid = other.ToGrid;
        }
      }
      if (other.productType_ != null) {
        if (productType_ == null || other.ProductType != "") {
          ProductType = other.ProductType;
        }
      }
      if (other.measureUnitType_ != null) {
        if (measureUnitType_ == null || other.MeasureUnitType != "") {
          MeasureUnitType = other.MeasureUnitType;
        }
      }
      if (other.physicalConnectionCapacity_ != null) {
        if (physicalConnectionCapacity_ == null || other.PhysicalConnectionCapacity != "") {
          PhysicalConnectionCapacity = other.PhysicalConnectionCapacity;
        }
      }
      if (other.scheduledMeterReadingDate_ != null) {
        if (scheduledMeterReadingDate_ == null || other.ScheduledMeterReadingDate != "") {
          ScheduledMeterReadingDate = other.ScheduledMeterReadingDate;
        }
      }
      if (other.ProcessType.Length != 0) {
        ProcessType = other.ProcessType;
      }
      if (other.productionObligation_ != null) {
        if (productionObligation_ == null || other.ProductionObligation != false) {
          ProductionObligation = other.ProductionObligation;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GsrnNumber = input.ReadString();
            break;
          }
          case 18: {
            string value = _single_typeOfMeteringPoint_codec.Read(input);
            if (typeOfMeteringPoint_ == null || value != "") {
              TypeOfMeteringPoint = value;
            }
            break;
          }
          case 26: {
            string value = _single_subTypeOfMeteringPoint_codec.Read(input);
            if (subTypeOfMeteringPoint_ == null || value != "") {
              SubTypeOfMeteringPoint = value;
            }
            break;
          }
          case 34: {
            string value = _single_meterReadingOccurrence_codec.Read(input);
            if (meterReadingOccurrence_ == null || value != "") {
              MeterReadingOccurrence = value;
            }
            break;
          }
          case 42: {
            string value = _single_maximumCurrent_codec.Read(input);
            if (maximumCurrent_ == null || value != "") {
              MaximumCurrent = value;
            }
            break;
          }
          case 50: {
            string value = _single_maximumPower_codec.Read(input);
            if (maximumPower_ == null || value != "") {
              MaximumPower = value;
            }
            break;
          }
          case 58: {
            string value = _single_meteringGridArea_codec.Read(input);
            if (meteringGridArea_ == null || value != "") {
              MeteringGridArea = value;
            }
            break;
          }
          case 66: {
            string value = _single_powerPlant_codec.Read(input);
            if (powerPlant_ == null || value != "") {
              PowerPlant = value;
            }
            break;
          }
          case 74: {
            string value = _single_locationDescription_codec.Read(input);
            if (locationDescription_ == null || value != "") {
              LocationDescription = value;
            }
            break;
          }
          case 82: {
            string value = _single_parentRelatedMeteringPoint_codec.Read(input);
            if (parentRelatedMeteringPoint_ == null || value != "") {
              ParentRelatedMeteringPoint = value;
            }
            break;
          }
          case 90: {
            if (installationLocationAddress_ == null) {
              InstallationLocationAddress = new global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.Address();
            }
            input.ReadMessage(InstallationLocationAddress);
            break;
          }
          case 98: {
            string value = _single_settlementMethod_codec.Read(input);
            if (settlementMethod_ == null || value != "") {
              SettlementMethod = value;
            }
            break;
          }
          case 106: {
            string value = _single_unitType_codec.Read(input);
            if (unitType_ == null || value != "") {
              UnitType = value;
            }
            break;
          }
          case 114: {
            string value = _single_disconnectionType_codec.Read(input);
            if (disconnectionType_ == null || value != "") {
              DisconnectionType = value;
            }
            break;
          }
          case 122: {
            OccurenceDate = input.ReadString();
            break;
          }
          case 130: {
            string value = _single_meterNumber_codec.Read(input);
            if (meterNumber_ == null || value != "") {
              MeterNumber = value;
            }
            break;
          }
          case 138: {
            TransactionId = input.ReadString();
            break;
          }
          case 146: {
            string value = _single_physicalStatusOfMeteringPoint_codec.Read(input);
            if (physicalStatusOfMeteringPoint_ == null || value != "") {
              PhysicalStatusOfMeteringPoint = value;
            }
            break;
          }
          case 154: {
            string value = _single_netSettlementGroup_codec.Read(input);
            if (netSettlementGroup_ == null || value != "") {
              NetSettlementGroup = value;
            }
            break;
          }
          case 162: {
            string value = _single_connectionType_codec.Read(input);
            if (connectionType_ == null || value != "") {
              ConnectionType = value;
            }
            break;
          }
          case 170: {
            string value = _single_assetType_codec.Read(input);
            if (assetType_ == null || value != "") {
              AssetType = value;
            }
            break;
          }
          case 178: {
            string value = _single_fromGrid_codec.Read(input);
            if (fromGrid_ == null || value != "") {
              FromGrid = value;
            }
            break;
          }
          case 186: {
            string value = _single_toGrid_codec.Read(input);
            if (toGrid_ == null || value != "") {
              ToGrid = value;
            }
            break;
          }
          case 194: {
            string value = _single_productType_codec.Read(input);
            if (productType_ == null || value != "") {
              ProductType = value;
            }
            break;
          }
          case 202: {
            string value = _single_measureUnitType_codec.Read(input);
            if (measureUnitType_ == null || value != "") {
              MeasureUnitType = value;
            }
            break;
          }
          case 210: {
            string value = _single_physicalConnectionCapacity_codec.Read(input);
            if (physicalConnectionCapacity_ == null || value != "") {
              PhysicalConnectionCapacity = value;
            }
            break;
          }
          case 218: {
            string value = _single_scheduledMeterReadingDate_codec.Read(input);
            if (scheduledMeterReadingDate_ == null || value != "") {
              ScheduledMeterReadingDate = value;
            }
            break;
          }
          case 226: {
            ProcessType = input.ReadString();
            break;
          }
          case 234: {
            bool? value = _single_productionObligation_codec.Read(input);
            if (productionObligation_ == null || value != false) {
              ProductionObligation = value;
            }
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            GsrnNumber = input.ReadString();
            break;
          }
          case 18: {
            string value = _single_typeOfMeteringPoint_codec.Read(ref input);
            if (typeOfMeteringPoint_ == null || value != "") {
              TypeOfMeteringPoint = value;
            }
            break;
          }
          case 26: {
            string value = _single_subTypeOfMeteringPoint_codec.Read(ref input);
            if (subTypeOfMeteringPoint_ == null || value != "") {
              SubTypeOfMeteringPoint = value;
            }
            break;
          }
          case 34: {
            string value = _single_meterReadingOccurrence_codec.Read(ref input);
            if (meterReadingOccurrence_ == null || value != "") {
              MeterReadingOccurrence = value;
            }
            break;
          }
          case 42: {
            string value = _single_maximumCurrent_codec.Read(ref input);
            if (maximumCurrent_ == null || value != "") {
              MaximumCurrent = value;
            }
            break;
          }
          case 50: {
            string value = _single_maximumPower_codec.Read(ref input);
            if (maximumPower_ == null || value != "") {
              MaximumPower = value;
            }
            break;
          }
          case 58: {
            string value = _single_meteringGridArea_codec.Read(ref input);
            if (meteringGridArea_ == null || value != "") {
              MeteringGridArea = value;
            }
            break;
          }
          case 66: {
            string value = _single_powerPlant_codec.Read(ref input);
            if (powerPlant_ == null || value != "") {
              PowerPlant = value;
            }
            break;
          }
          case 74: {
            string value = _single_locationDescription_codec.Read(ref input);
            if (locationDescription_ == null || value != "") {
              LocationDescription = value;
            }
            break;
          }
          case 82: {
            string value = _single_parentRelatedMeteringPoint_codec.Read(ref input);
            if (parentRelatedMeteringPoint_ == null || value != "") {
              ParentRelatedMeteringPoint = value;
            }
            break;
          }
          case 90: {
            if (installationLocationAddress_ == null) {
              InstallationLocationAddress = new global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.Address();
            }
            input.ReadMessage(InstallationLocationAddress);
            break;
          }
          case 98: {
            string value = _single_settlementMethod_codec.Read(ref input);
            if (settlementMethod_ == null || value != "") {
              SettlementMethod = value;
            }
            break;
          }
          case 106: {
            string value = _single_unitType_codec.Read(ref input);
            if (unitType_ == null || value != "") {
              UnitType = value;
            }
            break;
          }
          case 114: {
            string value = _single_disconnectionType_codec.Read(ref input);
            if (disconnectionType_ == null || value != "") {
              DisconnectionType = value;
            }
            break;
          }
          case 122: {
            OccurenceDate = input.ReadString();
            break;
          }
          case 130: {
            string value = _single_meterNumber_codec.Read(ref input);
            if (meterNumber_ == null || value != "") {
              MeterNumber = value;
            }
            break;
          }
          case 138: {
            TransactionId = input.ReadString();
            break;
          }
          case 146: {
            string value = _single_physicalStatusOfMeteringPoint_codec.Read(ref input);
            if (physicalStatusOfMeteringPoint_ == null || value != "") {
              PhysicalStatusOfMeteringPoint = value;
            }
            break;
          }
          case 154: {
            string value = _single_netSettlementGroup_codec.Read(ref input);
            if (netSettlementGroup_ == null || value != "") {
              NetSettlementGroup = value;
            }
            break;
          }
          case 162: {
            string value = _single_connectionType_codec.Read(ref input);
            if (connectionType_ == null || value != "") {
              ConnectionType = value;
            }
            break;
          }
          case 170: {
            string value = _single_assetType_codec.Read(ref input);
            if (assetType_ == null || value != "") {
              AssetType = value;
            }
            break;
          }
          case 178: {
            string value = _single_fromGrid_codec.Read(ref input);
            if (fromGrid_ == null || value != "") {
              FromGrid = value;
            }
            break;
          }
          case 186: {
            string value = _single_toGrid_codec.Read(ref input);
            if (toGrid_ == null || value != "") {
              ToGrid = value;
            }
            break;
          }
          case 194: {
            string value = _single_productType_codec.Read(ref input);
            if (productType_ == null || value != "") {
              ProductType = value;
            }
            break;
          }
          case 202: {
            string value = _single_measureUnitType_codec.Read(ref input);
            if (measureUnitType_ == null || value != "") {
              MeasureUnitType = value;
            }
            break;
          }
          case 210: {
            string value = _single_physicalConnectionCapacity_codec.Read(ref input);
            if (physicalConnectionCapacity_ == null || value != "") {
              PhysicalConnectionCapacity = value;
            }
            break;
          }
          case 218: {
            string value = _single_scheduledMeterReadingDate_codec.Read(ref input);
            if (scheduledMeterReadingDate_ == null || value != "") {
              ScheduledMeterReadingDate = value;
            }
            break;
          }
          case 226: {
            ProcessType = input.ReadString();
            break;
          }
          case 234: {
            bool? value = _single_productionObligation_codec.Read(ref input);
            if (productionObligation_ == null || value != false) {
              ProductionObligation = value;
            }
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CreateDefaultChargeLinks : pb::IMessage<CreateDefaultChargeLinks>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CreateDefaultChargeLinks> _parser = new pb::MessageParser<CreateDefaultChargeLinks>(() => new CreateDefaultChargeLinks());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CreateDefaultChargeLinks> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.ContractReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreateDefaultChargeLinks() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreateDefaultChargeLinks(CreateDefaultChargeLinks other) : this() {
      gsrnNumber_ = other.gsrnNumber_;
      correlationId_ = other.correlationId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreateDefaultChargeLinks Clone() {
      return new CreateDefaultChargeLinks(this);
    }

    /// <summary>Field number for the "gsrnNumber" field.</summary>
    public const int GsrnNumberFieldNumber = 1;
    private string gsrnNumber_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string GsrnNumber {
      get { return gsrnNumber_; }
      set {
        gsrnNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "correlationId" field.</summary>
    public const int CorrelationIdFieldNumber = 2;
    private string correlationId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CorrelationId {
      get { return correlationId_; }
      set {
        correlationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CreateDefaultChargeLinks);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CreateDefaultChargeLinks other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GsrnNumber != other.GsrnNumber) return false;
      if (CorrelationId != other.CorrelationId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (GsrnNumber.Length != 0) hash ^= GsrnNumber.GetHashCode();
      if (CorrelationId.Length != 0) hash ^= CorrelationId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (GsrnNumber.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GsrnNumber);
      }
      if (CorrelationId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CorrelationId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (GsrnNumber.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GsrnNumber);
      }
      if (CorrelationId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CorrelationId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (GsrnNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GsrnNumber);
      }
      if (CorrelationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CorrelationId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CreateDefaultChargeLinks other) {
      if (other == null) {
        return;
      }
      if (other.GsrnNumber.Length != 0) {
        GsrnNumber = other.GsrnNumber;
      }
      if (other.CorrelationId.Length != 0) {
        CorrelationId = other.CorrelationId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GsrnNumber = input.ReadString();
            break;
          }
          case 18: {
            CorrelationId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            GsrnNumber = input.ReadString();
            break;
          }
          case 18: {
            CorrelationId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CreateDefaultChargeLinksMessages : pb::IMessage<CreateDefaultChargeLinksMessages>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CreateDefaultChargeLinksMessages> _parser = new pb::MessageParser<CreateDefaultChargeLinksMessages>(() => new CreateDefaultChargeLinksMessages());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CreateDefaultChargeLinksMessages> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.ContractReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreateDefaultChargeLinksMessages() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreateDefaultChargeLinksMessages(CreateDefaultChargeLinksMessages other) : this() {
      gsrnNumber_ = other.gsrnNumber_;
      correlationId_ = other.correlationId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreateDefaultChargeLinksMessages Clone() {
      return new CreateDefaultChargeLinksMessages(this);
    }

    /// <summary>Field number for the "gsrnNumber" field.</summary>
    public const int GsrnNumberFieldNumber = 1;
    private string gsrnNumber_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string GsrnNumber {
      get { return gsrnNumber_; }
      set {
        gsrnNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "correlationId" field.</summary>
    public const int CorrelationIdFieldNumber = 2;
    private string correlationId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CorrelationId {
      get { return correlationId_; }
      set {
        correlationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CreateDefaultChargeLinksMessages);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CreateDefaultChargeLinksMessages other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GsrnNumber != other.GsrnNumber) return false;
      if (CorrelationId != other.CorrelationId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (GsrnNumber.Length != 0) hash ^= GsrnNumber.GetHashCode();
      if (CorrelationId.Length != 0) hash ^= CorrelationId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (GsrnNumber.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GsrnNumber);
      }
      if (CorrelationId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CorrelationId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (GsrnNumber.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GsrnNumber);
      }
      if (CorrelationId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CorrelationId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (GsrnNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GsrnNumber);
      }
      if (CorrelationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CorrelationId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CreateDefaultChargeLinksMessages other) {
      if (other == null) {
        return;
      }
      if (other.GsrnNumber.Length != 0) {
        GsrnNumber = other.GsrnNumber;
      }
      if (other.CorrelationId.Length != 0) {
        CorrelationId = other.CorrelationId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GsrnNumber = input.ReadString();
            break;
          }
          case 18: {
            CorrelationId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            GsrnNumber = input.ReadString();
            break;
          }
          case 18: {
            CorrelationId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AddEnergySupplier : pb::IMessage<AddEnergySupplier>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AddEnergySupplier> _parser = new pb::MessageParser<AddEnergySupplier>(() => new AddEnergySupplier());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AddEnergySupplier> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.ContractReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AddEnergySupplier() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AddEnergySupplier(AddEnergySupplier other) : this() {
      id_ = other.id_;
      meteringPointId_ = other.meteringPointId_;
      effectiveDate_ = other.effectiveDate_ != null ? other.effectiveDate_.Clone() : null;
      energySupplierGln_ = other.energySupplierGln_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AddEnergySupplier Clone() {
      return new AddEnergySupplier(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metering_point_id" field.</summary>
    public const int MeteringPointIdFieldNumber = 2;
    private string meteringPointId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MeteringPointId {
      get { return meteringPointId_; }
      set {
        meteringPointId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "effective_date" field.</summary>
    public const int EffectiveDateFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp effectiveDate_;
    /// <summary>
    /// Date which the change of supplier goes into effect.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EffectiveDate {
      get { return effectiveDate_; }
      set {
        effectiveDate_ = value;
      }
    }

    /// <summary>Field number for the "energy_supplier_gln" field.</summary>
    public const int EnergySupplierGlnFieldNumber = 4;
    private string energySupplierGln_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string EnergySupplierGln {
      get { return energySupplierGln_; }
      set {
        energySupplierGln_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AddEnergySupplier);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AddEnergySupplier other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (MeteringPointId != other.MeteringPointId) return false;
      if (!object.Equals(EffectiveDate, other.EffectiveDate)) return false;
      if (EnergySupplierGln != other.EnergySupplierGln) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (MeteringPointId.Length != 0) hash ^= MeteringPointId.GetHashCode();
      if (effectiveDate_ != null) hash ^= EffectiveDate.GetHashCode();
      if (EnergySupplierGln.Length != 0) hash ^= EnergySupplierGln.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (MeteringPointId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MeteringPointId);
      }
      if (effectiveDate_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EffectiveDate);
      }
      if (EnergySupplierGln.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EnergySupplierGln);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (MeteringPointId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MeteringPointId);
      }
      if (effectiveDate_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EffectiveDate);
      }
      if (EnergySupplierGln.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EnergySupplierGln);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (MeteringPointId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MeteringPointId);
      }
      if (effectiveDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EffectiveDate);
      }
      if (EnergySupplierGln.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EnergySupplierGln);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AddEnergySupplier other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.MeteringPointId.Length != 0) {
        MeteringPointId = other.MeteringPointId;
      }
      if (other.effectiveDate_ != null) {
        if (effectiveDate_ == null) {
          EffectiveDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EffectiveDate.MergeFrom(other.EffectiveDate);
      }
      if (other.EnergySupplierGln.Length != 0) {
        EnergySupplierGln = other.EnergySupplierGln;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            MeteringPointId = input.ReadString();
            break;
          }
          case 26: {
            if (effectiveDate_ == null) {
              EffectiveDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EffectiveDate);
            break;
          }
          case 34: {
            EnergySupplierGln = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            MeteringPointId = input.ReadString();
            break;
          }
          case 26: {
            if (effectiveDate_ == null) {
              EffectiveDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EffectiveDate);
            break;
          }
          case 34: {
            EnergySupplierGln = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SendAccountingPointCharacteristicsMessage : pb::IMessage<SendAccountingPointCharacteristicsMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SendAccountingPointCharacteristicsMessage> _parser = new pb::MessageParser<SendAccountingPointCharacteristicsMessage>(() => new SendAccountingPointCharacteristicsMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SendAccountingPointCharacteristicsMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.ContractReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SendAccountingPointCharacteristicsMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SendAccountingPointCharacteristicsMessage(SendAccountingPointCharacteristicsMessage other) : this() {
      id_ = other.id_;
      meteringPointId_ = other.meteringPointId_;
      transationId_ = other.transationId_;
      reason_ = other.reason_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SendAccountingPointCharacteristicsMessage Clone() {
      return new SendAccountingPointCharacteristicsMessage(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metering_point_id" field.</summary>
    public const int MeteringPointIdFieldNumber = 2;
    private string meteringPointId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MeteringPointId {
      get { return meteringPointId_; }
      set {
        meteringPointId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "transation_id" field.</summary>
    public const int TransationIdFieldNumber = 3;
    private string transationId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TransationId {
      get { return transationId_; }
      set {
        transationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 4;
    private string reason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SendAccountingPointCharacteristicsMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SendAccountingPointCharacteristicsMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (MeteringPointId != other.MeteringPointId) return false;
      if (TransationId != other.TransationId) return false;
      if (Reason != other.Reason) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (MeteringPointId.Length != 0) hash ^= MeteringPointId.GetHashCode();
      if (TransationId.Length != 0) hash ^= TransationId.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (MeteringPointId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MeteringPointId);
      }
      if (TransationId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TransationId);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Reason);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (MeteringPointId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MeteringPointId);
      }
      if (TransationId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TransationId);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Reason);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (MeteringPointId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MeteringPointId);
      }
      if (TransationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TransationId);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SendAccountingPointCharacteristicsMessage other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.MeteringPointId.Length != 0) {
        MeteringPointId = other.MeteringPointId;
      }
      if (other.TransationId.Length != 0) {
        TransationId = other.TransationId;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            MeteringPointId = input.ReadString();
            break;
          }
          case 26: {
            TransationId = input.ReadString();
            break;
          }
          case 34: {
            Reason = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            MeteringPointId = input.ReadString();
            break;
          }
          case 26: {
            TransationId = input.ReadString();
            break;
          }
          case 34: {
            Reason = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MeteringPointEnvelope : pb::IMessage<MeteringPointEnvelope>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MeteringPointEnvelope> _parser = new pb::MessageParser<MeteringPointEnvelope>(() => new MeteringPointEnvelope());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MeteringPointEnvelope> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.ContractReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MeteringPointEnvelope() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MeteringPointEnvelope(MeteringPointEnvelope other) : this() {
      switch (other.MeteringPointMessagesCase) {
        case MeteringPointMessagesOneofCase.MasterDataDocument:
          MasterDataDocument = other.MasterDataDocument.Clone();
          break;
        case MeteringPointMessagesOneofCase.CreateDefaultChargeLinks:
          CreateDefaultChargeLinks = other.CreateDefaultChargeLinks.Clone();
          break;
        case MeteringPointMessagesOneofCase.SendAccountingPointCharacteristicsMessage:
          SendAccountingPointCharacteristicsMessage = other.SendAccountingPointCharacteristicsMessage.Clone();
          break;
        case MeteringPointMessagesOneofCase.AddEnergySupplier:
          AddEnergySupplier = other.AddEnergySupplier.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MeteringPointEnvelope Clone() {
      return new MeteringPointEnvelope(this);
    }

    /// <summary>Field number for the "masterDataDocument" field.</summary>
    public const int MasterDataDocumentFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.MasterDataDocument MasterDataDocument {
      get { return meteringPointMessagesCase_ == MeteringPointMessagesOneofCase.MasterDataDocument ? (global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.MasterDataDocument) meteringPointMessages_ : null; }
      set {
        meteringPointMessages_ = value;
        meteringPointMessagesCase_ = value == null ? MeteringPointMessagesOneofCase.None : MeteringPointMessagesOneofCase.MasterDataDocument;
      }
    }

    /// <summary>Field number for the "createDefaultChargeLinks" field.</summary>
    public const int CreateDefaultChargeLinksFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.CreateDefaultChargeLinks CreateDefaultChargeLinks {
      get { return meteringPointMessagesCase_ == MeteringPointMessagesOneofCase.CreateDefaultChargeLinks ? (global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.CreateDefaultChargeLinks) meteringPointMessages_ : null; }
      set {
        meteringPointMessages_ = value;
        meteringPointMessagesCase_ = value == null ? MeteringPointMessagesOneofCase.None : MeteringPointMessagesOneofCase.CreateDefaultChargeLinks;
      }
    }

    /// <summary>Field number for the "sendAccountingPointCharacteristicsMessage" field.</summary>
    public const int SendAccountingPointCharacteristicsMessageFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.SendAccountingPointCharacteristicsMessage SendAccountingPointCharacteristicsMessage {
      get { return meteringPointMessagesCase_ == MeteringPointMessagesOneofCase.SendAccountingPointCharacteristicsMessage ? (global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.SendAccountingPointCharacteristicsMessage) meteringPointMessages_ : null; }
      set {
        meteringPointMessages_ = value;
        meteringPointMessagesCase_ = value == null ? MeteringPointMessagesOneofCase.None : MeteringPointMessagesOneofCase.SendAccountingPointCharacteristicsMessage;
      }
    }

    /// <summary>Field number for the "addEnergySupplier" field.</summary>
    public const int AddEnergySupplierFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.AddEnergySupplier AddEnergySupplier {
      get { return meteringPointMessagesCase_ == MeteringPointMessagesOneofCase.AddEnergySupplier ? (global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.AddEnergySupplier) meteringPointMessages_ : null; }
      set {
        meteringPointMessages_ = value;
        meteringPointMessagesCase_ = value == null ? MeteringPointMessagesOneofCase.None : MeteringPointMessagesOneofCase.AddEnergySupplier;
      }
    }

    private object meteringPointMessages_;
    /// <summary>Enum of possible cases for the "MeteringPointMessages" oneof.</summary>
    public enum MeteringPointMessagesOneofCase {
      None = 0,
      MasterDataDocument = 1,
      CreateDefaultChargeLinks = 2,
      SendAccountingPointCharacteristicsMessage = 5,
      AddEnergySupplier = 6,
    }
    private MeteringPointMessagesOneofCase meteringPointMessagesCase_ = MeteringPointMessagesOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MeteringPointMessagesOneofCase MeteringPointMessagesCase {
      get { return meteringPointMessagesCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMeteringPointMessages() {
      meteringPointMessagesCase_ = MeteringPointMessagesOneofCase.None;
      meteringPointMessages_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MeteringPointEnvelope);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MeteringPointEnvelope other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MasterDataDocument, other.MasterDataDocument)) return false;
      if (!object.Equals(CreateDefaultChargeLinks, other.CreateDefaultChargeLinks)) return false;
      if (!object.Equals(SendAccountingPointCharacteristicsMessage, other.SendAccountingPointCharacteristicsMessage)) return false;
      if (!object.Equals(AddEnergySupplier, other.AddEnergySupplier)) return false;
      if (MeteringPointMessagesCase != other.MeteringPointMessagesCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (meteringPointMessagesCase_ == MeteringPointMessagesOneofCase.MasterDataDocument) hash ^= MasterDataDocument.GetHashCode();
      if (meteringPointMessagesCase_ == MeteringPointMessagesOneofCase.CreateDefaultChargeLinks) hash ^= CreateDefaultChargeLinks.GetHashCode();
      if (meteringPointMessagesCase_ == MeteringPointMessagesOneofCase.SendAccountingPointCharacteristicsMessage) hash ^= SendAccountingPointCharacteristicsMessage.GetHashCode();
      if (meteringPointMessagesCase_ == MeteringPointMessagesOneofCase.AddEnergySupplier) hash ^= AddEnergySupplier.GetHashCode();
      hash ^= (int) meteringPointMessagesCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (meteringPointMessagesCase_ == MeteringPointMessagesOneofCase.MasterDataDocument) {
        output.WriteRawTag(10);
        output.WriteMessage(MasterDataDocument);
      }
      if (meteringPointMessagesCase_ == MeteringPointMessagesOneofCase.CreateDefaultChargeLinks) {
        output.WriteRawTag(18);
        output.WriteMessage(CreateDefaultChargeLinks);
      }
      if (meteringPointMessagesCase_ == MeteringPointMessagesOneofCase.SendAccountingPointCharacteristicsMessage) {
        output.WriteRawTag(42);
        output.WriteMessage(SendAccountingPointCharacteristicsMessage);
      }
      if (meteringPointMessagesCase_ == MeteringPointMessagesOneofCase.AddEnergySupplier) {
        output.WriteRawTag(50);
        output.WriteMessage(AddEnergySupplier);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (meteringPointMessagesCase_ == MeteringPointMessagesOneofCase.MasterDataDocument) {
        output.WriteRawTag(10);
        output.WriteMessage(MasterDataDocument);
      }
      if (meteringPointMessagesCase_ == MeteringPointMessagesOneofCase.CreateDefaultChargeLinks) {
        output.WriteRawTag(18);
        output.WriteMessage(CreateDefaultChargeLinks);
      }
      if (meteringPointMessagesCase_ == MeteringPointMessagesOneofCase.SendAccountingPointCharacteristicsMessage) {
        output.WriteRawTag(42);
        output.WriteMessage(SendAccountingPointCharacteristicsMessage);
      }
      if (meteringPointMessagesCase_ == MeteringPointMessagesOneofCase.AddEnergySupplier) {
        output.WriteRawTag(50);
        output.WriteMessage(AddEnergySupplier);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (meteringPointMessagesCase_ == MeteringPointMessagesOneofCase.MasterDataDocument) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MasterDataDocument);
      }
      if (meteringPointMessagesCase_ == MeteringPointMessagesOneofCase.CreateDefaultChargeLinks) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateDefaultChargeLinks);
      }
      if (meteringPointMessagesCase_ == MeteringPointMessagesOneofCase.SendAccountingPointCharacteristicsMessage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SendAccountingPointCharacteristicsMessage);
      }
      if (meteringPointMessagesCase_ == MeteringPointMessagesOneofCase.AddEnergySupplier) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AddEnergySupplier);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MeteringPointEnvelope other) {
      if (other == null) {
        return;
      }
      switch (other.MeteringPointMessagesCase) {
        case MeteringPointMessagesOneofCase.MasterDataDocument:
          if (MasterDataDocument == null) {
            MasterDataDocument = new global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.MasterDataDocument();
          }
          MasterDataDocument.MergeFrom(other.MasterDataDocument);
          break;
        case MeteringPointMessagesOneofCase.CreateDefaultChargeLinks:
          if (CreateDefaultChargeLinks == null) {
            CreateDefaultChargeLinks = new global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.CreateDefaultChargeLinks();
          }
          CreateDefaultChargeLinks.MergeFrom(other.CreateDefaultChargeLinks);
          break;
        case MeteringPointMessagesOneofCase.SendAccountingPointCharacteristicsMessage:
          if (SendAccountingPointCharacteristicsMessage == null) {
            SendAccountingPointCharacteristicsMessage = new global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.SendAccountingPointCharacteristicsMessage();
          }
          SendAccountingPointCharacteristicsMessage.MergeFrom(other.SendAccountingPointCharacteristicsMessage);
          break;
        case MeteringPointMessagesOneofCase.AddEnergySupplier:
          if (AddEnergySupplier == null) {
            AddEnergySupplier = new global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.AddEnergySupplier();
          }
          AddEnergySupplier.MergeFrom(other.AddEnergySupplier);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.MasterDataDocument subBuilder = new global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.MasterDataDocument();
            if (meteringPointMessagesCase_ == MeteringPointMessagesOneofCase.MasterDataDocument) {
              subBuilder.MergeFrom(MasterDataDocument);
            }
            input.ReadMessage(subBuilder);
            MasterDataDocument = subBuilder;
            break;
          }
          case 18: {
            global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.CreateDefaultChargeLinks subBuilder = new global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.CreateDefaultChargeLinks();
            if (meteringPointMessagesCase_ == MeteringPointMessagesOneofCase.CreateDefaultChargeLinks) {
              subBuilder.MergeFrom(CreateDefaultChargeLinks);
            }
            input.ReadMessage(subBuilder);
            CreateDefaultChargeLinks = subBuilder;
            break;
          }
          case 42: {
            global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.SendAccountingPointCharacteristicsMessage subBuilder = new global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.SendAccountingPointCharacteristicsMessage();
            if (meteringPointMessagesCase_ == MeteringPointMessagesOneofCase.SendAccountingPointCharacteristicsMessage) {
              subBuilder.MergeFrom(SendAccountingPointCharacteristicsMessage);
            }
            input.ReadMessage(subBuilder);
            SendAccountingPointCharacteristicsMessage = subBuilder;
            break;
          }
          case 50: {
            global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.AddEnergySupplier subBuilder = new global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.AddEnergySupplier();
            if (meteringPointMessagesCase_ == MeteringPointMessagesOneofCase.AddEnergySupplier) {
              subBuilder.MergeFrom(AddEnergySupplier);
            }
            input.ReadMessage(subBuilder);
            AddEnergySupplier = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.MasterDataDocument subBuilder = new global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.MasterDataDocument();
            if (meteringPointMessagesCase_ == MeteringPointMessagesOneofCase.MasterDataDocument) {
              subBuilder.MergeFrom(MasterDataDocument);
            }
            input.ReadMessage(subBuilder);
            MasterDataDocument = subBuilder;
            break;
          }
          case 18: {
            global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.CreateDefaultChargeLinks subBuilder = new global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.CreateDefaultChargeLinks();
            if (meteringPointMessagesCase_ == MeteringPointMessagesOneofCase.CreateDefaultChargeLinks) {
              subBuilder.MergeFrom(CreateDefaultChargeLinks);
            }
            input.ReadMessage(subBuilder);
            CreateDefaultChargeLinks = subBuilder;
            break;
          }
          case 42: {
            global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.SendAccountingPointCharacteristicsMessage subBuilder = new global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.SendAccountingPointCharacteristicsMessage();
            if (meteringPointMessagesCase_ == MeteringPointMessagesOneofCase.SendAccountingPointCharacteristicsMessage) {
              subBuilder.MergeFrom(SendAccountingPointCharacteristicsMessage);
            }
            input.ReadMessage(subBuilder);
            SendAccountingPointCharacteristicsMessage = subBuilder;
            break;
          }
          case 50: {
            global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.AddEnergySupplier subBuilder = new global::Energinet.DataHub.MeteringPoints.RequestResponse.Contract.AddEnergySupplier();
            if (meteringPointMessagesCase_ == MeteringPointMessagesOneofCase.AddEnergySupplier) {
              subBuilder.MergeFrom(AddEnergySupplier);
            }
            input.ReadMessage(subBuilder);
            AddEnergySupplier = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
