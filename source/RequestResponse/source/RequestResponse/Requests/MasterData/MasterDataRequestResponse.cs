// Copyright 2020 Energinet DataHub A/S
//
// Licensed under the Apache License, Version 2.0 (the "License2");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Requests/MasterData/MasterDataRequestResponse.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Energinet.DataHub.MeteringPoints.RequestResponse.Response {

  /// <summary>Holder for reflection information generated from Requests/MasterData/MasterDataRequestResponse.proto</summary>
  public static partial class MasterDataRequestResponseReflection {

    #region Descriptor
    /// <summary>File descriptor for Requests/MasterData/MasterDataRequestResponse.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MasterDataRequestResponseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjNSZXF1ZXN0cy9NYXN0ZXJEYXRhL01hc3RlckRhdGFSZXF1ZXN0UmVzcG9u",
            "c2UucHJvdG8aH2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8aHmdv",
            "b2dsZS9wcm90b2J1Zi93cmFwcGVycy5wcm90byL1BAoHQWRkcmVzcxIxCgtz",
            "dHJlZXRfbmFtZRgBIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1",
            "ZRIxCgtzdHJlZXRfY29kZRgCIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJp",
            "bmdWYWx1ZRIvCglwb3N0X2NvZGUYAyABKAsyHC5nb29nbGUucHJvdG9idWYu",
            "U3RyaW5nVmFsdWUSKgoEY2l0eRgEIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5T",
            "dHJpbmdWYWx1ZRIyCgxjb3VudHJ5X2NvZGUYBSABKAsyHC5nb29nbGUucHJv",
            "dG9idWYuU3RyaW5nVmFsdWUSNwoRY2l0eV9zdWJfZGl2aXNpb24YBiABKAsy",
            "HC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUSKwoFZmxvb3IYByABKAsy",
            "HC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUSKgoEcm9vbRgIIAEoCzIc",
            "Lmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRI1Cg9idWlsZGluZ19udW1i",
            "ZXIYCSABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUSGQoRbXVu",
            "aWNpcGFsaXR5X2NvZGUYCiABKAUSGQoRaXNfYWN0dWFsX2FkZHJlc3MYCyAB",
            "KAgSOAoSZ2VvX2luZm9fcmVmZXJlbmNlGAwgASgLMhwuZ29vZ2xlLnByb3Rv",
            "YnVmLlN0cmluZ1ZhbHVlEjoKFGxvY2F0aW9uX2Rlc2NyaXB0aW9uGA0gASgL",
            "MhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlImgKBlNlcmllcxItCgdw",
            "cm9kdWN0GAEgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEi8K",
            "CXVuaXRfdHlwZRgCIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1",
            "ZSKdAQoPR3JpZEFyZWFEZXRhaWxzEioKBGNvZGUYASABKAsyHC5nb29nbGUu",
            "cHJvdG9idWYuU3RyaW5nVmFsdWUSLQoHdG9fY29kZRgCIAEoCzIcLmdvb2ds",
            "ZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRIvCglmcm9tX2NvZGUYAyABKAsyHC5n",
            "b29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUiygcKGU1hc3RlckRhdGFSZXF1",
            "ZXN0UmVzcG9uc2USEwoLZ3Nybl9udW1iZXIYASABKAkSGQoHYWRkcmVzcxgC",
            "IAEoCzIILkFkZHJlc3MSFwoGc2VyaWVzGAMgASgLMgcuU2VyaWVzEisKEWdy",
            "aWRfYXJlYV9kZXRhaWxzGAQgASgLMhAuR3JpZEFyZWFEZXRhaWxzEjYKEGNv",
            "bm5lY3Rpb25fc3RhdGUYBSABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5n",
            "VmFsdWUSNQoPbWV0ZXJpbmdfbWV0aG9kGAYgASgLMhwuZ29vZ2xlLnByb3Rv",
            "YnVmLlN0cmluZ1ZhbHVlEjkKE3JlYWRpbmdfcGVyaW9kaWNpdHkYByABKAsy",
            "HC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUSKgoEdHlwZRgIIAEoCzIc",
            "Lmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRIXCg9tYXhpbXVtX2N1cnJl",
            "bnQYCSABKAUSFQoNbWF4aW11bV9wb3dlchgKIAEoBRI9Chdwb3dlcl9wbGFu",
            "dF9nc3JuX251bWJlchgLIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdW",
            "YWx1ZRIyCg5lZmZlY3RpdmVfZGF0ZRgMIAEoCzIaLmdvb2dsZS5wcm90b2J1",
            "Zi5UaW1lc3RhbXASMgoMbWV0ZXJfbnVtYmVyGA0gASgLMhwuZ29vZ2xlLnBy",
            "b3RvYnVmLlN0cmluZ1ZhbHVlEhAKCGNhcGFjaXR5GA4gASgBEjAKCmFzc2V0",
            "X3R5cGUYDyABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUSNwoR",
            "c2V0dGxlbWVudF9tZXRob2QYECABKAsyHC5nb29nbGUucHJvdG9idWYuU3Ry",
            "aW5nVmFsdWUSQgocc2NoZWR1bGVkX21ldGVyX3JlYWRpbmdfZGF0ZRgRIAEo",
            "CzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRIdChVwcm9kdWN0aW9u",
            "X29ibGlnYXRpb24YEiABKAgSOgoUbmV0X3NldHRsZW1lbnRfZ3JvdXAYEyAB",
            "KAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUSNwoRZGlzY29ubmV0",
            "aW9uX3R5cGUYFCABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUS",
            "NQoPY29ubmVjdGlvbl90eXBlGBUgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0",
            "cmluZ1ZhbHVlQjyqAjlFbmVyZ2luZXQuRGF0YUh1Yi5NZXRlcmluZ1BvaW50",
            "cy5SZXF1ZXN0UmVzcG9uc2UuUmVzcG9uc2ViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Energinet.DataHub.MeteringPoints.RequestResponse.Response.Address), global::Energinet.DataHub.MeteringPoints.RequestResponse.Response.Address.Parser, new[]{ "StreetName", "StreetCode", "PostCode", "City", "CountryCode", "CitySubDivision", "Floor", "Room", "BuildingNumber", "MunicipalityCode", "IsActualAddress", "GeoInfoReference", "LocationDescription" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Energinet.DataHub.MeteringPoints.RequestResponse.Response.Series), global::Energinet.DataHub.MeteringPoints.RequestResponse.Response.Series.Parser, new[]{ "Product", "UnitType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Energinet.DataHub.MeteringPoints.RequestResponse.Response.GridAreaDetails), global::Energinet.DataHub.MeteringPoints.RequestResponse.Response.GridAreaDetails.Parser, new[]{ "Code", "ToCode", "FromCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Energinet.DataHub.MeteringPoints.RequestResponse.Response.MasterDataRequestResponse), global::Energinet.DataHub.MeteringPoints.RequestResponse.Response.MasterDataRequestResponse.Parser, new[]{ "GsrnNumber", "Address", "Series", "GridAreaDetails", "ConnectionState", "MeteringMethod", "ReadingPeriodicity", "Type", "MaximumCurrent", "MaximumPower", "PowerPlantGsrnNumber", "EffectiveDate", "MeterNumber", "Capacity", "AssetType", "SettlementMethod", "ScheduledMeterReadingDate", "ProductionObligation", "NetSettlementGroup", "DisconnetionType", "ConnectionType" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Address : pb::IMessage<Address>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Address> _parser = new pb::MessageParser<Address>(() => new Address());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Address> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Energinet.DataHub.MeteringPoints.RequestResponse.Response.MasterDataRequestResponseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Address() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Address(Address other) : this() {
      StreetName = other.StreetName;
      StreetCode = other.StreetCode;
      PostCode = other.PostCode;
      City = other.City;
      CountryCode = other.CountryCode;
      CitySubDivision = other.CitySubDivision;
      Floor = other.Floor;
      Room = other.Room;
      BuildingNumber = other.BuildingNumber;
      municipalityCode_ = other.municipalityCode_;
      isActualAddress_ = other.isActualAddress_;
      GeoInfoReference = other.GeoInfoReference;
      LocationDescription = other.LocationDescription;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Address Clone() {
      return new Address(this);
    }

    /// <summary>Field number for the "street_name" field.</summary>
    public const int StreetNameFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _single_streetName_codec = pb::FieldCodec.ForClassWrapper<string>(10);
    private string streetName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string StreetName {
      get { return streetName_; }
      set {
        streetName_ = value;
      }
    }


    /// <summary>Field number for the "street_code" field.</summary>
    public const int StreetCodeFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _single_streetCode_codec = pb::FieldCodec.ForClassWrapper<string>(18);
    private string streetCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string StreetCode {
      get { return streetCode_; }
      set {
        streetCode_ = value;
      }
    }


    /// <summary>Field number for the "post_code" field.</summary>
    public const int PostCodeFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _single_postCode_codec = pb::FieldCodec.ForClassWrapper<string>(26);
    private string postCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PostCode {
      get { return postCode_; }
      set {
        postCode_ = value;
      }
    }


    /// <summary>Field number for the "city" field.</summary>
    public const int CityFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _single_city_codec = pb::FieldCodec.ForClassWrapper<string>(34);
    private string city_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string City {
      get { return city_; }
      set {
        city_ = value;
      }
    }


    /// <summary>Field number for the "country_code" field.</summary>
    public const int CountryCodeFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _single_countryCode_codec = pb::FieldCodec.ForClassWrapper<string>(42);
    private string countryCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryCode {
      get { return countryCode_; }
      set {
        countryCode_ = value;
      }
    }


    /// <summary>Field number for the "city_sub_division" field.</summary>
    public const int CitySubDivisionFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _single_citySubDivision_codec = pb::FieldCodec.ForClassWrapper<string>(50);
    private string citySubDivision_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CitySubDivision {
      get { return citySubDivision_; }
      set {
        citySubDivision_ = value;
      }
    }


    /// <summary>Field number for the "floor" field.</summary>
    public const int FloorFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _single_floor_codec = pb::FieldCodec.ForClassWrapper<string>(58);
    private string floor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Floor {
      get { return floor_; }
      set {
        floor_ = value;
      }
    }


    /// <summary>Field number for the "room" field.</summary>
    public const int RoomFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _single_room_codec = pb::FieldCodec.ForClassWrapper<string>(66);
    private string room_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Room {
      get { return room_; }
      set {
        room_ = value;
      }
    }


    /// <summary>Field number for the "building_number" field.</summary>
    public const int BuildingNumberFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _single_buildingNumber_codec = pb::FieldCodec.ForClassWrapper<string>(74);
    private string buildingNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BuildingNumber {
      get { return buildingNumber_; }
      set {
        buildingNumber_ = value;
      }
    }


    /// <summary>Field number for the "municipality_code" field.</summary>
    public const int MunicipalityCodeFieldNumber = 10;
    private int municipalityCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MunicipalityCode {
      get { return municipalityCode_; }
      set {
        municipalityCode_ = value;
      }
    }

    /// <summary>Field number for the "is_actual_address" field.</summary>
    public const int IsActualAddressFieldNumber = 11;
    private bool isActualAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsActualAddress {
      get { return isActualAddress_; }
      set {
        isActualAddress_ = value;
      }
    }

    /// <summary>Field number for the "geo_info_reference" field.</summary>
    public const int GeoInfoReferenceFieldNumber = 12;
    private static readonly pb::FieldCodec<string> _single_geoInfoReference_codec = pb::FieldCodec.ForClassWrapper<string>(98);
    private string geoInfoReference_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string GeoInfoReference {
      get { return geoInfoReference_; }
      set {
        geoInfoReference_ = value;
      }
    }


    /// <summary>Field number for the "location_description" field.</summary>
    public const int LocationDescriptionFieldNumber = 13;
    private static readonly pb::FieldCodec<string> _single_locationDescription_codec = pb::FieldCodec.ForClassWrapper<string>(106);
    private string locationDescription_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LocationDescription {
      get { return locationDescription_; }
      set {
        locationDescription_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Address);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Address other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StreetName != other.StreetName) return false;
      if (StreetCode != other.StreetCode) return false;
      if (PostCode != other.PostCode) return false;
      if (City != other.City) return false;
      if (CountryCode != other.CountryCode) return false;
      if (CitySubDivision != other.CitySubDivision) return false;
      if (Floor != other.Floor) return false;
      if (Room != other.Room) return false;
      if (BuildingNumber != other.BuildingNumber) return false;
      if (MunicipalityCode != other.MunicipalityCode) return false;
      if (IsActualAddress != other.IsActualAddress) return false;
      if (GeoInfoReference != other.GeoInfoReference) return false;
      if (LocationDescription != other.LocationDescription) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (streetName_ != null) hash ^= StreetName.GetHashCode();
      if (streetCode_ != null) hash ^= StreetCode.GetHashCode();
      if (postCode_ != null) hash ^= PostCode.GetHashCode();
      if (city_ != null) hash ^= City.GetHashCode();
      if (countryCode_ != null) hash ^= CountryCode.GetHashCode();
      if (citySubDivision_ != null) hash ^= CitySubDivision.GetHashCode();
      if (floor_ != null) hash ^= Floor.GetHashCode();
      if (room_ != null) hash ^= Room.GetHashCode();
      if (buildingNumber_ != null) hash ^= BuildingNumber.GetHashCode();
      if (MunicipalityCode != 0) hash ^= MunicipalityCode.GetHashCode();
      if (IsActualAddress != false) hash ^= IsActualAddress.GetHashCode();
      if (geoInfoReference_ != null) hash ^= GeoInfoReference.GetHashCode();
      if (locationDescription_ != null) hash ^= LocationDescription.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (streetName_ != null) {
        _single_streetName_codec.WriteTagAndValue(output, StreetName);
      }
      if (streetCode_ != null) {
        _single_streetCode_codec.WriteTagAndValue(output, StreetCode);
      }
      if (postCode_ != null) {
        _single_postCode_codec.WriteTagAndValue(output, PostCode);
      }
      if (city_ != null) {
        _single_city_codec.WriteTagAndValue(output, City);
      }
      if (countryCode_ != null) {
        _single_countryCode_codec.WriteTagAndValue(output, CountryCode);
      }
      if (citySubDivision_ != null) {
        _single_citySubDivision_codec.WriteTagAndValue(output, CitySubDivision);
      }
      if (floor_ != null) {
        _single_floor_codec.WriteTagAndValue(output, Floor);
      }
      if (room_ != null) {
        _single_room_codec.WriteTagAndValue(output, Room);
      }
      if (buildingNumber_ != null) {
        _single_buildingNumber_codec.WriteTagAndValue(output, BuildingNumber);
      }
      if (MunicipalityCode != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MunicipalityCode);
      }
      if (IsActualAddress != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsActualAddress);
      }
      if (geoInfoReference_ != null) {
        _single_geoInfoReference_codec.WriteTagAndValue(output, GeoInfoReference);
      }
      if (locationDescription_ != null) {
        _single_locationDescription_codec.WriteTagAndValue(output, LocationDescription);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (streetName_ != null) {
        _single_streetName_codec.WriteTagAndValue(ref output, StreetName);
      }
      if (streetCode_ != null) {
        _single_streetCode_codec.WriteTagAndValue(ref output, StreetCode);
      }
      if (postCode_ != null) {
        _single_postCode_codec.WriteTagAndValue(ref output, PostCode);
      }
      if (city_ != null) {
        _single_city_codec.WriteTagAndValue(ref output, City);
      }
      if (countryCode_ != null) {
        _single_countryCode_codec.WriteTagAndValue(ref output, CountryCode);
      }
      if (citySubDivision_ != null) {
        _single_citySubDivision_codec.WriteTagAndValue(ref output, CitySubDivision);
      }
      if (floor_ != null) {
        _single_floor_codec.WriteTagAndValue(ref output, Floor);
      }
      if (room_ != null) {
        _single_room_codec.WriteTagAndValue(ref output, Room);
      }
      if (buildingNumber_ != null) {
        _single_buildingNumber_codec.WriteTagAndValue(ref output, BuildingNumber);
      }
      if (MunicipalityCode != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MunicipalityCode);
      }
      if (IsActualAddress != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsActualAddress);
      }
      if (geoInfoReference_ != null) {
        _single_geoInfoReference_codec.WriteTagAndValue(ref output, GeoInfoReference);
      }
      if (locationDescription_ != null) {
        _single_locationDescription_codec.WriteTagAndValue(ref output, LocationDescription);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (streetName_ != null) {
        size += _single_streetName_codec.CalculateSizeWithTag(StreetName);
      }
      if (streetCode_ != null) {
        size += _single_streetCode_codec.CalculateSizeWithTag(StreetCode);
      }
      if (postCode_ != null) {
        size += _single_postCode_codec.CalculateSizeWithTag(PostCode);
      }
      if (city_ != null) {
        size += _single_city_codec.CalculateSizeWithTag(City);
      }
      if (countryCode_ != null) {
        size += _single_countryCode_codec.CalculateSizeWithTag(CountryCode);
      }
      if (citySubDivision_ != null) {
        size += _single_citySubDivision_codec.CalculateSizeWithTag(CitySubDivision);
      }
      if (floor_ != null) {
        size += _single_floor_codec.CalculateSizeWithTag(Floor);
      }
      if (room_ != null) {
        size += _single_room_codec.CalculateSizeWithTag(Room);
      }
      if (buildingNumber_ != null) {
        size += _single_buildingNumber_codec.CalculateSizeWithTag(BuildingNumber);
      }
      if (MunicipalityCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MunicipalityCode);
      }
      if (IsActualAddress != false) {
        size += 1 + 1;
      }
      if (geoInfoReference_ != null) {
        size += _single_geoInfoReference_codec.CalculateSizeWithTag(GeoInfoReference);
      }
      if (locationDescription_ != null) {
        size += _single_locationDescription_codec.CalculateSizeWithTag(LocationDescription);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Address other) {
      if (other == null) {
        return;
      }
      if (other.streetName_ != null) {
        if (streetName_ == null || other.StreetName != "") {
          StreetName = other.StreetName;
        }
      }
      if (other.streetCode_ != null) {
        if (streetCode_ == null || other.StreetCode != "") {
          StreetCode = other.StreetCode;
        }
      }
      if (other.postCode_ != null) {
        if (postCode_ == null || other.PostCode != "") {
          PostCode = other.PostCode;
        }
      }
      if (other.city_ != null) {
        if (city_ == null || other.City != "") {
          City = other.City;
        }
      }
      if (other.countryCode_ != null) {
        if (countryCode_ == null || other.CountryCode != "") {
          CountryCode = other.CountryCode;
        }
      }
      if (other.citySubDivision_ != null) {
        if (citySubDivision_ == null || other.CitySubDivision != "") {
          CitySubDivision = other.CitySubDivision;
        }
      }
      if (other.floor_ != null) {
        if (floor_ == null || other.Floor != "") {
          Floor = other.Floor;
        }
      }
      if (other.room_ != null) {
        if (room_ == null || other.Room != "") {
          Room = other.Room;
        }
      }
      if (other.buildingNumber_ != null) {
        if (buildingNumber_ == null || other.BuildingNumber != "") {
          BuildingNumber = other.BuildingNumber;
        }
      }
      if (other.MunicipalityCode != 0) {
        MunicipalityCode = other.MunicipalityCode;
      }
      if (other.IsActualAddress != false) {
        IsActualAddress = other.IsActualAddress;
      }
      if (other.geoInfoReference_ != null) {
        if (geoInfoReference_ == null || other.GeoInfoReference != "") {
          GeoInfoReference = other.GeoInfoReference;
        }
      }
      if (other.locationDescription_ != null) {
        if (locationDescription_ == null || other.LocationDescription != "") {
          LocationDescription = other.LocationDescription;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            string value = _single_streetName_codec.Read(input);
            if (streetName_ == null || value != "") {
              StreetName = value;
            }
            break;
          }
          case 18: {
            string value = _single_streetCode_codec.Read(input);
            if (streetCode_ == null || value != "") {
              StreetCode = value;
            }
            break;
          }
          case 26: {
            string value = _single_postCode_codec.Read(input);
            if (postCode_ == null || value != "") {
              PostCode = value;
            }
            break;
          }
          case 34: {
            string value = _single_city_codec.Read(input);
            if (city_ == null || value != "") {
              City = value;
            }
            break;
          }
          case 42: {
            string value = _single_countryCode_codec.Read(input);
            if (countryCode_ == null || value != "") {
              CountryCode = value;
            }
            break;
          }
          case 50: {
            string value = _single_citySubDivision_codec.Read(input);
            if (citySubDivision_ == null || value != "") {
              CitySubDivision = value;
            }
            break;
          }
          case 58: {
            string value = _single_floor_codec.Read(input);
            if (floor_ == null || value != "") {
              Floor = value;
            }
            break;
          }
          case 66: {
            string value = _single_room_codec.Read(input);
            if (room_ == null || value != "") {
              Room = value;
            }
            break;
          }
          case 74: {
            string value = _single_buildingNumber_codec.Read(input);
            if (buildingNumber_ == null || value != "") {
              BuildingNumber = value;
            }
            break;
          }
          case 80: {
            MunicipalityCode = input.ReadInt32();
            break;
          }
          case 88: {
            IsActualAddress = input.ReadBool();
            break;
          }
          case 98: {
            string value = _single_geoInfoReference_codec.Read(input);
            if (geoInfoReference_ == null || value != "") {
              GeoInfoReference = value;
            }
            break;
          }
          case 106: {
            string value = _single_locationDescription_codec.Read(input);
            if (locationDescription_ == null || value != "") {
              LocationDescription = value;
            }
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            string value = _single_streetName_codec.Read(ref input);
            if (streetName_ == null || value != "") {
              StreetName = value;
            }
            break;
          }
          case 18: {
            string value = _single_streetCode_codec.Read(ref input);
            if (streetCode_ == null || value != "") {
              StreetCode = value;
            }
            break;
          }
          case 26: {
            string value = _single_postCode_codec.Read(ref input);
            if (postCode_ == null || value != "") {
              PostCode = value;
            }
            break;
          }
          case 34: {
            string value = _single_city_codec.Read(ref input);
            if (city_ == null || value != "") {
              City = value;
            }
            break;
          }
          case 42: {
            string value = _single_countryCode_codec.Read(ref input);
            if (countryCode_ == null || value != "") {
              CountryCode = value;
            }
            break;
          }
          case 50: {
            string value = _single_citySubDivision_codec.Read(ref input);
            if (citySubDivision_ == null || value != "") {
              CitySubDivision = value;
            }
            break;
          }
          case 58: {
            string value = _single_floor_codec.Read(ref input);
            if (floor_ == null || value != "") {
              Floor = value;
            }
            break;
          }
          case 66: {
            string value = _single_room_codec.Read(ref input);
            if (room_ == null || value != "") {
              Room = value;
            }
            break;
          }
          case 74: {
            string value = _single_buildingNumber_codec.Read(ref input);
            if (buildingNumber_ == null || value != "") {
              BuildingNumber = value;
            }
            break;
          }
          case 80: {
            MunicipalityCode = input.ReadInt32();
            break;
          }
          case 88: {
            IsActualAddress = input.ReadBool();
            break;
          }
          case 98: {
            string value = _single_geoInfoReference_codec.Read(ref input);
            if (geoInfoReference_ == null || value != "") {
              GeoInfoReference = value;
            }
            break;
          }
          case 106: {
            string value = _single_locationDescription_codec.Read(ref input);
            if (locationDescription_ == null || value != "") {
              LocationDescription = value;
            }
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Series : pb::IMessage<Series>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Series> _parser = new pb::MessageParser<Series>(() => new Series());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Series> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Energinet.DataHub.MeteringPoints.RequestResponse.Response.MasterDataRequestResponseReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Series() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Series(Series other) : this() {
      Product = other.Product;
      UnitType = other.UnitType;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Series Clone() {
      return new Series(this);
    }

    /// <summary>Field number for the "product" field.</summary>
    public const int ProductFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _single_product_codec = pb::FieldCodec.ForClassWrapper<string>(10);
    private string product_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Product {
      get { return product_; }
      set {
        product_ = value;
      }
    }


    /// <summary>Field number for the "unit_type" field.</summary>
    public const int UnitTypeFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _single_unitType_codec = pb::FieldCodec.ForClassWrapper<string>(18);
    private string unitType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UnitType {
      get { return unitType_; }
      set {
        unitType_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Series);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Series other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Product != other.Product) return false;
      if (UnitType != other.UnitType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (product_ != null) hash ^= Product.GetHashCode();
      if (unitType_ != null) hash ^= UnitType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (product_ != null) {
        _single_product_codec.WriteTagAndValue(output, Product);
      }
      if (unitType_ != null) {
        _single_unitType_codec.WriteTagAndValue(output, UnitType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (product_ != null) {
        _single_product_codec.WriteTagAndValue(ref output, Product);
      }
      if (unitType_ != null) {
        _single_unitType_codec.WriteTagAndValue(ref output, UnitType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (product_ != null) {
        size += _single_product_codec.CalculateSizeWithTag(Product);
      }
      if (unitType_ != null) {
        size += _single_unitType_codec.CalculateSizeWithTag(UnitType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Series other) {
      if (other == null) {
        return;
      }
      if (other.product_ != null) {
        if (product_ == null || other.Product != "") {
          Product = other.Product;
        }
      }
      if (other.unitType_ != null) {
        if (unitType_ == null || other.UnitType != "") {
          UnitType = other.UnitType;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            string value = _single_product_codec.Read(input);
            if (product_ == null || value != "") {
              Product = value;
            }
            break;
          }
          case 18: {
            string value = _single_unitType_codec.Read(input);
            if (unitType_ == null || value != "") {
              UnitType = value;
            }
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            string value = _single_product_codec.Read(ref input);
            if (product_ == null || value != "") {
              Product = value;
            }
            break;
          }
          case 18: {
            string value = _single_unitType_codec.Read(ref input);
            if (unitType_ == null || value != "") {
              UnitType = value;
            }
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GridAreaDetails : pb::IMessage<GridAreaDetails>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GridAreaDetails> _parser = new pb::MessageParser<GridAreaDetails>(() => new GridAreaDetails());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GridAreaDetails> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Energinet.DataHub.MeteringPoints.RequestResponse.Response.MasterDataRequestResponseReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GridAreaDetails() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GridAreaDetails(GridAreaDetails other) : this() {
      Code = other.Code;
      ToCode = other.ToCode;
      FromCode = other.FromCode;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GridAreaDetails Clone() {
      return new GridAreaDetails(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _single_code_codec = pb::FieldCodec.ForClassWrapper<string>(10);
    private string code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }


    /// <summary>Field number for the "to_code" field.</summary>
    public const int ToCodeFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _single_toCode_codec = pb::FieldCodec.ForClassWrapper<string>(18);
    private string toCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ToCode {
      get { return toCode_; }
      set {
        toCode_ = value;
      }
    }


    /// <summary>Field number for the "from_code" field.</summary>
    public const int FromCodeFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _single_fromCode_codec = pb::FieldCodec.ForClassWrapper<string>(26);
    private string fromCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FromCode {
      get { return fromCode_; }
      set {
        fromCode_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GridAreaDetails);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GridAreaDetails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (ToCode != other.ToCode) return false;
      if (FromCode != other.FromCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (code_ != null) hash ^= Code.GetHashCode();
      if (toCode_ != null) hash ^= ToCode.GetHashCode();
      if (fromCode_ != null) hash ^= FromCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (code_ != null) {
        _single_code_codec.WriteTagAndValue(output, Code);
      }
      if (toCode_ != null) {
        _single_toCode_codec.WriteTagAndValue(output, ToCode);
      }
      if (fromCode_ != null) {
        _single_fromCode_codec.WriteTagAndValue(output, FromCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (code_ != null) {
        _single_code_codec.WriteTagAndValue(ref output, Code);
      }
      if (toCode_ != null) {
        _single_toCode_codec.WriteTagAndValue(ref output, ToCode);
      }
      if (fromCode_ != null) {
        _single_fromCode_codec.WriteTagAndValue(ref output, FromCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (code_ != null) {
        size += _single_code_codec.CalculateSizeWithTag(Code);
      }
      if (toCode_ != null) {
        size += _single_toCode_codec.CalculateSizeWithTag(ToCode);
      }
      if (fromCode_ != null) {
        size += _single_fromCode_codec.CalculateSizeWithTag(FromCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GridAreaDetails other) {
      if (other == null) {
        return;
      }
      if (other.code_ != null) {
        if (code_ == null || other.Code != "") {
          Code = other.Code;
        }
      }
      if (other.toCode_ != null) {
        if (toCode_ == null || other.ToCode != "") {
          ToCode = other.ToCode;
        }
      }
      if (other.fromCode_ != null) {
        if (fromCode_ == null || other.FromCode != "") {
          FromCode = other.FromCode;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            string value = _single_code_codec.Read(input);
            if (code_ == null || value != "") {
              Code = value;
            }
            break;
          }
          case 18: {
            string value = _single_toCode_codec.Read(input);
            if (toCode_ == null || value != "") {
              ToCode = value;
            }
            break;
          }
          case 26: {
            string value = _single_fromCode_codec.Read(input);
            if (fromCode_ == null || value != "") {
              FromCode = value;
            }
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            string value = _single_code_codec.Read(ref input);
            if (code_ == null || value != "") {
              Code = value;
            }
            break;
          }
          case 18: {
            string value = _single_toCode_codec.Read(ref input);
            if (toCode_ == null || value != "") {
              ToCode = value;
            }
            break;
          }
          case 26: {
            string value = _single_fromCode_codec.Read(ref input);
            if (fromCode_ == null || value != "") {
              FromCode = value;
            }
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MasterDataRequestResponse : pb::IMessage<MasterDataRequestResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MasterDataRequestResponse> _parser = new pb::MessageParser<MasterDataRequestResponse>(() => new MasterDataRequestResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MasterDataRequestResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Energinet.DataHub.MeteringPoints.RequestResponse.Response.MasterDataRequestResponseReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MasterDataRequestResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MasterDataRequestResponse(MasterDataRequestResponse other) : this() {
      gsrnNumber_ = other.gsrnNumber_;
      address_ = other.address_ != null ? other.address_.Clone() : null;
      series_ = other.series_ != null ? other.series_.Clone() : null;
      gridAreaDetails_ = other.gridAreaDetails_ != null ? other.gridAreaDetails_.Clone() : null;
      ConnectionState = other.ConnectionState;
      MeteringMethod = other.MeteringMethod;
      ReadingPeriodicity = other.ReadingPeriodicity;
      Type = other.Type;
      maximumCurrent_ = other.maximumCurrent_;
      maximumPower_ = other.maximumPower_;
      PowerPlantGsrnNumber = other.PowerPlantGsrnNumber;
      effectiveDate_ = other.effectiveDate_ != null ? other.effectiveDate_.Clone() : null;
      MeterNumber = other.MeterNumber;
      capacity_ = other.capacity_;
      AssetType = other.AssetType;
      SettlementMethod = other.SettlementMethod;
      ScheduledMeterReadingDate = other.ScheduledMeterReadingDate;
      productionObligation_ = other.productionObligation_;
      NetSettlementGroup = other.NetSettlementGroup;
      DisconnetionType = other.DisconnetionType;
      ConnectionType = other.ConnectionType;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MasterDataRequestResponse Clone() {
      return new MasterDataRequestResponse(this);
    }

    /// <summary>Field number for the "gsrn_number" field.</summary>
    public const int GsrnNumberFieldNumber = 1;
    private string gsrnNumber_ = "";
    /// <summary>
    /// Business facing metering point identifier
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string GsrnNumber {
      get { return gsrnNumber_; }
      set {
        gsrnNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 2;
    private global::Energinet.DataHub.MeteringPoints.RequestResponse.Response.Address address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Energinet.DataHub.MeteringPoints.RequestResponse.Response.Address Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "series" field.</summary>
    public const int SeriesFieldNumber = 3;
    private global::Energinet.DataHub.MeteringPoints.RequestResponse.Response.Series series_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Energinet.DataHub.MeteringPoints.RequestResponse.Response.Series Series {
      get { return series_; }
      set {
        series_ = value;
      }
    }

    /// <summary>Field number for the "grid_area_details" field.</summary>
    public const int GridAreaDetailsFieldNumber = 4;
    private global::Energinet.DataHub.MeteringPoints.RequestResponse.Response.GridAreaDetails gridAreaDetails_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Energinet.DataHub.MeteringPoints.RequestResponse.Response.GridAreaDetails GridAreaDetails {
      get { return gridAreaDetails_; }
      set {
        gridAreaDetails_ = value;
      }
    }

    /// <summary>Field number for the "connection_state" field.</summary>
    public const int ConnectionStateFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _single_connectionState_codec = pb::FieldCodec.ForClassWrapper<string>(42);
    private string connectionState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ConnectionState {
      get { return connectionState_; }
      set {
        connectionState_ = value;
      }
    }


    /// <summary>Field number for the "metering_method" field.</summary>
    public const int MeteringMethodFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _single_meteringMethod_codec = pb::FieldCodec.ForClassWrapper<string>(50);
    private string meteringMethod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MeteringMethod {
      get { return meteringMethod_; }
      set {
        meteringMethod_ = value;
      }
    }


    /// <summary>Field number for the "reading_periodicity" field.</summary>
    public const int ReadingPeriodicityFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _single_readingPeriodicity_codec = pb::FieldCodec.ForClassWrapper<string>(58);
    private string readingPeriodicity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ReadingPeriodicity {
      get { return readingPeriodicity_; }
      set {
        readingPeriodicity_ = value;
      }
    }


    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _single_type_codec = pb::FieldCodec.ForClassWrapper<string>(66);
    private string type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }


    /// <summary>Field number for the "maximum_current" field.</summary>
    public const int MaximumCurrentFieldNumber = 9;
    private int maximumCurrent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaximumCurrent {
      get { return maximumCurrent_; }
      set {
        maximumCurrent_ = value;
      }
    }

    /// <summary>Field number for the "maximum_power" field.</summary>
    public const int MaximumPowerFieldNumber = 10;
    private int maximumPower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaximumPower {
      get { return maximumPower_; }
      set {
        maximumPower_ = value;
      }
    }

    /// <summary>Field number for the "power_plant_gsrn_number" field.</summary>
    public const int PowerPlantGsrnNumberFieldNumber = 11;
    private static readonly pb::FieldCodec<string> _single_powerPlantGsrnNumber_codec = pb::FieldCodec.ForClassWrapper<string>(90);
    private string powerPlantGsrnNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PowerPlantGsrnNumber {
      get { return powerPlantGsrnNumber_; }
      set {
        powerPlantGsrnNumber_ = value;
      }
    }


    /// <summary>Field number for the "effective_date" field.</summary>
    public const int EffectiveDateFieldNumber = 12;
    private global::Google.Protobuf.WellKnownTypes.Timestamp effectiveDate_;
    /// <summary>
    /// Date which the metering point is connected
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EffectiveDate {
      get { return effectiveDate_; }
      set {
        effectiveDate_ = value;
      }
    }

    /// <summary>Field number for the "meter_number" field.</summary>
    public const int MeterNumberFieldNumber = 13;
    private static readonly pb::FieldCodec<string> _single_meterNumber_codec = pb::FieldCodec.ForClassWrapper<string>(106);
    private string meterNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MeterNumber {
      get { return meterNumber_; }
      set {
        meterNumber_ = value;
      }
    }


    /// <summary>Field number for the "capacity" field.</summary>
    public const int CapacityFieldNumber = 14;
    private double capacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Capacity {
      get { return capacity_; }
      set {
        capacity_ = value;
      }
    }

    /// <summary>Field number for the "asset_type" field.</summary>
    public const int AssetTypeFieldNumber = 15;
    private static readonly pb::FieldCodec<string> _single_assetType_codec = pb::FieldCodec.ForClassWrapper<string>(122);
    private string assetType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AssetType {
      get { return assetType_; }
      set {
        assetType_ = value;
      }
    }


    /// <summary>Field number for the "settlement_method" field.</summary>
    public const int SettlementMethodFieldNumber = 16;
    private static readonly pb::FieldCodec<string> _single_settlementMethod_codec = pb::FieldCodec.ForClassWrapper<string>(130);
    private string settlementMethod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SettlementMethod {
      get { return settlementMethod_; }
      set {
        settlementMethod_ = value;
      }
    }


    /// <summary>Field number for the "scheduled_meter_reading_date" field.</summary>
    public const int ScheduledMeterReadingDateFieldNumber = 17;
    private static readonly pb::FieldCodec<string> _single_scheduledMeterReadingDate_codec = pb::FieldCodec.ForClassWrapper<string>(138);
    private string scheduledMeterReadingDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ScheduledMeterReadingDate {
      get { return scheduledMeterReadingDate_; }
      set {
        scheduledMeterReadingDate_ = value;
      }
    }


    /// <summary>Field number for the "production_obligation" field.</summary>
    public const int ProductionObligationFieldNumber = 18;
    private bool productionObligation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ProductionObligation {
      get { return productionObligation_; }
      set {
        productionObligation_ = value;
      }
    }

    /// <summary>Field number for the "net_settlement_group" field.</summary>
    public const int NetSettlementGroupFieldNumber = 19;
    private static readonly pb::FieldCodec<string> _single_netSettlementGroup_codec = pb::FieldCodec.ForClassWrapper<string>(154);
    private string netSettlementGroup_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string NetSettlementGroup {
      get { return netSettlementGroup_; }
      set {
        netSettlementGroup_ = value;
      }
    }


    /// <summary>Field number for the "disconnetion_type" field.</summary>
    public const int DisconnetionTypeFieldNumber = 20;
    private static readonly pb::FieldCodec<string> _single_disconnetionType_codec = pb::FieldCodec.ForClassWrapper<string>(162);
    private string disconnetionType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DisconnetionType {
      get { return disconnetionType_; }
      set {
        disconnetionType_ = value;
      }
    }


    /// <summary>Field number for the "connection_type" field.</summary>
    public const int ConnectionTypeFieldNumber = 21;
    private static readonly pb::FieldCodec<string> _single_connectionType_codec = pb::FieldCodec.ForClassWrapper<string>(170);
    private string connectionType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ConnectionType {
      get { return connectionType_; }
      set {
        connectionType_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MasterDataRequestResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MasterDataRequestResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GsrnNumber != other.GsrnNumber) return false;
      if (!object.Equals(Address, other.Address)) return false;
      if (!object.Equals(Series, other.Series)) return false;
      if (!object.Equals(GridAreaDetails, other.GridAreaDetails)) return false;
      if (ConnectionState != other.ConnectionState) return false;
      if (MeteringMethod != other.MeteringMethod) return false;
      if (ReadingPeriodicity != other.ReadingPeriodicity) return false;
      if (Type != other.Type) return false;
      if (MaximumCurrent != other.MaximumCurrent) return false;
      if (MaximumPower != other.MaximumPower) return false;
      if (PowerPlantGsrnNumber != other.PowerPlantGsrnNumber) return false;
      if (!object.Equals(EffectiveDate, other.EffectiveDate)) return false;
      if (MeterNumber != other.MeterNumber) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Capacity, other.Capacity)) return false;
      if (AssetType != other.AssetType) return false;
      if (SettlementMethod != other.SettlementMethod) return false;
      if (ScheduledMeterReadingDate != other.ScheduledMeterReadingDate) return false;
      if (ProductionObligation != other.ProductionObligation) return false;
      if (NetSettlementGroup != other.NetSettlementGroup) return false;
      if (DisconnetionType != other.DisconnetionType) return false;
      if (ConnectionType != other.ConnectionType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (GsrnNumber.Length != 0) hash ^= GsrnNumber.GetHashCode();
      if (address_ != null) hash ^= Address.GetHashCode();
      if (series_ != null) hash ^= Series.GetHashCode();
      if (gridAreaDetails_ != null) hash ^= GridAreaDetails.GetHashCode();
      if (connectionState_ != null) hash ^= ConnectionState.GetHashCode();
      if (meteringMethod_ != null) hash ^= MeteringMethod.GetHashCode();
      if (readingPeriodicity_ != null) hash ^= ReadingPeriodicity.GetHashCode();
      if (type_ != null) hash ^= Type.GetHashCode();
      if (MaximumCurrent != 0) hash ^= MaximumCurrent.GetHashCode();
      if (MaximumPower != 0) hash ^= MaximumPower.GetHashCode();
      if (powerPlantGsrnNumber_ != null) hash ^= PowerPlantGsrnNumber.GetHashCode();
      if (effectiveDate_ != null) hash ^= EffectiveDate.GetHashCode();
      if (meterNumber_ != null) hash ^= MeterNumber.GetHashCode();
      if (Capacity != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Capacity);
      if (assetType_ != null) hash ^= AssetType.GetHashCode();
      if (settlementMethod_ != null) hash ^= SettlementMethod.GetHashCode();
      if (scheduledMeterReadingDate_ != null) hash ^= ScheduledMeterReadingDate.GetHashCode();
      if (ProductionObligation != false) hash ^= ProductionObligation.GetHashCode();
      if (netSettlementGroup_ != null) hash ^= NetSettlementGroup.GetHashCode();
      if (disconnetionType_ != null) hash ^= DisconnetionType.GetHashCode();
      if (connectionType_ != null) hash ^= ConnectionType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (GsrnNumber.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GsrnNumber);
      }
      if (address_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Address);
      }
      if (series_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Series);
      }
      if (gridAreaDetails_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(GridAreaDetails);
      }
      if (connectionState_ != null) {
        _single_connectionState_codec.WriteTagAndValue(output, ConnectionState);
      }
      if (meteringMethod_ != null) {
        _single_meteringMethod_codec.WriteTagAndValue(output, MeteringMethod);
      }
      if (readingPeriodicity_ != null) {
        _single_readingPeriodicity_codec.WriteTagAndValue(output, ReadingPeriodicity);
      }
      if (type_ != null) {
        _single_type_codec.WriteTagAndValue(output, Type);
      }
      if (MaximumCurrent != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MaximumCurrent);
      }
      if (MaximumPower != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MaximumPower);
      }
      if (powerPlantGsrnNumber_ != null) {
        _single_powerPlantGsrnNumber_codec.WriteTagAndValue(output, PowerPlantGsrnNumber);
      }
      if (effectiveDate_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(EffectiveDate);
      }
      if (meterNumber_ != null) {
        _single_meterNumber_codec.WriteTagAndValue(output, MeterNumber);
      }
      if (Capacity != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(Capacity);
      }
      if (assetType_ != null) {
        _single_assetType_codec.WriteTagAndValue(output, AssetType);
      }
      if (settlementMethod_ != null) {
        _single_settlementMethod_codec.WriteTagAndValue(output, SettlementMethod);
      }
      if (scheduledMeterReadingDate_ != null) {
        _single_scheduledMeterReadingDate_codec.WriteTagAndValue(output, ScheduledMeterReadingDate);
      }
      if (ProductionObligation != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(ProductionObligation);
      }
      if (netSettlementGroup_ != null) {
        _single_netSettlementGroup_codec.WriteTagAndValue(output, NetSettlementGroup);
      }
      if (disconnetionType_ != null) {
        _single_disconnetionType_codec.WriteTagAndValue(output, DisconnetionType);
      }
      if (connectionType_ != null) {
        _single_connectionType_codec.WriteTagAndValue(output, ConnectionType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (GsrnNumber.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GsrnNumber);
      }
      if (address_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Address);
      }
      if (series_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Series);
      }
      if (gridAreaDetails_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(GridAreaDetails);
      }
      if (connectionState_ != null) {
        _single_connectionState_codec.WriteTagAndValue(ref output, ConnectionState);
      }
      if (meteringMethod_ != null) {
        _single_meteringMethod_codec.WriteTagAndValue(ref output, MeteringMethod);
      }
      if (readingPeriodicity_ != null) {
        _single_readingPeriodicity_codec.WriteTagAndValue(ref output, ReadingPeriodicity);
      }
      if (type_ != null) {
        _single_type_codec.WriteTagAndValue(ref output, Type);
      }
      if (MaximumCurrent != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MaximumCurrent);
      }
      if (MaximumPower != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MaximumPower);
      }
      if (powerPlantGsrnNumber_ != null) {
        _single_powerPlantGsrnNumber_codec.WriteTagAndValue(ref output, PowerPlantGsrnNumber);
      }
      if (effectiveDate_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(EffectiveDate);
      }
      if (meterNumber_ != null) {
        _single_meterNumber_codec.WriteTagAndValue(ref output, MeterNumber);
      }
      if (Capacity != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(Capacity);
      }
      if (assetType_ != null) {
        _single_assetType_codec.WriteTagAndValue(ref output, AssetType);
      }
      if (settlementMethod_ != null) {
        _single_settlementMethod_codec.WriteTagAndValue(ref output, SettlementMethod);
      }
      if (scheduledMeterReadingDate_ != null) {
        _single_scheduledMeterReadingDate_codec.WriteTagAndValue(ref output, ScheduledMeterReadingDate);
      }
      if (ProductionObligation != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(ProductionObligation);
      }
      if (netSettlementGroup_ != null) {
        _single_netSettlementGroup_codec.WriteTagAndValue(ref output, NetSettlementGroup);
      }
      if (disconnetionType_ != null) {
        _single_disconnetionType_codec.WriteTagAndValue(ref output, DisconnetionType);
      }
      if (connectionType_ != null) {
        _single_connectionType_codec.WriteTagAndValue(ref output, ConnectionType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (GsrnNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GsrnNumber);
      }
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      if (series_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Series);
      }
      if (gridAreaDetails_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GridAreaDetails);
      }
      if (connectionState_ != null) {
        size += _single_connectionState_codec.CalculateSizeWithTag(ConnectionState);
      }
      if (meteringMethod_ != null) {
        size += _single_meteringMethod_codec.CalculateSizeWithTag(MeteringMethod);
      }
      if (readingPeriodicity_ != null) {
        size += _single_readingPeriodicity_codec.CalculateSizeWithTag(ReadingPeriodicity);
      }
      if (type_ != null) {
        size += _single_type_codec.CalculateSizeWithTag(Type);
      }
      if (MaximumCurrent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaximumCurrent);
      }
      if (MaximumPower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaximumPower);
      }
      if (powerPlantGsrnNumber_ != null) {
        size += _single_powerPlantGsrnNumber_codec.CalculateSizeWithTag(PowerPlantGsrnNumber);
      }
      if (effectiveDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EffectiveDate);
      }
      if (meterNumber_ != null) {
        size += _single_meterNumber_codec.CalculateSizeWithTag(MeterNumber);
      }
      if (Capacity != 0D) {
        size += 1 + 8;
      }
      if (assetType_ != null) {
        size += _single_assetType_codec.CalculateSizeWithTag(AssetType);
      }
      if (settlementMethod_ != null) {
        size += _single_settlementMethod_codec.CalculateSizeWithTag(SettlementMethod);
      }
      if (scheduledMeterReadingDate_ != null) {
        size += _single_scheduledMeterReadingDate_codec.CalculateSizeWithTag(ScheduledMeterReadingDate);
      }
      if (ProductionObligation != false) {
        size += 2 + 1;
      }
      if (netSettlementGroup_ != null) {
        size += _single_netSettlementGroup_codec.CalculateSizeWithTag(NetSettlementGroup);
      }
      if (disconnetionType_ != null) {
        size += _single_disconnetionType_codec.CalculateSizeWithTag(DisconnetionType);
      }
      if (connectionType_ != null) {
        size += _single_connectionType_codec.CalculateSizeWithTag(ConnectionType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MasterDataRequestResponse other) {
      if (other == null) {
        return;
      }
      if (other.GsrnNumber.Length != 0) {
        GsrnNumber = other.GsrnNumber;
      }
      if (other.address_ != null) {
        if (address_ == null) {
          Address = new global::Energinet.DataHub.MeteringPoints.RequestResponse.Response.Address();
        }
        Address.MergeFrom(other.Address);
      }
      if (other.series_ != null) {
        if (series_ == null) {
          Series = new global::Energinet.DataHub.MeteringPoints.RequestResponse.Response.Series();
        }
        Series.MergeFrom(other.Series);
      }
      if (other.gridAreaDetails_ != null) {
        if (gridAreaDetails_ == null) {
          GridAreaDetails = new global::Energinet.DataHub.MeteringPoints.RequestResponse.Response.GridAreaDetails();
        }
        GridAreaDetails.MergeFrom(other.GridAreaDetails);
      }
      if (other.connectionState_ != null) {
        if (connectionState_ == null || other.ConnectionState != "") {
          ConnectionState = other.ConnectionState;
        }
      }
      if (other.meteringMethod_ != null) {
        if (meteringMethod_ == null || other.MeteringMethod != "") {
          MeteringMethod = other.MeteringMethod;
        }
      }
      if (other.readingPeriodicity_ != null) {
        if (readingPeriodicity_ == null || other.ReadingPeriodicity != "") {
          ReadingPeriodicity = other.ReadingPeriodicity;
        }
      }
      if (other.type_ != null) {
        if (type_ == null || other.Type != "") {
          Type = other.Type;
        }
      }
      if (other.MaximumCurrent != 0) {
        MaximumCurrent = other.MaximumCurrent;
      }
      if (other.MaximumPower != 0) {
        MaximumPower = other.MaximumPower;
      }
      if (other.powerPlantGsrnNumber_ != null) {
        if (powerPlantGsrnNumber_ == null || other.PowerPlantGsrnNumber != "") {
          PowerPlantGsrnNumber = other.PowerPlantGsrnNumber;
        }
      }
      if (other.effectiveDate_ != null) {
        if (effectiveDate_ == null) {
          EffectiveDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EffectiveDate.MergeFrom(other.EffectiveDate);
      }
      if (other.meterNumber_ != null) {
        if (meterNumber_ == null || other.MeterNumber != "") {
          MeterNumber = other.MeterNumber;
        }
      }
      if (other.Capacity != 0D) {
        Capacity = other.Capacity;
      }
      if (other.assetType_ != null) {
        if (assetType_ == null || other.AssetType != "") {
          AssetType = other.AssetType;
        }
      }
      if (other.settlementMethod_ != null) {
        if (settlementMethod_ == null || other.SettlementMethod != "") {
          SettlementMethod = other.SettlementMethod;
        }
      }
      if (other.scheduledMeterReadingDate_ != null) {
        if (scheduledMeterReadingDate_ == null || other.ScheduledMeterReadingDate != "") {
          ScheduledMeterReadingDate = other.ScheduledMeterReadingDate;
        }
      }
      if (other.ProductionObligation != false) {
        ProductionObligation = other.ProductionObligation;
      }
      if (other.netSettlementGroup_ != null) {
        if (netSettlementGroup_ == null || other.NetSettlementGroup != "") {
          NetSettlementGroup = other.NetSettlementGroup;
        }
      }
      if (other.disconnetionType_ != null) {
        if (disconnetionType_ == null || other.DisconnetionType != "") {
          DisconnetionType = other.DisconnetionType;
        }
      }
      if (other.connectionType_ != null) {
        if (connectionType_ == null || other.ConnectionType != "") {
          ConnectionType = other.ConnectionType;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GsrnNumber = input.ReadString();
            break;
          }
          case 18: {
            if (address_ == null) {
              Address = new global::Energinet.DataHub.MeteringPoints.RequestResponse.Response.Address();
            }
            input.ReadMessage(Address);
            break;
          }
          case 26: {
            if (series_ == null) {
              Series = new global::Energinet.DataHub.MeteringPoints.RequestResponse.Response.Series();
            }
            input.ReadMessage(Series);
            break;
          }
          case 34: {
            if (gridAreaDetails_ == null) {
              GridAreaDetails = new global::Energinet.DataHub.MeteringPoints.RequestResponse.Response.GridAreaDetails();
            }
            input.ReadMessage(GridAreaDetails);
            break;
          }
          case 42: {
            string value = _single_connectionState_codec.Read(input);
            if (connectionState_ == null || value != "") {
              ConnectionState = value;
            }
            break;
          }
          case 50: {
            string value = _single_meteringMethod_codec.Read(input);
            if (meteringMethod_ == null || value != "") {
              MeteringMethod = value;
            }
            break;
          }
          case 58: {
            string value = _single_readingPeriodicity_codec.Read(input);
            if (readingPeriodicity_ == null || value != "") {
              ReadingPeriodicity = value;
            }
            break;
          }
          case 66: {
            string value = _single_type_codec.Read(input);
            if (type_ == null || value != "") {
              Type = value;
            }
            break;
          }
          case 72: {
            MaximumCurrent = input.ReadInt32();
            break;
          }
          case 80: {
            MaximumPower = input.ReadInt32();
            break;
          }
          case 90: {
            string value = _single_powerPlantGsrnNumber_codec.Read(input);
            if (powerPlantGsrnNumber_ == null || value != "") {
              PowerPlantGsrnNumber = value;
            }
            break;
          }
          case 98: {
            if (effectiveDate_ == null) {
              EffectiveDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EffectiveDate);
            break;
          }
          case 106: {
            string value = _single_meterNumber_codec.Read(input);
            if (meterNumber_ == null || value != "") {
              MeterNumber = value;
            }
            break;
          }
          case 113: {
            Capacity = input.ReadDouble();
            break;
          }
          case 122: {
            string value = _single_assetType_codec.Read(input);
            if (assetType_ == null || value != "") {
              AssetType = value;
            }
            break;
          }
          case 130: {
            string value = _single_settlementMethod_codec.Read(input);
            if (settlementMethod_ == null || value != "") {
              SettlementMethod = value;
            }
            break;
          }
          case 138: {
            string value = _single_scheduledMeterReadingDate_codec.Read(input);
            if (scheduledMeterReadingDate_ == null || value != "") {
              ScheduledMeterReadingDate = value;
            }
            break;
          }
          case 144: {
            ProductionObligation = input.ReadBool();
            break;
          }
          case 154: {
            string value = _single_netSettlementGroup_codec.Read(input);
            if (netSettlementGroup_ == null || value != "") {
              NetSettlementGroup = value;
            }
            break;
          }
          case 162: {
            string value = _single_disconnetionType_codec.Read(input);
            if (disconnetionType_ == null || value != "") {
              DisconnetionType = value;
            }
            break;
          }
          case 170: {
            string value = _single_connectionType_codec.Read(input);
            if (connectionType_ == null || value != "") {
              ConnectionType = value;
            }
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            GsrnNumber = input.ReadString();
            break;
          }
          case 18: {
            if (address_ == null) {
              Address = new global::Energinet.DataHub.MeteringPoints.RequestResponse.Response.Address();
            }
            input.ReadMessage(Address);
            break;
          }
          case 26: {
            if (series_ == null) {
              Series = new global::Energinet.DataHub.MeteringPoints.RequestResponse.Response.Series();
            }
            input.ReadMessage(Series);
            break;
          }
          case 34: {
            if (gridAreaDetails_ == null) {
              GridAreaDetails = new global::Energinet.DataHub.MeteringPoints.RequestResponse.Response.GridAreaDetails();
            }
            input.ReadMessage(GridAreaDetails);
            break;
          }
          case 42: {
            string value = _single_connectionState_codec.Read(ref input);
            if (connectionState_ == null || value != "") {
              ConnectionState = value;
            }
            break;
          }
          case 50: {
            string value = _single_meteringMethod_codec.Read(ref input);
            if (meteringMethod_ == null || value != "") {
              MeteringMethod = value;
            }
            break;
          }
          case 58: {
            string value = _single_readingPeriodicity_codec.Read(ref input);
            if (readingPeriodicity_ == null || value != "") {
              ReadingPeriodicity = value;
            }
            break;
          }
          case 66: {
            string value = _single_type_codec.Read(ref input);
            if (type_ == null || value != "") {
              Type = value;
            }
            break;
          }
          case 72: {
            MaximumCurrent = input.ReadInt32();
            break;
          }
          case 80: {
            MaximumPower = input.ReadInt32();
            break;
          }
          case 90: {
            string value = _single_powerPlantGsrnNumber_codec.Read(ref input);
            if (powerPlantGsrnNumber_ == null || value != "") {
              PowerPlantGsrnNumber = value;
            }
            break;
          }
          case 98: {
            if (effectiveDate_ == null) {
              EffectiveDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EffectiveDate);
            break;
          }
          case 106: {
            string value = _single_meterNumber_codec.Read(ref input);
            if (meterNumber_ == null || value != "") {
              MeterNumber = value;
            }
            break;
          }
          case 113: {
            Capacity = input.ReadDouble();
            break;
          }
          case 122: {
            string value = _single_assetType_codec.Read(ref input);
            if (assetType_ == null || value != "") {
              AssetType = value;
            }
            break;
          }
          case 130: {
            string value = _single_settlementMethod_codec.Read(ref input);
            if (settlementMethod_ == null || value != "") {
              SettlementMethod = value;
            }
            break;
          }
          case 138: {
            string value = _single_scheduledMeterReadingDate_codec.Read(ref input);
            if (scheduledMeterReadingDate_ == null || value != "") {
              ScheduledMeterReadingDate = value;
            }
            break;
          }
          case 144: {
            ProductionObligation = input.ReadBool();
            break;
          }
          case 154: {
            string value = _single_netSettlementGroup_codec.Read(ref input);
            if (netSettlementGroup_ == null || value != "") {
              NetSettlementGroup = value;
            }
            break;
          }
          case 162: {
            string value = _single_disconnetionType_codec.Read(ref input);
            if (disconnetionType_ == null || value != "") {
              DisconnetionType = value;
            }
            break;
          }
          case 170: {
            string value = _single_connectionType_codec.Read(ref input);
            if (connectionType_ == null || value != "") {
              ConnectionType = value;
            }
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
