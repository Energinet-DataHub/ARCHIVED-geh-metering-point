// Copyright 2020 Energinet DataHub A/S
//
// Licensed under the Apache License, Version 2.0 (the "License2");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.// Copyright 2020 Energinet DataHub A/S
//
// Licensed under the Apache License, Version 2.0 (the "License2");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Contracts/IntegrationEventContract.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Energinet.DataHub.MeteringPoints.IntegrationEventContracts {

  /// <summary>Holder for reflection information generated from Contracts/IntegrationEventContract.proto</summary>
  public static partial class IntegrationEventContractReflection {

    #region Descriptor
    /// <summary>File descriptor for Contracts/IntegrationEventContract.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static IntegrationEventContractReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CihDb250cmFjdHMvSW50ZWdyYXRpb25FdmVudENvbnRyYWN0LnByb3RvGh9n",
            "b29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvGh5nb29nbGUvcHJvdG9i",
            "dWYvd3JhcHBlcnMucHJvdG8ijw8KFE1ldGVyaW5nUG9pbnRDcmVhdGVkEhkK",
            "EW1ldGVyaW5nX3BvaW50X2lkGAEgASgJEhMKC2dzcm5fbnVtYmVyGAIgASgJ",
            "EhYKDmdyaWRfYXJlYV9jb2RlGAMgASgJEkEKEXNldHRsZW1lbnRfbWV0aG9k",
            "GAQgASgOMiYuTWV0ZXJpbmdQb2ludENyZWF0ZWQuU2V0dGxlbWVudE1ldGhv",
            "ZBI9Cg9tZXRlcmluZ19tZXRob2QYBSABKA4yJC5NZXRlcmluZ1BvaW50Q3Jl",
            "YXRlZC5NZXRlcmluZ01ldGhvZBJQChltZXRlcl9yZWFkaW5nX3BlcmlvZGlj",
            "aXR5GAYgASgOMi0uTWV0ZXJpbmdQb2ludENyZWF0ZWQuTWV0ZXJSZWFkaW5n",
            "UGVyaW9kaWNpdHkSRgoUbmV0X3NldHRsZW1lbnRfZ3JvdXAYByABKA4yKC5N",
            "ZXRlcmluZ1BvaW50Q3JlYXRlZC5OZXRTZXR0bGVtZW50R3JvdXASMgoHcHJv",
            "ZHVjdBgIIAEoDjIhLk1ldGVyaW5nUG9pbnRDcmVhdGVkLlByb2R1Y3RUeXBl",
            "EjIKDmVmZmVjdGl2ZV9kYXRlGAkgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRp",
            "bWVzdGFtcBI/ChBjb25uZWN0aW9uX3N0YXRlGAogASgOMiUuTWV0ZXJpbmdQ",
            "b2ludENyZWF0ZWQuQ29ubmVjdGlvblN0YXRlEjEKCXVuaXRfdHlwZRgLIAEo",
            "DjIeLk1ldGVyaW5nUG9pbnRDcmVhdGVkLlVuaXRUeXBlEjcKEXRvX2dyaWRf",
            "YXJlYV9jb2RlGAwgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVl",
            "EjkKE2Zyb21fZ3JpZF9hcmVhX2NvZGUYDSABKAsyHC5nb29nbGUucHJvdG9i",
            "dWYuU3RyaW5nVmFsdWUSRAoTbWV0ZXJpbmdfcG9pbnRfdHlwZRgOIAEoDjIn",
            "Lk1ldGVyaW5nUG9pbnRDcmVhdGVkLk1ldGVyaW5nUG9pbnRUeXBlEjgKEnBh",
            "cmVudF9nc3JuX251bWJlchgPIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJp",
            "bmdWYWx1ZSJ6ChJOZXRTZXR0bGVtZW50R3JvdXASDAoITlNHX05VTEwQABIM",
            "CghOU0dfWkVSTxABEgsKB05TR19PTkUQAhILCgdOU0dfVFdPEAMSDQoJTlNH",
            "X1RIUkVFEAQSCwoHTlNHX1NJWBAFEhIKDk5TR19OSU5FVFlOSU5FEAYihwEK",
            "C1Byb2R1Y3RUeXBlEg0KCVBUX1RBUklGRhAAEhMKD1BUX0ZVRUxRVUFOVElU",
            "WRABEhIKDlBUX1BPV0VSQUNUSVZFEAISFAoQUFRfUE9XRVJSRUFDVElWRRAD",
            "EhMKD1BUX0VORVJHWUFDVElWRRAEEhUKEVBUX0VORVJHWVJFQUNUSVZFEAUi",
            "UQoQU2V0dGxlbWVudE1ldGhvZBILCgdTTV9OVUxMEAASCwoHU01fRkxFWBAB",
            "Eg8KC1NNX1BST0ZJTEVEEAISEgoOU01fTk9OUFJPRklMRUQQAyJECg5NZXRl",
            "cmluZ01ldGhvZBIPCgtNTV9QSFlTSUNBTBAAEg4KCk1NX1ZJUlRVQUwQARIR",
            "Cg1NTV9DQUxDVUxBVEVEEAIiPAoXTWV0ZXJSZWFkaW5nUGVyaW9kaWNpdHkS",
            "DgoKTVJQX0hPVVJMWRAAEhEKDU1SUF9RVUFSVEVSTFkQASIdCg9Db25uZWN0",
            "aW9uU3RhdGUSCgoGQ1NfTkVXEAAiOQoIVW5pdFR5cGUSCQoFVVRfV0gQABIK",
            "CgZVVF9LV0gQARIKCgZVVF9NV0gQAhIKCgZVVF9HV0gQAyKLBAoRTWV0ZXJp",
            "bmdQb2ludFR5cGUSEwoPTVBUX0NvbnN1bXB0aW9uEAASEgoOTVBUX1Byb2R1",
            "Y3Rpb24QARIQCgxNUFRfRXhjaGFuZ2UQAhIaChZNUFRfR3JpZExvc3NDb3Jy",
            "ZWN0aW9uEAMSEAoMTVBUX0FuYWx5c2lzEAQSFAoQTVBUX1ZFUHJvZHVjdGlv",
            "bhAFEh4KGk1QVF9FeGNoYW5nZVJlYWN0aXZlRW5lcmd5EAYSEwoPTVBUX0lu",
            "dGVybmFsVXNlEAcSHgoaTVBUX1N1cnBsdXNQcm9kdWN0aW9uR3JvdXAQCBIV",
            "ChFNUFRfTmV0UHJvZHVjdGlvbhAJEhQKEE1QVF9TdXBwbHlUb0dyaWQQChIb",
            "ChdNUFRfQ29uc3VtcHRpb25Gcm9tR3JpZBALEhkKFU1QVF9XaG9sZXNhbGVT",
            "ZXJ2aWNlcxAMEhUKEU1QVF9Pd25Qcm9kdWN0aW9uEA0SEwoPTVBUX05ldEZy",
            "b21HcmlkEA4SEQoNTVBUX05ldFRvR3JpZBAPEhgKFE1QVF9Ub3RhbENvbnN1",
            "bXB0aW9uEBASGQoVTVBUX0VsZWN0cmljYWxIZWF0aW5nEBESFgoSTVBUX05l",
            "dENvbnN1bXB0aW9uEBISGAoUTVBUX090aGVyQ29uc3VtcHRpb24QExIXChNN",
            "UFRfT3RoZXJQcm9kdWN0aW9uEBQiSAoTTWV0ZXJpbmdQb2ludENsb3NlZBIZ",
            "ChFtZXRlcmluZ19wb2ludF9pZBgBIAEoCRIWCg5lZmZlY3RpdmVfZGF0ZRgC",
            "IAEoCSIzChZNZXRlcmluZ1BvaW50Q2FuY2VsbGVkEhkKEW1ldGVyaW5nX3Bv",
            "aW50X2lkGAEgASgJImQKDVBhcmVudENvdXBsZWQSGQoRbWV0ZXJpbmdfcG9p",
            "bnRfaWQYASABKAkSIAoYcGFyZW50X21ldGVyaW5nX3BvaW50X2lkGAIgASgJ",
            "EhYKDmVmZmVjdGl2ZV9kYXRlGAMgASgJIkQKD1BhcmVudERlY291cGxlZBIZ",
            "ChFtZXRlcmluZ19wb2ludF9pZBgBIAEoCRIWCg5lZmZlY3RpdmVfZGF0ZRgC",
            "IAEoCSKLAQoYU2V0dGxlbWVudERldGFpbHNDaGFuZ2VkEhkKEW1ldGVyaW5n",
            "X3BvaW50X2lkGAEgASgJEhkKEXNldHRsZW1lbnRfbWV0aG9kGAIgASgJEiEK",
            "GW1ldGVyX3JlYWRpbmdfcGVyaW9kaWNpdHkYAyABKAkSFgoOZWZmZWN0aXZl",
            "X2RhdGUYBCABKAkiYwoVTWV0ZXJpbmdNZXRob2RDaGFuZ2VkEhkKEW1ldGVy",
            "aW5nX3BvaW50X2lkGAEgASgJEhcKD21ldGVyaW5nX21ldGhvZBgCIAEoCRIW",
            "Cg5lZmZlY3RpdmVfZGF0ZRgDIAEoCSJsChlOZXRTZXR0bGVtZW50R3JvdXBD",
            "aGFuZ2VkEhkKEW1ldGVyaW5nX3BvaW50X2lkGAEgASgJEhwKFG5ldF9zZXR0",
            "bGVtZW50X2dyb3VwGAIgASgJEhYKDmVmZmVjdGl2ZV9kYXRlGAMgASgJIqQE",
            "ChhJbnRlZ3JhdGlvbkV2ZW50RW52ZWxvcGUSPAobbWV0ZXJpbmdQb2ludENy",
            "ZWF0ZWRNZXNzYWdlGAEgASgLMhUuTWV0ZXJpbmdQb2ludENyZWF0ZWRIABI6",
            "ChptZXRlcmluZ1BvaW50Q2xvc2VkTWVzc2FnZRgCIAEoCzIULk1ldGVyaW5n",
            "UG9pbnRDbG9zZWRIABJACh1tZXRlcmluZ1BvaW50Q2FuY2VsbGVkTWVzc2Fn",
            "ZRgDIAEoCzIXLk1ldGVyaW5nUG9pbnRDYW5jZWxsZWRIABIuChRwYXJlbnRD",
            "b3VwbGVkTWVzc2FnZRgEIAEoCzIOLlBhcmVudENvdXBsZWRIABIyChZwYXJl",
            "bnREZWNvdXBsZWRNZXNzYWdlGAUgASgLMhAuUGFyZW50RGVjb3VwbGVkSAAS",
            "RAofc2V0dGxlbWVudERldGFpbHNDaGFuZ2VkTWVzc2FnZRgGIAEoCzIZLlNl",
            "dHRsZW1lbnREZXRhaWxzQ2hhbmdlZEgAEj4KHG1ldGVyaW5nTWV0aG9kQ2hh",
            "bmdlZE1lc3NhZ2UYByABKAsyFi5NZXRlcmluZ01ldGhvZENoYW5nZWRIABJG",
            "CiBuZXRTZXR0bGVtZW50R3JvdXBDaGFuZ2VkTWVzc2FnZRgIIAEoCzIaLk5l",
            "dFNldHRsZW1lbnRHcm91cENoYW5nZWRIAEIaChhJbnRlZ3JhdGlvbkV2ZW50",
            "TWVzc2FnZXNCPaoCOkVuZXJnaW5ldC5EYXRhSHViLk1ldGVyaW5nUG9pbnRz",
            "LkludGVncmF0aW9uRXZlbnRDb250cmFjdHNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated), global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Parser, new[]{ "MeteringPointId", "GsrnNumber", "GridAreaCode", "SettlementMethod", "MeteringMethod", "MeterReadingPeriodicity", "NetSettlementGroup", "Product", "EffectiveDate", "ConnectionState", "UnitType", "ToGridAreaCode", "FromGridAreaCode", "MeteringPointType", "ParentGsrnNumber" }, null, new[]{ typeof(global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.NetSettlementGroup), typeof(global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.ProductType), typeof(global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.SettlementMethod), typeof(global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.MeteringMethod), typeof(global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.MeterReadingPeriodicity), typeof(global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.ConnectionState), typeof(global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.UnitType), typeof(global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.MeteringPointType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointClosed), global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointClosed.Parser, new[]{ "MeteringPointId", "EffectiveDate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCancelled), global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCancelled.Parser, new[]{ "MeteringPointId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.ParentCoupled), global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.ParentCoupled.Parser, new[]{ "MeteringPointId", "ParentMeteringPointId", "EffectiveDate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.ParentDecoupled), global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.ParentDecoupled.Parser, new[]{ "MeteringPointId", "EffectiveDate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.SettlementDetailsChanged), global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.SettlementDetailsChanged.Parser, new[]{ "MeteringPointId", "SettlementMethod", "MeterReadingPeriodicity", "EffectiveDate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringMethodChanged), global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringMethodChanged.Parser, new[]{ "MeteringPointId", "MeteringMethod", "EffectiveDate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.NetSettlementGroupChanged), global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.NetSettlementGroupChanged.Parser, new[]{ "MeteringPointId", "NetSettlementGroup", "EffectiveDate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.IntegrationEventEnvelope), global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.IntegrationEventEnvelope.Parser, new[]{ "MeteringPointCreatedMessage", "MeteringPointClosedMessage", "MeteringPointCancelledMessage", "ParentCoupledMessage", "ParentDecoupledMessage", "SettlementDetailsChangedMessage", "MeteringMethodChangedMessage", "NetSettlementGroupChangedMessage" }, new[]{ "IntegrationEventMessages" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class MeteringPointCreated : pb::IMessage<MeteringPointCreated>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MeteringPointCreated> _parser = new pb::MessageParser<MeteringPointCreated>(() => new MeteringPointCreated());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MeteringPointCreated> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.IntegrationEventContractReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MeteringPointCreated() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MeteringPointCreated(MeteringPointCreated other) : this() {
      meteringPointId_ = other.meteringPointId_;
      gsrnNumber_ = other.gsrnNumber_;
      gridAreaCode_ = other.gridAreaCode_;
      settlementMethod_ = other.settlementMethod_;
      meteringMethod_ = other.meteringMethod_;
      meterReadingPeriodicity_ = other.meterReadingPeriodicity_;
      netSettlementGroup_ = other.netSettlementGroup_;
      product_ = other.product_;
      effectiveDate_ = other.effectiveDate_ != null ? other.effectiveDate_.Clone() : null;
      connectionState_ = other.connectionState_;
      unitType_ = other.unitType_;
      ToGridAreaCode = other.ToGridAreaCode;
      FromGridAreaCode = other.FromGridAreaCode;
      meteringPointType_ = other.meteringPointType_;
      ParentGsrnNumber = other.ParentGsrnNumber;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MeteringPointCreated Clone() {
      return new MeteringPointCreated(this);
    }

    /// <summary>Field number for the "metering_point_id" field.</summary>
    public const int MeteringPointIdFieldNumber = 1;
    private string meteringPointId_ = "";
    /// <summary>
    /// Unique identification for metering point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MeteringPointId {
      get { return meteringPointId_; }
      set {
        meteringPointId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gsrn_number" field.</summary>
    public const int GsrnNumberFieldNumber = 2;
    private string gsrnNumber_ = "";
    /// <summary>
    /// Business facing metering point identifier
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string GsrnNumber {
      get { return gsrnNumber_; }
      set {
        gsrnNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "grid_area_code" field.</summary>
    public const int GridAreaCodeFieldNumber = 3;
    private string gridAreaCode_ = "";
    /// <summary>
    /// Signifies which grid area a metering point belongs to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string GridAreaCode {
      get { return gridAreaCode_; }
      set {
        gridAreaCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "settlement_method" field.</summary>
    public const int SettlementMethodFieldNumber = 4;
    private global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.SettlementMethod settlementMethod_ = global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.SettlementMethod.SmNull;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.SettlementMethod SettlementMethod {
      get { return settlementMethod_; }
      set {
        settlementMethod_ = value;
      }
    }

    /// <summary>Field number for the "metering_method" field.</summary>
    public const int MeteringMethodFieldNumber = 5;
    private global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.MeteringMethod meteringMethod_ = global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.MeteringMethod.MmPhysical;
    /// <summary>
    /// Metering method denotes how energy quantity is calculated in other domain
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.MeteringMethod MeteringMethod {
      get { return meteringMethod_; }
      set {
        meteringMethod_ = value;
      }
    }

    /// <summary>Field number for the "meter_reading_periodicity" field.</summary>
    public const int MeterReadingPeriodicityFieldNumber = 6;
    private global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.MeterReadingPeriodicity meterReadingPeriodicity_ = global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.MeterReadingPeriodicity.MrpHourly;
    /// <summary>
    /// Denotes how often a energy quantity is read on a metering point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.MeterReadingPeriodicity MeterReadingPeriodicity {
      get { return meterReadingPeriodicity_; }
      set {
        meterReadingPeriodicity_ = value;
      }
    }

    /// <summary>Field number for the "net_settlement_group" field.</summary>
    public const int NetSettlementGroupFieldNumber = 7;
    private global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.NetSettlementGroup netSettlementGroup_ = global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.NetSettlementGroup.NsgNull;
    /// <summary>
    /// Denotes the net settlement group
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.NetSettlementGroup NetSettlementGroup {
      get { return netSettlementGroup_; }
      set {
        netSettlementGroup_ = value;
      }
    }

    /// <summary>Field number for the "product" field.</summary>
    public const int ProductFieldNumber = 8;
    private global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.ProductType product_ = global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.ProductType.PtTariff;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.ProductType Product {
      get { return product_; }
      set {
        product_ = value;
      }
    }

    /// <summary>Field number for the "effective_date" field.</summary>
    public const int EffectiveDateFieldNumber = 9;
    private global::Google.Protobuf.WellKnownTypes.Timestamp effectiveDate_;
    /// <summary>
    /// The date on which the metering point is created
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EffectiveDate {
      get { return effectiveDate_; }
      set {
        effectiveDate_ = value;
      }
    }

    /// <summary>Field number for the "connection_state" field.</summary>
    public const int ConnectionStateFieldNumber = 10;
    private global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.ConnectionState connectionState_ = global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.ConnectionState.CsNew;
    /// <summary>
    /// Denotes which connection state a metering point is created with. For a consumption metering point this is always "New"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.ConnectionState ConnectionState {
      get { return connectionState_; }
      set {
        connectionState_ = value;
      }
    }

    /// <summary>Field number for the "unit_type" field.</summary>
    public const int UnitTypeFieldNumber = 11;
    private global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.UnitType unitType_ = global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.UnitType.UtWh;
    /// <summary>
    /// Denotes the unit type. For a production metering point this is always a variation of watt/hour
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.UnitType UnitType {
      get { return unitType_; }
      set {
        unitType_ = value;
      }
    }

    /// <summary>Field number for the "to_grid_area_code" field.</summary>
    public const int ToGridAreaCodeFieldNumber = 12;
    private static readonly pb::FieldCodec<string> _single_toGridAreaCode_codec = pb::FieldCodec.ForClassWrapper<string>(98);
    private string toGridAreaCode_;
    /// <summary>
    /// Denotes which grid area energy is exchanged to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ToGridAreaCode {
      get { return toGridAreaCode_; }
      set {
        toGridAreaCode_ = value;
      }
    }


    /// <summary>Field number for the "from_grid_area_code" field.</summary>
    public const int FromGridAreaCodeFieldNumber = 13;
    private static readonly pb::FieldCodec<string> _single_fromGridAreaCode_codec = pb::FieldCodec.ForClassWrapper<string>(106);
    private string fromGridAreaCode_;
    /// <summary>
    /// Denotes which grid area energy is exchange from
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FromGridAreaCode {
      get { return fromGridAreaCode_; }
      set {
        fromGridAreaCode_ = value;
      }
    }


    /// <summary>Field number for the "metering_point_type" field.</summary>
    public const int MeteringPointTypeFieldNumber = 14;
    private global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.MeteringPointType meteringPointType_ = global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.MeteringPointType.MptConsumption;
    /// <summary>
    /// Defines the type of metering point created
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.MeteringPointType MeteringPointType {
      get { return meteringPointType_; }
      set {
        meteringPointType_ = value;
      }
    }

    /// <summary>Field number for the "parent_gsrn_number" field.</summary>
    public const int ParentGsrnNumberFieldNumber = 15;
    private static readonly pb::FieldCodec<string> _single_parentGsrnNumber_codec = pb::FieldCodec.ForClassWrapper<string>(122);
    private string parentGsrnNumber_;
    /// <summary>
    /// Business facing metering point identifier for this metering points parent
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ParentGsrnNumber {
      get { return parentGsrnNumber_; }
      set {
        parentGsrnNumber_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MeteringPointCreated);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MeteringPointCreated other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MeteringPointId != other.MeteringPointId) return false;
      if (GsrnNumber != other.GsrnNumber) return false;
      if (GridAreaCode != other.GridAreaCode) return false;
      if (SettlementMethod != other.SettlementMethod) return false;
      if (MeteringMethod != other.MeteringMethod) return false;
      if (MeterReadingPeriodicity != other.MeterReadingPeriodicity) return false;
      if (NetSettlementGroup != other.NetSettlementGroup) return false;
      if (Product != other.Product) return false;
      if (!object.Equals(EffectiveDate, other.EffectiveDate)) return false;
      if (ConnectionState != other.ConnectionState) return false;
      if (UnitType != other.UnitType) return false;
      if (ToGridAreaCode != other.ToGridAreaCode) return false;
      if (FromGridAreaCode != other.FromGridAreaCode) return false;
      if (MeteringPointType != other.MeteringPointType) return false;
      if (ParentGsrnNumber != other.ParentGsrnNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (MeteringPointId.Length != 0) hash ^= MeteringPointId.GetHashCode();
      if (GsrnNumber.Length != 0) hash ^= GsrnNumber.GetHashCode();
      if (GridAreaCode.Length != 0) hash ^= GridAreaCode.GetHashCode();
      if (SettlementMethod != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.SettlementMethod.SmNull) hash ^= SettlementMethod.GetHashCode();
      if (MeteringMethod != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.MeteringMethod.MmPhysical) hash ^= MeteringMethod.GetHashCode();
      if (MeterReadingPeriodicity != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.MeterReadingPeriodicity.MrpHourly) hash ^= MeterReadingPeriodicity.GetHashCode();
      if (NetSettlementGroup != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.NetSettlementGroup.NsgNull) hash ^= NetSettlementGroup.GetHashCode();
      if (Product != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.ProductType.PtTariff) hash ^= Product.GetHashCode();
      if (effectiveDate_ != null) hash ^= EffectiveDate.GetHashCode();
      if (ConnectionState != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.ConnectionState.CsNew) hash ^= ConnectionState.GetHashCode();
      if (UnitType != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.UnitType.UtWh) hash ^= UnitType.GetHashCode();
      if (toGridAreaCode_ != null) hash ^= ToGridAreaCode.GetHashCode();
      if (fromGridAreaCode_ != null) hash ^= FromGridAreaCode.GetHashCode();
      if (MeteringPointType != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.MeteringPointType.MptConsumption) hash ^= MeteringPointType.GetHashCode();
      if (parentGsrnNumber_ != null) hash ^= ParentGsrnNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MeteringPointId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MeteringPointId);
      }
      if (GsrnNumber.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GsrnNumber);
      }
      if (GridAreaCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GridAreaCode);
      }
      if (SettlementMethod != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.SettlementMethod.SmNull) {
        output.WriteRawTag(32);
        output.WriteEnum((int) SettlementMethod);
      }
      if (MeteringMethod != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.MeteringMethod.MmPhysical) {
        output.WriteRawTag(40);
        output.WriteEnum((int) MeteringMethod);
      }
      if (MeterReadingPeriodicity != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.MeterReadingPeriodicity.MrpHourly) {
        output.WriteRawTag(48);
        output.WriteEnum((int) MeterReadingPeriodicity);
      }
      if (NetSettlementGroup != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.NetSettlementGroup.NsgNull) {
        output.WriteRawTag(56);
        output.WriteEnum((int) NetSettlementGroup);
      }
      if (Product != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.ProductType.PtTariff) {
        output.WriteRawTag(64);
        output.WriteEnum((int) Product);
      }
      if (effectiveDate_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(EffectiveDate);
      }
      if (ConnectionState != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.ConnectionState.CsNew) {
        output.WriteRawTag(80);
        output.WriteEnum((int) ConnectionState);
      }
      if (UnitType != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.UnitType.UtWh) {
        output.WriteRawTag(88);
        output.WriteEnum((int) UnitType);
      }
      if (toGridAreaCode_ != null) {
        _single_toGridAreaCode_codec.WriteTagAndValue(output, ToGridAreaCode);
      }
      if (fromGridAreaCode_ != null) {
        _single_fromGridAreaCode_codec.WriteTagAndValue(output, FromGridAreaCode);
      }
      if (MeteringPointType != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.MeteringPointType.MptConsumption) {
        output.WriteRawTag(112);
        output.WriteEnum((int) MeteringPointType);
      }
      if (parentGsrnNumber_ != null) {
        _single_parentGsrnNumber_codec.WriteTagAndValue(output, ParentGsrnNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MeteringPointId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MeteringPointId);
      }
      if (GsrnNumber.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GsrnNumber);
      }
      if (GridAreaCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GridAreaCode);
      }
      if (SettlementMethod != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.SettlementMethod.SmNull) {
        output.WriteRawTag(32);
        output.WriteEnum((int) SettlementMethod);
      }
      if (MeteringMethod != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.MeteringMethod.MmPhysical) {
        output.WriteRawTag(40);
        output.WriteEnum((int) MeteringMethod);
      }
      if (MeterReadingPeriodicity != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.MeterReadingPeriodicity.MrpHourly) {
        output.WriteRawTag(48);
        output.WriteEnum((int) MeterReadingPeriodicity);
      }
      if (NetSettlementGroup != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.NetSettlementGroup.NsgNull) {
        output.WriteRawTag(56);
        output.WriteEnum((int) NetSettlementGroup);
      }
      if (Product != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.ProductType.PtTariff) {
        output.WriteRawTag(64);
        output.WriteEnum((int) Product);
      }
      if (effectiveDate_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(EffectiveDate);
      }
      if (ConnectionState != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.ConnectionState.CsNew) {
        output.WriteRawTag(80);
        output.WriteEnum((int) ConnectionState);
      }
      if (UnitType != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.UnitType.UtWh) {
        output.WriteRawTag(88);
        output.WriteEnum((int) UnitType);
      }
      if (toGridAreaCode_ != null) {
        _single_toGridAreaCode_codec.WriteTagAndValue(ref output, ToGridAreaCode);
      }
      if (fromGridAreaCode_ != null) {
        _single_fromGridAreaCode_codec.WriteTagAndValue(ref output, FromGridAreaCode);
      }
      if (MeteringPointType != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.MeteringPointType.MptConsumption) {
        output.WriteRawTag(112);
        output.WriteEnum((int) MeteringPointType);
      }
      if (parentGsrnNumber_ != null) {
        _single_parentGsrnNumber_codec.WriteTagAndValue(ref output, ParentGsrnNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (MeteringPointId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MeteringPointId);
      }
      if (GsrnNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GsrnNumber);
      }
      if (GridAreaCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GridAreaCode);
      }
      if (SettlementMethod != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.SettlementMethod.SmNull) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SettlementMethod);
      }
      if (MeteringMethod != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.MeteringMethod.MmPhysical) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MeteringMethod);
      }
      if (MeterReadingPeriodicity != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.MeterReadingPeriodicity.MrpHourly) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MeterReadingPeriodicity);
      }
      if (NetSettlementGroup != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.NetSettlementGroup.NsgNull) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NetSettlementGroup);
      }
      if (Product != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.ProductType.PtTariff) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Product);
      }
      if (effectiveDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EffectiveDate);
      }
      if (ConnectionState != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.ConnectionState.CsNew) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ConnectionState);
      }
      if (UnitType != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.UnitType.UtWh) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) UnitType);
      }
      if (toGridAreaCode_ != null) {
        size += _single_toGridAreaCode_codec.CalculateSizeWithTag(ToGridAreaCode);
      }
      if (fromGridAreaCode_ != null) {
        size += _single_fromGridAreaCode_codec.CalculateSizeWithTag(FromGridAreaCode);
      }
      if (MeteringPointType != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.MeteringPointType.MptConsumption) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MeteringPointType);
      }
      if (parentGsrnNumber_ != null) {
        size += _single_parentGsrnNumber_codec.CalculateSizeWithTag(ParentGsrnNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MeteringPointCreated other) {
      if (other == null) {
        return;
      }
      if (other.MeteringPointId.Length != 0) {
        MeteringPointId = other.MeteringPointId;
      }
      if (other.GsrnNumber.Length != 0) {
        GsrnNumber = other.GsrnNumber;
      }
      if (other.GridAreaCode.Length != 0) {
        GridAreaCode = other.GridAreaCode;
      }
      if (other.SettlementMethod != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.SettlementMethod.SmNull) {
        SettlementMethod = other.SettlementMethod;
      }
      if (other.MeteringMethod != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.MeteringMethod.MmPhysical) {
        MeteringMethod = other.MeteringMethod;
      }
      if (other.MeterReadingPeriodicity != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.MeterReadingPeriodicity.MrpHourly) {
        MeterReadingPeriodicity = other.MeterReadingPeriodicity;
      }
      if (other.NetSettlementGroup != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.NetSettlementGroup.NsgNull) {
        NetSettlementGroup = other.NetSettlementGroup;
      }
      if (other.Product != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.ProductType.PtTariff) {
        Product = other.Product;
      }
      if (other.effectiveDate_ != null) {
        if (effectiveDate_ == null) {
          EffectiveDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EffectiveDate.MergeFrom(other.EffectiveDate);
      }
      if (other.ConnectionState != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.ConnectionState.CsNew) {
        ConnectionState = other.ConnectionState;
      }
      if (other.UnitType != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.UnitType.UtWh) {
        UnitType = other.UnitType;
      }
      if (other.toGridAreaCode_ != null) {
        if (toGridAreaCode_ == null || other.ToGridAreaCode != "") {
          ToGridAreaCode = other.ToGridAreaCode;
        }
      }
      if (other.fromGridAreaCode_ != null) {
        if (fromGridAreaCode_ == null || other.FromGridAreaCode != "") {
          FromGridAreaCode = other.FromGridAreaCode;
        }
      }
      if (other.MeteringPointType != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.MeteringPointType.MptConsumption) {
        MeteringPointType = other.MeteringPointType;
      }
      if (other.parentGsrnNumber_ != null) {
        if (parentGsrnNumber_ == null || other.ParentGsrnNumber != "") {
          ParentGsrnNumber = other.ParentGsrnNumber;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MeteringPointId = input.ReadString();
            break;
          }
          case 18: {
            GsrnNumber = input.ReadString();
            break;
          }
          case 26: {
            GridAreaCode = input.ReadString();
            break;
          }
          case 32: {
            SettlementMethod = (global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.SettlementMethod) input.ReadEnum();
            break;
          }
          case 40: {
            MeteringMethod = (global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.MeteringMethod) input.ReadEnum();
            break;
          }
          case 48: {
            MeterReadingPeriodicity = (global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.MeterReadingPeriodicity) input.ReadEnum();
            break;
          }
          case 56: {
            NetSettlementGroup = (global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.NetSettlementGroup) input.ReadEnum();
            break;
          }
          case 64: {
            Product = (global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.ProductType) input.ReadEnum();
            break;
          }
          case 74: {
            if (effectiveDate_ == null) {
              EffectiveDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EffectiveDate);
            break;
          }
          case 80: {
            ConnectionState = (global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.ConnectionState) input.ReadEnum();
            break;
          }
          case 88: {
            UnitType = (global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.UnitType) input.ReadEnum();
            break;
          }
          case 98: {
            string value = _single_toGridAreaCode_codec.Read(input);
            if (toGridAreaCode_ == null || value != "") {
              ToGridAreaCode = value;
            }
            break;
          }
          case 106: {
            string value = _single_fromGridAreaCode_codec.Read(input);
            if (fromGridAreaCode_ == null || value != "") {
              FromGridAreaCode = value;
            }
            break;
          }
          case 112: {
            MeteringPointType = (global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.MeteringPointType) input.ReadEnum();
            break;
          }
          case 122: {
            string value = _single_parentGsrnNumber_codec.Read(input);
            if (parentGsrnNumber_ == null || value != "") {
              ParentGsrnNumber = value;
            }
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            MeteringPointId = input.ReadString();
            break;
          }
          case 18: {
            GsrnNumber = input.ReadString();
            break;
          }
          case 26: {
            GridAreaCode = input.ReadString();
            break;
          }
          case 32: {
            SettlementMethod = (global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.SettlementMethod) input.ReadEnum();
            break;
          }
          case 40: {
            MeteringMethod = (global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.MeteringMethod) input.ReadEnum();
            break;
          }
          case 48: {
            MeterReadingPeriodicity = (global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.MeterReadingPeriodicity) input.ReadEnum();
            break;
          }
          case 56: {
            NetSettlementGroup = (global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.NetSettlementGroup) input.ReadEnum();
            break;
          }
          case 64: {
            Product = (global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.ProductType) input.ReadEnum();
            break;
          }
          case 74: {
            if (effectiveDate_ == null) {
              EffectiveDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EffectiveDate);
            break;
          }
          case 80: {
            ConnectionState = (global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.ConnectionState) input.ReadEnum();
            break;
          }
          case 88: {
            UnitType = (global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.UnitType) input.ReadEnum();
            break;
          }
          case 98: {
            string value = _single_toGridAreaCode_codec.Read(ref input);
            if (toGridAreaCode_ == null || value != "") {
              ToGridAreaCode = value;
            }
            break;
          }
          case 106: {
            string value = _single_fromGridAreaCode_codec.Read(ref input);
            if (fromGridAreaCode_ == null || value != "") {
              FromGridAreaCode = value;
            }
            break;
          }
          case 112: {
            MeteringPointType = (global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated.Types.MeteringPointType) input.ReadEnum();
            break;
          }
          case 122: {
            string value = _single_parentGsrnNumber_codec.Read(ref input);
            if (parentGsrnNumber_ == null || value != "") {
              ParentGsrnNumber = value;
            }
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the MeteringPointCreated message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum NetSettlementGroup {
        [pbr::OriginalName("NSG_NULL")] NsgNull = 0,
        [pbr::OriginalName("NSG_ZERO")] NsgZero = 1,
        [pbr::OriginalName("NSG_ONE")] NsgOne = 2,
        [pbr::OriginalName("NSG_TWO")] NsgTwo = 3,
        [pbr::OriginalName("NSG_THREE")] NsgThree = 4,
        [pbr::OriginalName("NSG_SIX")] NsgSix = 5,
        [pbr::OriginalName("NSG_NINETYNINE")] NsgNinetynine = 6,
      }

      public enum ProductType {
        [pbr::OriginalName("PT_TARIFF")] PtTariff = 0,
        [pbr::OriginalName("PT_FUELQUANTITY")] PtFuelquantity = 1,
        [pbr::OriginalName("PT_POWERACTIVE")] PtPoweractive = 2,
        [pbr::OriginalName("PT_POWERREACTIVE")] PtPowerreactive = 3,
        [pbr::OriginalName("PT_ENERGYACTIVE")] PtEnergyactive = 4,
        [pbr::OriginalName("PT_ENERGYREACTIVE")] PtEnergyreactive = 5,
      }

      public enum SettlementMethod {
        [pbr::OriginalName("SM_NULL")] SmNull = 0,
        [pbr::OriginalName("SM_FLEX")] SmFlex = 1,
        [pbr::OriginalName("SM_PROFILED")] SmProfiled = 2,
        [pbr::OriginalName("SM_NONPROFILED")] SmNonprofiled = 3,
      }

      public enum MeteringMethod {
        [pbr::OriginalName("MM_PHYSICAL")] MmPhysical = 0,
        [pbr::OriginalName("MM_VIRTUAL")] MmVirtual = 1,
        [pbr::OriginalName("MM_CALCULATED")] MmCalculated = 2,
      }

      public enum MeterReadingPeriodicity {
        [pbr::OriginalName("MRP_HOURLY")] MrpHourly = 0,
        [pbr::OriginalName("MRP_QUARTERLY")] MrpQuarterly = 1,
      }

      public enum ConnectionState {
        /// <summary>
        /// Always created with connection state new
        /// </summary>
        [pbr::OriginalName("CS_NEW")] CsNew = 0,
      }

      public enum UnitType {
        /// <summary>
        /// Watt per hour
        /// </summary>
        [pbr::OriginalName("UT_WH")] UtWh = 0,
        /// <summary>
        /// Kilowatt per hour
        /// </summary>
        [pbr::OriginalName("UT_KWH")] UtKwh = 1,
        /// <summary>
        /// Megawatt per hour
        /// </summary>
        [pbr::OriginalName("UT_MWH")] UtMwh = 2,
        /// <summary>
        /// Gigawatt per hour
        /// </summary>
        [pbr::OriginalName("UT_GWH")] UtGwh = 3,
      }

      public enum MeteringPointType {
        [pbr::OriginalName("MPT_Consumption")] MptConsumption = 0,
        [pbr::OriginalName("MPT_Production")] MptProduction = 1,
        [pbr::OriginalName("MPT_Exchange")] MptExchange = 2,
        [pbr::OriginalName("MPT_GridLossCorrection")] MptGridLossCorrection = 3,
        [pbr::OriginalName("MPT_Analysis")] MptAnalysis = 4,
        [pbr::OriginalName("MPT_VEProduction")] MptVeproduction = 5,
        [pbr::OriginalName("MPT_ExchangeReactiveEnergy")] MptExchangeReactiveEnergy = 6,
        [pbr::OriginalName("MPT_InternalUse")] MptInternalUse = 7,
        [pbr::OriginalName("MPT_SurplusProductionGroup")] MptSurplusProductionGroup = 8,
        [pbr::OriginalName("MPT_NetProduction")] MptNetProduction = 9,
        [pbr::OriginalName("MPT_SupplyToGrid")] MptSupplyToGrid = 10,
        [pbr::OriginalName("MPT_ConsumptionFromGrid")] MptConsumptionFromGrid = 11,
        [pbr::OriginalName("MPT_WholesaleServices")] MptWholesaleServices = 12,
        [pbr::OriginalName("MPT_OwnProduction")] MptOwnProduction = 13,
        [pbr::OriginalName("MPT_NetFromGrid")] MptNetFromGrid = 14,
        [pbr::OriginalName("MPT_NetToGrid")] MptNetToGrid = 15,
        [pbr::OriginalName("MPT_TotalConsumption")] MptTotalConsumption = 16,
        [pbr::OriginalName("MPT_ElectricalHeating")] MptElectricalHeating = 17,
        [pbr::OriginalName("MPT_NetConsumption")] MptNetConsumption = 18,
        [pbr::OriginalName("MPT_OtherConsumption")] MptOtherConsumption = 19,
        [pbr::OriginalName("MPT_OtherProduction")] MptOtherProduction = 20,
      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// Represents the closing of a metering point.
  /// </summary>
  public sealed partial class MeteringPointClosed : pb::IMessage<MeteringPointClosed>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MeteringPointClosed> _parser = new pb::MessageParser<MeteringPointClosed>(() => new MeteringPointClosed());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MeteringPointClosed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.IntegrationEventContractReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MeteringPointClosed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MeteringPointClosed(MeteringPointClosed other) : this() {
      meteringPointId_ = other.meteringPointId_;
      effectiveDate_ = other.effectiveDate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MeteringPointClosed Clone() {
      return new MeteringPointClosed(this);
    }

    /// <summary>Field number for the "metering_point_id" field.</summary>
    public const int MeteringPointIdFieldNumber = 1;
    private string meteringPointId_ = "";
    /// <summary>
    /// Unique metering point identifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MeteringPointId {
      get { return meteringPointId_; }
      set {
        meteringPointId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "effective_date" field.</summary>
    public const int EffectiveDateFieldNumber = 2;
    private string effectiveDate_ = "";
    /// <summary>
    /// The date on which the metering point is closed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string EffectiveDate {
      get { return effectiveDate_; }
      set {
        effectiveDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MeteringPointClosed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MeteringPointClosed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MeteringPointId != other.MeteringPointId) return false;
      if (EffectiveDate != other.EffectiveDate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (MeteringPointId.Length != 0) hash ^= MeteringPointId.GetHashCode();
      if (EffectiveDate.Length != 0) hash ^= EffectiveDate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MeteringPointId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MeteringPointId);
      }
      if (EffectiveDate.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EffectiveDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MeteringPointId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MeteringPointId);
      }
      if (EffectiveDate.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EffectiveDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (MeteringPointId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MeteringPointId);
      }
      if (EffectiveDate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EffectiveDate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MeteringPointClosed other) {
      if (other == null) {
        return;
      }
      if (other.MeteringPointId.Length != 0) {
        MeteringPointId = other.MeteringPointId;
      }
      if (other.EffectiveDate.Length != 0) {
        EffectiveDate = other.EffectiveDate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MeteringPointId = input.ReadString();
            break;
          }
          case 18: {
            EffectiveDate = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            MeteringPointId = input.ReadString();
            break;
          }
          case 18: {
            EffectiveDate = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Represents the cancellation of a metering point. This can only happen for MPs who have never had a supplier.
  /// </summary>
  public sealed partial class MeteringPointCancelled : pb::IMessage<MeteringPointCancelled>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MeteringPointCancelled> _parser = new pb::MessageParser<MeteringPointCancelled>(() => new MeteringPointCancelled());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MeteringPointCancelled> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.IntegrationEventContractReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MeteringPointCancelled() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MeteringPointCancelled(MeteringPointCancelled other) : this() {
      meteringPointId_ = other.meteringPointId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MeteringPointCancelled Clone() {
      return new MeteringPointCancelled(this);
    }

    /// <summary>Field number for the "metering_point_id" field.</summary>
    public const int MeteringPointIdFieldNumber = 1;
    private string meteringPointId_ = "";
    /// <summary>
    /// Unique metering point identifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MeteringPointId {
      get { return meteringPointId_; }
      set {
        meteringPointId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MeteringPointCancelled);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MeteringPointCancelled other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MeteringPointId != other.MeteringPointId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (MeteringPointId.Length != 0) hash ^= MeteringPointId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MeteringPointId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MeteringPointId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MeteringPointId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MeteringPointId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (MeteringPointId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MeteringPointId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MeteringPointCancelled other) {
      if (other == null) {
        return;
      }
      if (other.MeteringPointId.Length != 0) {
        MeteringPointId = other.MeteringPointId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MeteringPointId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            MeteringPointId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Represents the coupling of a parent to a eligible metering point.
  /// If a parent is changed, ie. one is removed and another is coupled, both the coupling and the decoupling messages are sent.
  /// </summary>
  public sealed partial class ParentCoupled : pb::IMessage<ParentCoupled>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ParentCoupled> _parser = new pb::MessageParser<ParentCoupled>(() => new ParentCoupled());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ParentCoupled> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.IntegrationEventContractReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ParentCoupled() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ParentCoupled(ParentCoupled other) : this() {
      meteringPointId_ = other.meteringPointId_;
      parentMeteringPointId_ = other.parentMeteringPointId_;
      effectiveDate_ = other.effectiveDate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ParentCoupled Clone() {
      return new ParentCoupled(this);
    }

    /// <summary>Field number for the "metering_point_id" field.</summary>
    public const int MeteringPointIdFieldNumber = 1;
    private string meteringPointId_ = "";
    /// <summary>
    /// Unique metering point identifier of the child metering point.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MeteringPointId {
      get { return meteringPointId_; }
      set {
        meteringPointId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parent_metering_point_id" field.</summary>
    public const int ParentMeteringPointIdFieldNumber = 2;
    private string parentMeteringPointId_ = "";
    /// <summary>
    /// Unique identifier of associated parent metering point.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ParentMeteringPointId {
      get { return parentMeteringPointId_; }
      set {
        parentMeteringPointId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "effective_date" field.</summary>
    public const int EffectiveDateFieldNumber = 3;
    private string effectiveDate_ = "";
    /// <summary>
    /// The date on which the parent is coupled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string EffectiveDate {
      get { return effectiveDate_; }
      set {
        effectiveDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ParentCoupled);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ParentCoupled other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MeteringPointId != other.MeteringPointId) return false;
      if (ParentMeteringPointId != other.ParentMeteringPointId) return false;
      if (EffectiveDate != other.EffectiveDate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (MeteringPointId.Length != 0) hash ^= MeteringPointId.GetHashCode();
      if (ParentMeteringPointId.Length != 0) hash ^= ParentMeteringPointId.GetHashCode();
      if (EffectiveDate.Length != 0) hash ^= EffectiveDate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MeteringPointId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MeteringPointId);
      }
      if (ParentMeteringPointId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ParentMeteringPointId);
      }
      if (EffectiveDate.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(EffectiveDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MeteringPointId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MeteringPointId);
      }
      if (ParentMeteringPointId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ParentMeteringPointId);
      }
      if (EffectiveDate.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(EffectiveDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (MeteringPointId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MeteringPointId);
      }
      if (ParentMeteringPointId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentMeteringPointId);
      }
      if (EffectiveDate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EffectiveDate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ParentCoupled other) {
      if (other == null) {
        return;
      }
      if (other.MeteringPointId.Length != 0) {
        MeteringPointId = other.MeteringPointId;
      }
      if (other.ParentMeteringPointId.Length != 0) {
        ParentMeteringPointId = other.ParentMeteringPointId;
      }
      if (other.EffectiveDate.Length != 0) {
        EffectiveDate = other.EffectiveDate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MeteringPointId = input.ReadString();
            break;
          }
          case 18: {
            ParentMeteringPointId = input.ReadString();
            break;
          }
          case 26: {
            EffectiveDate = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            MeteringPointId = input.ReadString();
            break;
          }
          case 18: {
            ParentMeteringPointId = input.ReadString();
            break;
          }
          case 26: {
            EffectiveDate = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Represents the decoupling of a parent to a eligible metering point.
  /// If a parent is changed, ie. one is removed and another is coupled, both the coupling and the decoupling messages are sent.
  /// </summary>
  public sealed partial class ParentDecoupled : pb::IMessage<ParentDecoupled>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ParentDecoupled> _parser = new pb::MessageParser<ParentDecoupled>(() => new ParentDecoupled());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ParentDecoupled> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.IntegrationEventContractReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ParentDecoupled() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ParentDecoupled(ParentDecoupled other) : this() {
      meteringPointId_ = other.meteringPointId_;
      effectiveDate_ = other.effectiveDate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ParentDecoupled Clone() {
      return new ParentDecoupled(this);
    }

    /// <summary>Field number for the "metering_point_id" field.</summary>
    public const int MeteringPointIdFieldNumber = 1;
    private string meteringPointId_ = "";
    /// <summary>
    /// Unique metering point identifier of the metering point which has the existing parent decoupled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MeteringPointId {
      get { return meteringPointId_; }
      set {
        meteringPointId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "effective_date" field.</summary>
    public const int EffectiveDateFieldNumber = 2;
    private string effectiveDate_ = "";
    /// <summary>
    /// The date on which the parent is decoupled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string EffectiveDate {
      get { return effectiveDate_; }
      set {
        effectiveDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ParentDecoupled);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ParentDecoupled other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MeteringPointId != other.MeteringPointId) return false;
      if (EffectiveDate != other.EffectiveDate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (MeteringPointId.Length != 0) hash ^= MeteringPointId.GetHashCode();
      if (EffectiveDate.Length != 0) hash ^= EffectiveDate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MeteringPointId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MeteringPointId);
      }
      if (EffectiveDate.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EffectiveDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MeteringPointId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MeteringPointId);
      }
      if (EffectiveDate.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EffectiveDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (MeteringPointId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MeteringPointId);
      }
      if (EffectiveDate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EffectiveDate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ParentDecoupled other) {
      if (other == null) {
        return;
      }
      if (other.MeteringPointId.Length != 0) {
        MeteringPointId = other.MeteringPointId;
      }
      if (other.EffectiveDate.Length != 0) {
        EffectiveDate = other.EffectiveDate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MeteringPointId = input.ReadString();
            break;
          }
          case 18: {
            EffectiveDate = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            MeteringPointId = input.ReadString();
            break;
          }
          case 18: {
            EffectiveDate = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Represents the changing of settlement details. Either the settlement method or the reading periodicity will be changed, or both will be changed.
  /// </summary>
  public sealed partial class SettlementDetailsChanged : pb::IMessage<SettlementDetailsChanged>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SettlementDetailsChanged> _parser = new pb::MessageParser<SettlementDetailsChanged>(() => new SettlementDetailsChanged());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SettlementDetailsChanged> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.IntegrationEventContractReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SettlementDetailsChanged() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SettlementDetailsChanged(SettlementDetailsChanged other) : this() {
      meteringPointId_ = other.meteringPointId_;
      settlementMethod_ = other.settlementMethod_;
      meterReadingPeriodicity_ = other.meterReadingPeriodicity_;
      effectiveDate_ = other.effectiveDate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SettlementDetailsChanged Clone() {
      return new SettlementDetailsChanged(this);
    }

    /// <summary>Field number for the "metering_point_id" field.</summary>
    public const int MeteringPointIdFieldNumber = 1;
    private string meteringPointId_ = "";
    /// <summary>
    /// Unique metering point identifier of the metering point which has its metering method changed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MeteringPointId {
      get { return meteringPointId_; }
      set {
        meteringPointId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "settlement_method" field.</summary>
    public const int SettlementMethodFieldNumber = 2;
    private string settlementMethod_ = "";
    /// <summary>
    /// The settlement method of the metering point.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SettlementMethod {
      get { return settlementMethod_; }
      set {
        settlementMethod_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "meter_reading_periodicity" field.</summary>
    public const int MeterReadingPeriodicityFieldNumber = 3;
    private string meterReadingPeriodicity_ = "";
    /// <summary>
    /// The reading periodicity of the metering point.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MeterReadingPeriodicity {
      get { return meterReadingPeriodicity_; }
      set {
        meterReadingPeriodicity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "effective_date" field.</summary>
    public const int EffectiveDateFieldNumber = 4;
    private string effectiveDate_ = "";
    /// <summary>
    /// The date on which the settlement details are change.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string EffectiveDate {
      get { return effectiveDate_; }
      set {
        effectiveDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SettlementDetailsChanged);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SettlementDetailsChanged other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MeteringPointId != other.MeteringPointId) return false;
      if (SettlementMethod != other.SettlementMethod) return false;
      if (MeterReadingPeriodicity != other.MeterReadingPeriodicity) return false;
      if (EffectiveDate != other.EffectiveDate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (MeteringPointId.Length != 0) hash ^= MeteringPointId.GetHashCode();
      if (SettlementMethod.Length != 0) hash ^= SettlementMethod.GetHashCode();
      if (MeterReadingPeriodicity.Length != 0) hash ^= MeterReadingPeriodicity.GetHashCode();
      if (EffectiveDate.Length != 0) hash ^= EffectiveDate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MeteringPointId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MeteringPointId);
      }
      if (SettlementMethod.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SettlementMethod);
      }
      if (MeterReadingPeriodicity.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MeterReadingPeriodicity);
      }
      if (EffectiveDate.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EffectiveDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MeteringPointId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MeteringPointId);
      }
      if (SettlementMethod.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SettlementMethod);
      }
      if (MeterReadingPeriodicity.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MeterReadingPeriodicity);
      }
      if (EffectiveDate.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EffectiveDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (MeteringPointId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MeteringPointId);
      }
      if (SettlementMethod.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SettlementMethod);
      }
      if (MeterReadingPeriodicity.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MeterReadingPeriodicity);
      }
      if (EffectiveDate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EffectiveDate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SettlementDetailsChanged other) {
      if (other == null) {
        return;
      }
      if (other.MeteringPointId.Length != 0) {
        MeteringPointId = other.MeteringPointId;
      }
      if (other.SettlementMethod.Length != 0) {
        SettlementMethod = other.SettlementMethod;
      }
      if (other.MeterReadingPeriodicity.Length != 0) {
        MeterReadingPeriodicity = other.MeterReadingPeriodicity;
      }
      if (other.EffectiveDate.Length != 0) {
        EffectiveDate = other.EffectiveDate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MeteringPointId = input.ReadString();
            break;
          }
          case 18: {
            SettlementMethod = input.ReadString();
            break;
          }
          case 26: {
            MeterReadingPeriodicity = input.ReadString();
            break;
          }
          case 34: {
            EffectiveDate = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            MeteringPointId = input.ReadString();
            break;
          }
          case 18: {
            SettlementMethod = input.ReadString();
            break;
          }
          case 26: {
            MeterReadingPeriodicity = input.ReadString();
            break;
          }
          case 34: {
            EffectiveDate = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Represents the changing of the Metering Method.
  /// </summary>
  public sealed partial class MeteringMethodChanged : pb::IMessage<MeteringMethodChanged>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MeteringMethodChanged> _parser = new pb::MessageParser<MeteringMethodChanged>(() => new MeteringMethodChanged());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MeteringMethodChanged> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.IntegrationEventContractReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MeteringMethodChanged() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MeteringMethodChanged(MeteringMethodChanged other) : this() {
      meteringPointId_ = other.meteringPointId_;
      meteringMethod_ = other.meteringMethod_;
      effectiveDate_ = other.effectiveDate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MeteringMethodChanged Clone() {
      return new MeteringMethodChanged(this);
    }

    /// <summary>Field number for the "metering_point_id" field.</summary>
    public const int MeteringPointIdFieldNumber = 1;
    private string meteringPointId_ = "";
    /// <summary>
    /// Unique metering point identifier of the metering point which has its settlement details changed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MeteringPointId {
      get { return meteringPointId_; }
      set {
        meteringPointId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metering_method" field.</summary>
    public const int MeteringMethodFieldNumber = 2;
    private string meteringMethod_ = "";
    /// <summary>
    /// This indicates if the metering point is now physical, virtual, or calculated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MeteringMethod {
      get { return meteringMethod_; }
      set {
        meteringMethod_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "effective_date" field.</summary>
    public const int EffectiveDateFieldNumber = 3;
    private string effectiveDate_ = "";
    /// <summary>
    /// The date on which the metering method is changed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string EffectiveDate {
      get { return effectiveDate_; }
      set {
        effectiveDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MeteringMethodChanged);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MeteringMethodChanged other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MeteringPointId != other.MeteringPointId) return false;
      if (MeteringMethod != other.MeteringMethod) return false;
      if (EffectiveDate != other.EffectiveDate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (MeteringPointId.Length != 0) hash ^= MeteringPointId.GetHashCode();
      if (MeteringMethod.Length != 0) hash ^= MeteringMethod.GetHashCode();
      if (EffectiveDate.Length != 0) hash ^= EffectiveDate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MeteringPointId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MeteringPointId);
      }
      if (MeteringMethod.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MeteringMethod);
      }
      if (EffectiveDate.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(EffectiveDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MeteringPointId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MeteringPointId);
      }
      if (MeteringMethod.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MeteringMethod);
      }
      if (EffectiveDate.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(EffectiveDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (MeteringPointId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MeteringPointId);
      }
      if (MeteringMethod.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MeteringMethod);
      }
      if (EffectiveDate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EffectiveDate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MeteringMethodChanged other) {
      if (other == null) {
        return;
      }
      if (other.MeteringPointId.Length != 0) {
        MeteringPointId = other.MeteringPointId;
      }
      if (other.MeteringMethod.Length != 0) {
        MeteringMethod = other.MeteringMethod;
      }
      if (other.EffectiveDate.Length != 0) {
        EffectiveDate = other.EffectiveDate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MeteringPointId = input.ReadString();
            break;
          }
          case 18: {
            MeteringMethod = input.ReadString();
            break;
          }
          case 26: {
            EffectiveDate = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            MeteringPointId = input.ReadString();
            break;
          }
          case 18: {
            MeteringMethod = input.ReadString();
            break;
          }
          case 26: {
            EffectiveDate = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Represents the changing of the Net Settlement Group.
  /// </summary>
  public sealed partial class NetSettlementGroupChanged : pb::IMessage<NetSettlementGroupChanged>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NetSettlementGroupChanged> _parser = new pb::MessageParser<NetSettlementGroupChanged>(() => new NetSettlementGroupChanged());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<NetSettlementGroupChanged> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.IntegrationEventContractReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NetSettlementGroupChanged() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NetSettlementGroupChanged(NetSettlementGroupChanged other) : this() {
      meteringPointId_ = other.meteringPointId_;
      netSettlementGroup_ = other.netSettlementGroup_;
      effectiveDate_ = other.effectiveDate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NetSettlementGroupChanged Clone() {
      return new NetSettlementGroupChanged(this);
    }

    /// <summary>Field number for the "metering_point_id" field.</summary>
    public const int MeteringPointIdFieldNumber = 1;
    private string meteringPointId_ = "";
    /// <summary>
    /// Unique metering point identifier of the metering point which has its net settlement group changed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MeteringPointId {
      get { return meteringPointId_; }
      set {
        meteringPointId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "net_settlement_group" field.</summary>
    public const int NetSettlementGroupFieldNumber = 2;
    private string netSettlementGroup_ = "";
    /// <summary>
    /// This indicates if the new net settlement group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string NetSettlementGroup {
      get { return netSettlementGroup_; }
      set {
        netSettlementGroup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "effective_date" field.</summary>
    public const int EffectiveDateFieldNumber = 3;
    private string effectiveDate_ = "";
    /// <summary>
    /// The date on which the net settlement group is changed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string EffectiveDate {
      get { return effectiveDate_; }
      set {
        effectiveDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as NetSettlementGroupChanged);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(NetSettlementGroupChanged other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MeteringPointId != other.MeteringPointId) return false;
      if (NetSettlementGroup != other.NetSettlementGroup) return false;
      if (EffectiveDate != other.EffectiveDate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (MeteringPointId.Length != 0) hash ^= MeteringPointId.GetHashCode();
      if (NetSettlementGroup.Length != 0) hash ^= NetSettlementGroup.GetHashCode();
      if (EffectiveDate.Length != 0) hash ^= EffectiveDate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MeteringPointId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MeteringPointId);
      }
      if (NetSettlementGroup.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NetSettlementGroup);
      }
      if (EffectiveDate.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(EffectiveDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MeteringPointId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MeteringPointId);
      }
      if (NetSettlementGroup.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NetSettlementGroup);
      }
      if (EffectiveDate.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(EffectiveDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (MeteringPointId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MeteringPointId);
      }
      if (NetSettlementGroup.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NetSettlementGroup);
      }
      if (EffectiveDate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EffectiveDate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(NetSettlementGroupChanged other) {
      if (other == null) {
        return;
      }
      if (other.MeteringPointId.Length != 0) {
        MeteringPointId = other.MeteringPointId;
      }
      if (other.NetSettlementGroup.Length != 0) {
        NetSettlementGroup = other.NetSettlementGroup;
      }
      if (other.EffectiveDate.Length != 0) {
        EffectiveDate = other.EffectiveDate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MeteringPointId = input.ReadString();
            break;
          }
          case 18: {
            NetSettlementGroup = input.ReadString();
            break;
          }
          case 26: {
            EffectiveDate = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            MeteringPointId = input.ReadString();
            break;
          }
          case 18: {
            NetSettlementGroup = input.ReadString();
            break;
          }
          case 26: {
            EffectiveDate = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class IntegrationEventEnvelope : pb::IMessage<IntegrationEventEnvelope>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<IntegrationEventEnvelope> _parser = new pb::MessageParser<IntegrationEventEnvelope>(() => new IntegrationEventEnvelope());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<IntegrationEventEnvelope> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.IntegrationEventContractReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public IntegrationEventEnvelope() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public IntegrationEventEnvelope(IntegrationEventEnvelope other) : this() {
      switch (other.IntegrationEventMessagesCase) {
        case IntegrationEventMessagesOneofCase.MeteringPointCreatedMessage:
          MeteringPointCreatedMessage = other.MeteringPointCreatedMessage.Clone();
          break;
        case IntegrationEventMessagesOneofCase.MeteringPointClosedMessage:
          MeteringPointClosedMessage = other.MeteringPointClosedMessage.Clone();
          break;
        case IntegrationEventMessagesOneofCase.MeteringPointCancelledMessage:
          MeteringPointCancelledMessage = other.MeteringPointCancelledMessage.Clone();
          break;
        case IntegrationEventMessagesOneofCase.ParentCoupledMessage:
          ParentCoupledMessage = other.ParentCoupledMessage.Clone();
          break;
        case IntegrationEventMessagesOneofCase.ParentDecoupledMessage:
          ParentDecoupledMessage = other.ParentDecoupledMessage.Clone();
          break;
        case IntegrationEventMessagesOneofCase.SettlementDetailsChangedMessage:
          SettlementDetailsChangedMessage = other.SettlementDetailsChangedMessage.Clone();
          break;
        case IntegrationEventMessagesOneofCase.MeteringMethodChangedMessage:
          MeteringMethodChangedMessage = other.MeteringMethodChangedMessage.Clone();
          break;
        case IntegrationEventMessagesOneofCase.NetSettlementGroupChangedMessage:
          NetSettlementGroupChangedMessage = other.NetSettlementGroupChangedMessage.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public IntegrationEventEnvelope Clone() {
      return new IntegrationEventEnvelope(this);
    }

    /// <summary>Field number for the "meteringPointCreatedMessage" field.</summary>
    public const int MeteringPointCreatedMessageFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated MeteringPointCreatedMessage {
      get { return integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.MeteringPointCreatedMessage ? (global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated) integrationEventMessages_ : null; }
      set {
        integrationEventMessages_ = value;
        integrationEventMessagesCase_ = value == null ? IntegrationEventMessagesOneofCase.None : IntegrationEventMessagesOneofCase.MeteringPointCreatedMessage;
      }
    }

    /// <summary>Field number for the "meteringPointClosedMessage" field.</summary>
    public const int MeteringPointClosedMessageFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointClosed MeteringPointClosedMessage {
      get { return integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.MeteringPointClosedMessage ? (global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointClosed) integrationEventMessages_ : null; }
      set {
        integrationEventMessages_ = value;
        integrationEventMessagesCase_ = value == null ? IntegrationEventMessagesOneofCase.None : IntegrationEventMessagesOneofCase.MeteringPointClosedMessage;
      }
    }

    /// <summary>Field number for the "meteringPointCancelledMessage" field.</summary>
    public const int MeteringPointCancelledMessageFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCancelled MeteringPointCancelledMessage {
      get { return integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.MeteringPointCancelledMessage ? (global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCancelled) integrationEventMessages_ : null; }
      set {
        integrationEventMessages_ = value;
        integrationEventMessagesCase_ = value == null ? IntegrationEventMessagesOneofCase.None : IntegrationEventMessagesOneofCase.MeteringPointCancelledMessage;
      }
    }

    /// <summary>Field number for the "parentCoupledMessage" field.</summary>
    public const int ParentCoupledMessageFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.ParentCoupled ParentCoupledMessage {
      get { return integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.ParentCoupledMessage ? (global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.ParentCoupled) integrationEventMessages_ : null; }
      set {
        integrationEventMessages_ = value;
        integrationEventMessagesCase_ = value == null ? IntegrationEventMessagesOneofCase.None : IntegrationEventMessagesOneofCase.ParentCoupledMessage;
      }
    }

    /// <summary>Field number for the "parentDecoupledMessage" field.</summary>
    public const int ParentDecoupledMessageFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.ParentDecoupled ParentDecoupledMessage {
      get { return integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.ParentDecoupledMessage ? (global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.ParentDecoupled) integrationEventMessages_ : null; }
      set {
        integrationEventMessages_ = value;
        integrationEventMessagesCase_ = value == null ? IntegrationEventMessagesOneofCase.None : IntegrationEventMessagesOneofCase.ParentDecoupledMessage;
      }
    }

    /// <summary>Field number for the "settlementDetailsChangedMessage" field.</summary>
    public const int SettlementDetailsChangedMessageFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.SettlementDetailsChanged SettlementDetailsChangedMessage {
      get { return integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.SettlementDetailsChangedMessage ? (global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.SettlementDetailsChanged) integrationEventMessages_ : null; }
      set {
        integrationEventMessages_ = value;
        integrationEventMessagesCase_ = value == null ? IntegrationEventMessagesOneofCase.None : IntegrationEventMessagesOneofCase.SettlementDetailsChangedMessage;
      }
    }

    /// <summary>Field number for the "meteringMethodChangedMessage" field.</summary>
    public const int MeteringMethodChangedMessageFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringMethodChanged MeteringMethodChangedMessage {
      get { return integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.MeteringMethodChangedMessage ? (global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringMethodChanged) integrationEventMessages_ : null; }
      set {
        integrationEventMessages_ = value;
        integrationEventMessagesCase_ = value == null ? IntegrationEventMessagesOneofCase.None : IntegrationEventMessagesOneofCase.MeteringMethodChangedMessage;
      }
    }

    /// <summary>Field number for the "netSettlementGroupChangedMessage" field.</summary>
    public const int NetSettlementGroupChangedMessageFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.NetSettlementGroupChanged NetSettlementGroupChangedMessage {
      get { return integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.NetSettlementGroupChangedMessage ? (global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.NetSettlementGroupChanged) integrationEventMessages_ : null; }
      set {
        integrationEventMessages_ = value;
        integrationEventMessagesCase_ = value == null ? IntegrationEventMessagesOneofCase.None : IntegrationEventMessagesOneofCase.NetSettlementGroupChangedMessage;
      }
    }

    private object integrationEventMessages_;
    /// <summary>Enum of possible cases for the "IntegrationEventMessages" oneof.</summary>
    public enum IntegrationEventMessagesOneofCase {
      None = 0,
      MeteringPointCreatedMessage = 1,
      MeteringPointClosedMessage = 2,
      MeteringPointCancelledMessage = 3,
      ParentCoupledMessage = 4,
      ParentDecoupledMessage = 5,
      SettlementDetailsChangedMessage = 6,
      MeteringMethodChangedMessage = 7,
      NetSettlementGroupChangedMessage = 8,
    }
    private IntegrationEventMessagesOneofCase integrationEventMessagesCase_ = IntegrationEventMessagesOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public IntegrationEventMessagesOneofCase IntegrationEventMessagesCase {
      get { return integrationEventMessagesCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIntegrationEventMessages() {
      integrationEventMessagesCase_ = IntegrationEventMessagesOneofCase.None;
      integrationEventMessages_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as IntegrationEventEnvelope);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(IntegrationEventEnvelope other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MeteringPointCreatedMessage, other.MeteringPointCreatedMessage)) return false;
      if (!object.Equals(MeteringPointClosedMessage, other.MeteringPointClosedMessage)) return false;
      if (!object.Equals(MeteringPointCancelledMessage, other.MeteringPointCancelledMessage)) return false;
      if (!object.Equals(ParentCoupledMessage, other.ParentCoupledMessage)) return false;
      if (!object.Equals(ParentDecoupledMessage, other.ParentDecoupledMessage)) return false;
      if (!object.Equals(SettlementDetailsChangedMessage, other.SettlementDetailsChangedMessage)) return false;
      if (!object.Equals(MeteringMethodChangedMessage, other.MeteringMethodChangedMessage)) return false;
      if (!object.Equals(NetSettlementGroupChangedMessage, other.NetSettlementGroupChangedMessage)) return false;
      if (IntegrationEventMessagesCase != other.IntegrationEventMessagesCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.MeteringPointCreatedMessage) hash ^= MeteringPointCreatedMessage.GetHashCode();
      if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.MeteringPointClosedMessage) hash ^= MeteringPointClosedMessage.GetHashCode();
      if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.MeteringPointCancelledMessage) hash ^= MeteringPointCancelledMessage.GetHashCode();
      if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.ParentCoupledMessage) hash ^= ParentCoupledMessage.GetHashCode();
      if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.ParentDecoupledMessage) hash ^= ParentDecoupledMessage.GetHashCode();
      if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.SettlementDetailsChangedMessage) hash ^= SettlementDetailsChangedMessage.GetHashCode();
      if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.MeteringMethodChangedMessage) hash ^= MeteringMethodChangedMessage.GetHashCode();
      if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.NetSettlementGroupChangedMessage) hash ^= NetSettlementGroupChangedMessage.GetHashCode();
      hash ^= (int) integrationEventMessagesCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.MeteringPointCreatedMessage) {
        output.WriteRawTag(10);
        output.WriteMessage(MeteringPointCreatedMessage);
      }
      if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.MeteringPointClosedMessage) {
        output.WriteRawTag(18);
        output.WriteMessage(MeteringPointClosedMessage);
      }
      if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.MeteringPointCancelledMessage) {
        output.WriteRawTag(26);
        output.WriteMessage(MeteringPointCancelledMessage);
      }
      if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.ParentCoupledMessage) {
        output.WriteRawTag(34);
        output.WriteMessage(ParentCoupledMessage);
      }
      if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.ParentDecoupledMessage) {
        output.WriteRawTag(42);
        output.WriteMessage(ParentDecoupledMessage);
      }
      if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.SettlementDetailsChangedMessage) {
        output.WriteRawTag(50);
        output.WriteMessage(SettlementDetailsChangedMessage);
      }
      if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.MeteringMethodChangedMessage) {
        output.WriteRawTag(58);
        output.WriteMessage(MeteringMethodChangedMessage);
      }
      if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.NetSettlementGroupChangedMessage) {
        output.WriteRawTag(66);
        output.WriteMessage(NetSettlementGroupChangedMessage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.MeteringPointCreatedMessage) {
        output.WriteRawTag(10);
        output.WriteMessage(MeteringPointCreatedMessage);
      }
      if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.MeteringPointClosedMessage) {
        output.WriteRawTag(18);
        output.WriteMessage(MeteringPointClosedMessage);
      }
      if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.MeteringPointCancelledMessage) {
        output.WriteRawTag(26);
        output.WriteMessage(MeteringPointCancelledMessage);
      }
      if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.ParentCoupledMessage) {
        output.WriteRawTag(34);
        output.WriteMessage(ParentCoupledMessage);
      }
      if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.ParentDecoupledMessage) {
        output.WriteRawTag(42);
        output.WriteMessage(ParentDecoupledMessage);
      }
      if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.SettlementDetailsChangedMessage) {
        output.WriteRawTag(50);
        output.WriteMessage(SettlementDetailsChangedMessage);
      }
      if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.MeteringMethodChangedMessage) {
        output.WriteRawTag(58);
        output.WriteMessage(MeteringMethodChangedMessage);
      }
      if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.NetSettlementGroupChangedMessage) {
        output.WriteRawTag(66);
        output.WriteMessage(NetSettlementGroupChangedMessage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.MeteringPointCreatedMessage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MeteringPointCreatedMessage);
      }
      if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.MeteringPointClosedMessage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MeteringPointClosedMessage);
      }
      if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.MeteringPointCancelledMessage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MeteringPointCancelledMessage);
      }
      if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.ParentCoupledMessage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ParentCoupledMessage);
      }
      if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.ParentDecoupledMessage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ParentDecoupledMessage);
      }
      if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.SettlementDetailsChangedMessage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SettlementDetailsChangedMessage);
      }
      if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.MeteringMethodChangedMessage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MeteringMethodChangedMessage);
      }
      if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.NetSettlementGroupChangedMessage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NetSettlementGroupChangedMessage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(IntegrationEventEnvelope other) {
      if (other == null) {
        return;
      }
      switch (other.IntegrationEventMessagesCase) {
        case IntegrationEventMessagesOneofCase.MeteringPointCreatedMessage:
          if (MeteringPointCreatedMessage == null) {
            MeteringPointCreatedMessage = new global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated();
          }
          MeteringPointCreatedMessage.MergeFrom(other.MeteringPointCreatedMessage);
          break;
        case IntegrationEventMessagesOneofCase.MeteringPointClosedMessage:
          if (MeteringPointClosedMessage == null) {
            MeteringPointClosedMessage = new global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointClosed();
          }
          MeteringPointClosedMessage.MergeFrom(other.MeteringPointClosedMessage);
          break;
        case IntegrationEventMessagesOneofCase.MeteringPointCancelledMessage:
          if (MeteringPointCancelledMessage == null) {
            MeteringPointCancelledMessage = new global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCancelled();
          }
          MeteringPointCancelledMessage.MergeFrom(other.MeteringPointCancelledMessage);
          break;
        case IntegrationEventMessagesOneofCase.ParentCoupledMessage:
          if (ParentCoupledMessage == null) {
            ParentCoupledMessage = new global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.ParentCoupled();
          }
          ParentCoupledMessage.MergeFrom(other.ParentCoupledMessage);
          break;
        case IntegrationEventMessagesOneofCase.ParentDecoupledMessage:
          if (ParentDecoupledMessage == null) {
            ParentDecoupledMessage = new global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.ParentDecoupled();
          }
          ParentDecoupledMessage.MergeFrom(other.ParentDecoupledMessage);
          break;
        case IntegrationEventMessagesOneofCase.SettlementDetailsChangedMessage:
          if (SettlementDetailsChangedMessage == null) {
            SettlementDetailsChangedMessage = new global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.SettlementDetailsChanged();
          }
          SettlementDetailsChangedMessage.MergeFrom(other.SettlementDetailsChangedMessage);
          break;
        case IntegrationEventMessagesOneofCase.MeteringMethodChangedMessage:
          if (MeteringMethodChangedMessage == null) {
            MeteringMethodChangedMessage = new global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringMethodChanged();
          }
          MeteringMethodChangedMessage.MergeFrom(other.MeteringMethodChangedMessage);
          break;
        case IntegrationEventMessagesOneofCase.NetSettlementGroupChangedMessage:
          if (NetSettlementGroupChangedMessage == null) {
            NetSettlementGroupChangedMessage = new global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.NetSettlementGroupChanged();
          }
          NetSettlementGroupChangedMessage.MergeFrom(other.NetSettlementGroupChangedMessage);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated subBuilder = new global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated();
            if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.MeteringPointCreatedMessage) {
              subBuilder.MergeFrom(MeteringPointCreatedMessage);
            }
            input.ReadMessage(subBuilder);
            MeteringPointCreatedMessage = subBuilder;
            break;
          }
          case 18: {
            global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointClosed subBuilder = new global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointClosed();
            if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.MeteringPointClosedMessage) {
              subBuilder.MergeFrom(MeteringPointClosedMessage);
            }
            input.ReadMessage(subBuilder);
            MeteringPointClosedMessage = subBuilder;
            break;
          }
          case 26: {
            global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCancelled subBuilder = new global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCancelled();
            if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.MeteringPointCancelledMessage) {
              subBuilder.MergeFrom(MeteringPointCancelledMessage);
            }
            input.ReadMessage(subBuilder);
            MeteringPointCancelledMessage = subBuilder;
            break;
          }
          case 34: {
            global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.ParentCoupled subBuilder = new global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.ParentCoupled();
            if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.ParentCoupledMessage) {
              subBuilder.MergeFrom(ParentCoupledMessage);
            }
            input.ReadMessage(subBuilder);
            ParentCoupledMessage = subBuilder;
            break;
          }
          case 42: {
            global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.ParentDecoupled subBuilder = new global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.ParentDecoupled();
            if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.ParentDecoupledMessage) {
              subBuilder.MergeFrom(ParentDecoupledMessage);
            }
            input.ReadMessage(subBuilder);
            ParentDecoupledMessage = subBuilder;
            break;
          }
          case 50: {
            global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.SettlementDetailsChanged subBuilder = new global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.SettlementDetailsChanged();
            if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.SettlementDetailsChangedMessage) {
              subBuilder.MergeFrom(SettlementDetailsChangedMessage);
            }
            input.ReadMessage(subBuilder);
            SettlementDetailsChangedMessage = subBuilder;
            break;
          }
          case 58: {
            global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringMethodChanged subBuilder = new global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringMethodChanged();
            if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.MeteringMethodChangedMessage) {
              subBuilder.MergeFrom(MeteringMethodChangedMessage);
            }
            input.ReadMessage(subBuilder);
            MeteringMethodChangedMessage = subBuilder;
            break;
          }
          case 66: {
            global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.NetSettlementGroupChanged subBuilder = new global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.NetSettlementGroupChanged();
            if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.NetSettlementGroupChangedMessage) {
              subBuilder.MergeFrom(NetSettlementGroupChangedMessage);
            }
            input.ReadMessage(subBuilder);
            NetSettlementGroupChangedMessage = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated subBuilder = new global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCreated();
            if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.MeteringPointCreatedMessage) {
              subBuilder.MergeFrom(MeteringPointCreatedMessage);
            }
            input.ReadMessage(subBuilder);
            MeteringPointCreatedMessage = subBuilder;
            break;
          }
          case 18: {
            global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointClosed subBuilder = new global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointClosed();
            if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.MeteringPointClosedMessage) {
              subBuilder.MergeFrom(MeteringPointClosedMessage);
            }
            input.ReadMessage(subBuilder);
            MeteringPointClosedMessage = subBuilder;
            break;
          }
          case 26: {
            global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCancelled subBuilder = new global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringPointCancelled();
            if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.MeteringPointCancelledMessage) {
              subBuilder.MergeFrom(MeteringPointCancelledMessage);
            }
            input.ReadMessage(subBuilder);
            MeteringPointCancelledMessage = subBuilder;
            break;
          }
          case 34: {
            global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.ParentCoupled subBuilder = new global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.ParentCoupled();
            if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.ParentCoupledMessage) {
              subBuilder.MergeFrom(ParentCoupledMessage);
            }
            input.ReadMessage(subBuilder);
            ParentCoupledMessage = subBuilder;
            break;
          }
          case 42: {
            global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.ParentDecoupled subBuilder = new global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.ParentDecoupled();
            if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.ParentDecoupledMessage) {
              subBuilder.MergeFrom(ParentDecoupledMessage);
            }
            input.ReadMessage(subBuilder);
            ParentDecoupledMessage = subBuilder;
            break;
          }
          case 50: {
            global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.SettlementDetailsChanged subBuilder = new global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.SettlementDetailsChanged();
            if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.SettlementDetailsChangedMessage) {
              subBuilder.MergeFrom(SettlementDetailsChangedMessage);
            }
            input.ReadMessage(subBuilder);
            SettlementDetailsChangedMessage = subBuilder;
            break;
          }
          case 58: {
            global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringMethodChanged subBuilder = new global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MeteringMethodChanged();
            if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.MeteringMethodChangedMessage) {
              subBuilder.MergeFrom(MeteringMethodChangedMessage);
            }
            input.ReadMessage(subBuilder);
            MeteringMethodChangedMessage = subBuilder;
            break;
          }
          case 66: {
            global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.NetSettlementGroupChanged subBuilder = new global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.NetSettlementGroupChanged();
            if (integrationEventMessagesCase_ == IntegrationEventMessagesOneofCase.NetSettlementGroupChangedMessage) {
              subBuilder.MergeFrom(NetSettlementGroupChangedMessage);
            }
            input.ReadMessage(subBuilder);
            NetSettlementGroupChangedMessage = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
