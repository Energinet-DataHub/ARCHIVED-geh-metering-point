// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ChangeMasterData/MasterDataUpdatedIntegrationEvent.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Energinet.DataHub.MeteringPoints.IntegrationEventContracts {

  /// <summary>Holder for reflection information generated from ChangeMasterData/MasterDataUpdatedIntegrationEvent.proto</summary>
  public static partial class MasterDataUpdatedIntegrationEventReflection {

    #region Descriptor
    /// <summary>File descriptor for ChangeMasterData/MasterDataUpdatedIntegrationEvent.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MasterDataUpdatedIntegrationEventReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjhDaGFuZ2VNYXN0ZXJEYXRhL01hc3RlckRhdGFVcGRhdGVkSW50ZWdyYXRp",
            "b25FdmVudC5wcm90bxofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90",
            "bxoeZ29vZ2xlL3Byb3RvYnVmL3dyYXBwZXJzLnByb3RvIsEIChFNYXN0ZXJE",
            "YXRhVXBkYXRlZBIZChFtZXRlcmluZ19wb2ludF9pZBgBIAEoCRI+ChFzZXR0",
            "bGVtZW50X21ldGhvZBgCIAEoDjIjLk1hc3RlckRhdGFVcGRhdGVkLlNldHRs",
            "ZW1lbnRNZXRob2QSOgoPbWV0ZXJpbmdfbWV0aG9kGAMgASgOMiEuTWFzdGVy",
            "RGF0YVVwZGF0ZWQuTWV0ZXJpbmdNZXRob2QSTQoZbWV0ZXJfcmVhZGluZ19w",
            "ZXJpb2RpY2l0eRgEIAEoDjIqLk1hc3RlckRhdGFVcGRhdGVkLk1ldGVyUmVh",
            "ZGluZ1BlcmlvZGljaXR5EkMKFG5ldF9zZXR0bGVtZW50X2dyb3VwGAUgASgO",
            "MiUuTWFzdGVyRGF0YVVwZGF0ZWQuTmV0U2V0dGxlbWVudEdyb3VwEi8KB3By",
            "b2R1Y3QYBiABKA4yHi5NYXN0ZXJEYXRhVXBkYXRlZC5Qcm9kdWN0VHlwZRIy",
            "Cg5lZmZlY3RpdmVfZGF0ZRgHIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1l",
            "c3RhbXASLgoJdW5pdF90eXBlGAggASgOMhsuTWFzdGVyRGF0YVVwZGF0ZWQu",
            "VW5pdFR5cGUiegoSTmV0U2V0dGxlbWVudEdyb3VwEgwKCE5TR19OVUxMEAAS",
            "DAoITlNHX1pFUk8QARILCgdOU0dfT05FEAISCwoHTlNHX1RXTxADEg0KCU5T",
            "R19USFJFRRAEEgsKB05TR19TSVgQBRISCg5OU0dfTklORVRZTklORRAGIpQB",
            "CgtQcm9kdWN0VHlwZRILCgdQVF9OVUxMEAASDQoJUFRfVEFSSUZGEAESEwoP",
            "UFRfRlVFTFFVQU5USVRZEAISEgoOUFRfUE9XRVJBQ1RJVkUQAxIUChBQVF9Q",
            "T1dFUlJFQUNUSVZFEAQSEwoPUFRfRU5FUkdZQUNUSVZFEAUSFQoRUFRfRU5F",
            "UkdZUkVBQ1RJVkUQBiJRChBTZXR0bGVtZW50TWV0aG9kEgsKB1NNX05VTEwQ",
            "ABILCgdTTV9GTEVYEAESDwoLU01fUFJPRklMRUQQAhISCg5TTV9OT05QUk9G",
            "SUxFRBADIlEKDk1ldGVyaW5nTWV0aG9kEgsKB01NX05VTEwQABIPCgtNTV9Q",
            "SFlTSUNBTBABEg4KCk1NX1ZJUlRVQUwQAhIRCg1NTV9DQUxDVUxBVEVEEAMi",
            "awoXTWV0ZXJSZWFkaW5nUGVyaW9kaWNpdHkSDAoITVJQX05VTEwQABIOCgpN",
            "UlBfSE9VUkxZEAESEQoNTVJQX1FVQVJURVJMWRACEg8KC01SUF9NT05USExZ",
            "EAMSDgoKTVJQX1lFQVJMWRAEIkYKCFVuaXRUeXBlEgsKB1VUX05VTEwQABIJ",
            "CgVVVF9XSBABEgoKBlVUX0tXSBACEgoKBlVUX01XSBADEgoKBlVUX0dXSBAE",
            "Qj2qAjpFbmVyZ2luZXQuRGF0YUh1Yi5NZXRlcmluZ1BvaW50cy5JbnRlZ3Jh",
            "dGlvbkV2ZW50Q29udHJhY3RzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated), global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Parser, new[]{ "MeteringPointId", "SettlementMethod", "MeteringMethod", "MeterReadingPeriodicity", "NetSettlementGroup", "Product", "EffectiveDate", "UnitType" }, null, new[]{ typeof(global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.NetSettlementGroup), typeof(global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.ProductType), typeof(global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.SettlementMethod), typeof(global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.MeteringMethod), typeof(global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.MeterReadingPeriodicity), typeof(global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.UnitType) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class MasterDataUpdated : pb::IMessage<MasterDataUpdated>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MasterDataUpdated> _parser = new pb::MessageParser<MasterDataUpdated>(() => new MasterDataUpdated());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MasterDataUpdated> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdatedIntegrationEventReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MasterDataUpdated() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MasterDataUpdated(MasterDataUpdated other) : this() {
      meteringPointId_ = other.meteringPointId_;
      settlementMethod_ = other.settlementMethod_;
      meteringMethod_ = other.meteringMethod_;
      meterReadingPeriodicity_ = other.meterReadingPeriodicity_;
      netSettlementGroup_ = other.netSettlementGroup_;
      product_ = other.product_;
      effectiveDate_ = other.effectiveDate_ != null ? other.effectiveDate_.Clone() : null;
      unitType_ = other.unitType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MasterDataUpdated Clone() {
      return new MasterDataUpdated(this);
    }

    /// <summary>Field number for the "metering_point_id" field.</summary>
    public const int MeteringPointIdFieldNumber = 1;
    private string meteringPointId_ = "";
    /// <summary>
    /// Unique identification for metering point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MeteringPointId {
      get { return meteringPointId_; }
      set {
        meteringPointId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "settlement_method" field.</summary>
    public const int SettlementMethodFieldNumber = 2;
    private global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.SettlementMethod settlementMethod_ = global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.SettlementMethod.SmNull;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.SettlementMethod SettlementMethod {
      get { return settlementMethod_; }
      set {
        settlementMethod_ = value;
      }
    }

    /// <summary>Field number for the "metering_method" field.</summary>
    public const int MeteringMethodFieldNumber = 3;
    private global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.MeteringMethod meteringMethod_ = global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.MeteringMethod.MmNull;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.MeteringMethod MeteringMethod {
      get { return meteringMethod_; }
      set {
        meteringMethod_ = value;
      }
    }

    /// <summary>Field number for the "meter_reading_periodicity" field.</summary>
    public const int MeterReadingPeriodicityFieldNumber = 4;
    private global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.MeterReadingPeriodicity meterReadingPeriodicity_ = global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.MeterReadingPeriodicity.MrpNull;
    /// <summary>
    /// Denotes how often a energy quantity is read on a metering point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.MeterReadingPeriodicity MeterReadingPeriodicity {
      get { return meterReadingPeriodicity_; }
      set {
        meterReadingPeriodicity_ = value;
      }
    }

    /// <summary>Field number for the "net_settlement_group" field.</summary>
    public const int NetSettlementGroupFieldNumber = 5;
    private global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.NetSettlementGroup netSettlementGroup_ = global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.NetSettlementGroup.NsgNull;
    /// <summary>
    /// Denotes the net settlement group
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.NetSettlementGroup NetSettlementGroup {
      get { return netSettlementGroup_; }
      set {
        netSettlementGroup_ = value;
      }
    }

    /// <summary>Field number for the "product" field.</summary>
    public const int ProductFieldNumber = 6;
    private global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.ProductType product_ = global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.ProductType.PtNull;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.ProductType Product {
      get { return product_; }
      set {
        product_ = value;
      }
    }

    /// <summary>Field number for the "effective_date" field.</summary>
    public const int EffectiveDateFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Timestamp effectiveDate_;
    /// <summary>
    /// The date on which the metering point is created
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EffectiveDate {
      get { return effectiveDate_; }
      set {
        effectiveDate_ = value;
      }
    }

    /// <summary>Field number for the "unit_type" field.</summary>
    public const int UnitTypeFieldNumber = 8;
    private global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.UnitType unitType_ = global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.UnitType.UtNull;
    /// <summary>
    /// Denotes the unit type. For a production metering point this is always a variation of watt/hour
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.UnitType UnitType {
      get { return unitType_; }
      set {
        unitType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MasterDataUpdated);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MasterDataUpdated other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MeteringPointId != other.MeteringPointId) return false;
      if (SettlementMethod != other.SettlementMethod) return false;
      if (MeteringMethod != other.MeteringMethod) return false;
      if (MeterReadingPeriodicity != other.MeterReadingPeriodicity) return false;
      if (NetSettlementGroup != other.NetSettlementGroup) return false;
      if (Product != other.Product) return false;
      if (!object.Equals(EffectiveDate, other.EffectiveDate)) return false;
      if (UnitType != other.UnitType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (MeteringPointId.Length != 0) hash ^= MeteringPointId.GetHashCode();
      if (SettlementMethod != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.SettlementMethod.SmNull) hash ^= SettlementMethod.GetHashCode();
      if (MeteringMethod != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.MeteringMethod.MmNull) hash ^= MeteringMethod.GetHashCode();
      if (MeterReadingPeriodicity != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.MeterReadingPeriodicity.MrpNull) hash ^= MeterReadingPeriodicity.GetHashCode();
      if (NetSettlementGroup != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.NetSettlementGroup.NsgNull) hash ^= NetSettlementGroup.GetHashCode();
      if (Product != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.ProductType.PtNull) hash ^= Product.GetHashCode();
      if (effectiveDate_ != null) hash ^= EffectiveDate.GetHashCode();
      if (UnitType != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.UnitType.UtNull) hash ^= UnitType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MeteringPointId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MeteringPointId);
      }
      if (SettlementMethod != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.SettlementMethod.SmNull) {
        output.WriteRawTag(16);
        output.WriteEnum((int) SettlementMethod);
      }
      if (MeteringMethod != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.MeteringMethod.MmNull) {
        output.WriteRawTag(24);
        output.WriteEnum((int) MeteringMethod);
      }
      if (MeterReadingPeriodicity != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.MeterReadingPeriodicity.MrpNull) {
        output.WriteRawTag(32);
        output.WriteEnum((int) MeterReadingPeriodicity);
      }
      if (NetSettlementGroup != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.NetSettlementGroup.NsgNull) {
        output.WriteRawTag(40);
        output.WriteEnum((int) NetSettlementGroup);
      }
      if (Product != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.ProductType.PtNull) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Product);
      }
      if (effectiveDate_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(EffectiveDate);
      }
      if (UnitType != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.UnitType.UtNull) {
        output.WriteRawTag(64);
        output.WriteEnum((int) UnitType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MeteringPointId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MeteringPointId);
      }
      if (SettlementMethod != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.SettlementMethod.SmNull) {
        output.WriteRawTag(16);
        output.WriteEnum((int) SettlementMethod);
      }
      if (MeteringMethod != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.MeteringMethod.MmNull) {
        output.WriteRawTag(24);
        output.WriteEnum((int) MeteringMethod);
      }
      if (MeterReadingPeriodicity != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.MeterReadingPeriodicity.MrpNull) {
        output.WriteRawTag(32);
        output.WriteEnum((int) MeterReadingPeriodicity);
      }
      if (NetSettlementGroup != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.NetSettlementGroup.NsgNull) {
        output.WriteRawTag(40);
        output.WriteEnum((int) NetSettlementGroup);
      }
      if (Product != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.ProductType.PtNull) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Product);
      }
      if (effectiveDate_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(EffectiveDate);
      }
      if (UnitType != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.UnitType.UtNull) {
        output.WriteRawTag(64);
        output.WriteEnum((int) UnitType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (MeteringPointId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MeteringPointId);
      }
      if (SettlementMethod != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.SettlementMethod.SmNull) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SettlementMethod);
      }
      if (MeteringMethod != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.MeteringMethod.MmNull) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MeteringMethod);
      }
      if (MeterReadingPeriodicity != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.MeterReadingPeriodicity.MrpNull) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MeterReadingPeriodicity);
      }
      if (NetSettlementGroup != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.NetSettlementGroup.NsgNull) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NetSettlementGroup);
      }
      if (Product != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.ProductType.PtNull) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Product);
      }
      if (effectiveDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EffectiveDate);
      }
      if (UnitType != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.UnitType.UtNull) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) UnitType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MasterDataUpdated other) {
      if (other == null) {
        return;
      }
      if (other.MeteringPointId.Length != 0) {
        MeteringPointId = other.MeteringPointId;
      }
      if (other.SettlementMethod != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.SettlementMethod.SmNull) {
        SettlementMethod = other.SettlementMethod;
      }
      if (other.MeteringMethod != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.MeteringMethod.MmNull) {
        MeteringMethod = other.MeteringMethod;
      }
      if (other.MeterReadingPeriodicity != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.MeterReadingPeriodicity.MrpNull) {
        MeterReadingPeriodicity = other.MeterReadingPeriodicity;
      }
      if (other.NetSettlementGroup != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.NetSettlementGroup.NsgNull) {
        NetSettlementGroup = other.NetSettlementGroup;
      }
      if (other.Product != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.ProductType.PtNull) {
        Product = other.Product;
      }
      if (other.effectiveDate_ != null) {
        if (effectiveDate_ == null) {
          EffectiveDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EffectiveDate.MergeFrom(other.EffectiveDate);
      }
      if (other.UnitType != global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.UnitType.UtNull) {
        UnitType = other.UnitType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MeteringPointId = input.ReadString();
            break;
          }
          case 16: {
            SettlementMethod = (global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.SettlementMethod) input.ReadEnum();
            break;
          }
          case 24: {
            MeteringMethod = (global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.MeteringMethod) input.ReadEnum();
            break;
          }
          case 32: {
            MeterReadingPeriodicity = (global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.MeterReadingPeriodicity) input.ReadEnum();
            break;
          }
          case 40: {
            NetSettlementGroup = (global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.NetSettlementGroup) input.ReadEnum();
            break;
          }
          case 48: {
            Product = (global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.ProductType) input.ReadEnum();
            break;
          }
          case 58: {
            if (effectiveDate_ == null) {
              EffectiveDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EffectiveDate);
            break;
          }
          case 64: {
            UnitType = (global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.UnitType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            MeteringPointId = input.ReadString();
            break;
          }
          case 16: {
            SettlementMethod = (global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.SettlementMethod) input.ReadEnum();
            break;
          }
          case 24: {
            MeteringMethod = (global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.MeteringMethod) input.ReadEnum();
            break;
          }
          case 32: {
            MeterReadingPeriodicity = (global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.MeterReadingPeriodicity) input.ReadEnum();
            break;
          }
          case 40: {
            NetSettlementGroup = (global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.NetSettlementGroup) input.ReadEnum();
            break;
          }
          case 48: {
            Product = (global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.ProductType) input.ReadEnum();
            break;
          }
          case 58: {
            if (effectiveDate_ == null) {
              EffectiveDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EffectiveDate);
            break;
          }
          case 64: {
            UnitType = (global::Energinet.DataHub.MeteringPoints.IntegrationEventContracts.MasterDataUpdated.Types.UnitType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the MasterDataUpdated message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum NetSettlementGroup {
        [pbr::OriginalName("NSG_NULL")] NsgNull = 0,
        [pbr::OriginalName("NSG_ZERO")] NsgZero = 1,
        [pbr::OriginalName("NSG_ONE")] NsgOne = 2,
        [pbr::OriginalName("NSG_TWO")] NsgTwo = 3,
        [pbr::OriginalName("NSG_THREE")] NsgThree = 4,
        [pbr::OriginalName("NSG_SIX")] NsgSix = 5,
        [pbr::OriginalName("NSG_NINETYNINE")] NsgNinetynine = 6,
      }

      public enum ProductType {
        [pbr::OriginalName("PT_NULL")] PtNull = 0,
        [pbr::OriginalName("PT_TARIFF")] PtTariff = 1,
        [pbr::OriginalName("PT_FUELQUANTITY")] PtFuelquantity = 2,
        [pbr::OriginalName("PT_POWERACTIVE")] PtPoweractive = 3,
        [pbr::OriginalName("PT_POWERREACTIVE")] PtPowerreactive = 4,
        [pbr::OriginalName("PT_ENERGYACTIVE")] PtEnergyactive = 5,
        [pbr::OriginalName("PT_ENERGYREACTIVE")] PtEnergyreactive = 6,
      }

      public enum SettlementMethod {
        [pbr::OriginalName("SM_NULL")] SmNull = 0,
        [pbr::OriginalName("SM_FLEX")] SmFlex = 1,
        [pbr::OriginalName("SM_PROFILED")] SmProfiled = 2,
        [pbr::OriginalName("SM_NONPROFILED")] SmNonprofiled = 3,
      }

      public enum MeteringMethod {
        [pbr::OriginalName("MM_NULL")] MmNull = 0,
        [pbr::OriginalName("MM_PHYSICAL")] MmPhysical = 1,
        [pbr::OriginalName("MM_VIRTUAL")] MmVirtual = 2,
        [pbr::OriginalName("MM_CALCULATED")] MmCalculated = 3,
      }

      public enum MeterReadingPeriodicity {
        [pbr::OriginalName("MRP_NULL")] MrpNull = 0,
        [pbr::OriginalName("MRP_HOURLY")] MrpHourly = 1,
        [pbr::OriginalName("MRP_QUARTERLY")] MrpQuarterly = 2,
        [pbr::OriginalName("MRP_MONTHLY")] MrpMonthly = 3,
        [pbr::OriginalName("MRP_YEARLY")] MrpYearly = 4,
      }

      public enum UnitType {
        [pbr::OriginalName("UT_NULL")] UtNull = 0,
        /// <summary>
        /// Watt per hour
        /// </summary>
        [pbr::OriginalName("UT_WH")] UtWh = 1,
        /// <summary>
        /// Kilowatt per hour
        /// </summary>
        [pbr::OriginalName("UT_KWH")] UtKwh = 2,
        /// <summary>
        /// Megawatt per hour
        /// </summary>
        [pbr::OriginalName("UT_MWH")] UtMwh = 3,
        /// <summary>
        /// Gigawatt per hour
        /// </summary>
        [pbr::OriginalName("UT_GWH")] UtGwh = 4,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
